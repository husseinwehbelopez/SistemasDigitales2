//------------------------------- Código C GNU -------------------------------//

C:\alumnos\SDII_10-05-15\SDII_10-05-15\XM-11.elf:     file format elf32-m68k

00020000 <__start>	moveal #196608,%sp
00020006 		movew #8192,%sr
0002000a 		jsr 00022adc <__init>
00020010 <bucle>	jsr 0002113c <bucleMain>
00020016 		bras 00020010 <bucle>
00020018 		rts
0002001a <_prep_TOUT0>	addal #-60,%sp
00020020 		moveml %d0-%fp,%sp@
00020024 		jsr 000208bc <rutina_tout0>
0002002a 		moveml %sp@,%d0-%fp
0002002e 		addal #60,%sp
00020034 		rte
00020036 <_prep_TOUT1>	addal #-60,%sp
0002003c 		moveml %d0-%fp,%sp@
00020040 		jsr 00022bbe <rutina_tout1>
00020046 		moveml %sp@,%d0-%fp
0002004a 		addal #60,%sp
00020050 		rte
00020052 <_prep_TOUT2>	addal #-60,%sp
00020058 		moveml %d0-%fp,%sp@
0002005c 		jsr 00022bc6 <rutina_tout2>
00020062 		moveml %sp@,%d0-%fp
00020066 		addal #60,%sp
0002006c 		rte
0002006e <_prep_TOUT3>	addal #-60,%sp
00020074 		moveml %d0-%fp,%sp@
00020078 		jsr 00022bce <rutina_tout3>
0002007e 		moveml %sp@,%d0-%fp
00020082 		addal #60,%sp
00020088 		rte
0002008a <_prep_INT1>	addal #-60,%sp
00020090 		moveml %d0-%fp,%sp@
00020094 		jsr 00020c78 <rutina_int1>
0002009a 		moveml %sp@,%d0-%fp
0002009e 		addal #60,%sp
000200a4 		rte
000200a6 <_prep_INT2>	addal #-60,%sp
000200ac 		moveml %d0-%fp,%sp@
000200b0 		jsr 00022ba6 <rutina_int2>
000200b6 		moveml %sp@,%d0-%fp
000200ba 		addal #60,%sp
000200c0 		rte
000200c2 <_prep_INT3>	addal #-60,%sp
000200c8 		moveml %d0-%fp,%sp@
000200cc 		jsr 00022bae <rutina_int3>
000200d2 		moveml %sp@,%d0-%fp
000200d6 		addal #60,%sp
000200dc 		rte
000200de <_prep_INT4>	addal #-60,%sp
000200e4 		moveml %d0-%fp,%sp@
000200e8 		jsr 00022bb6 <rutina_int4>
000200ee 		moveml %sp@,%d0-%fp
000200f2 		addal #60,%sp
000200f8 		rte
000200fa 		rts
// Autor: Javier Guillén Álvarez
//----------------------------------------------------------------------------------
// ALIAS para cuando no se especifican opciones
void outNumDec(UINT base, double n, UINT dec, UBYTE opciones)
{
000200fc <outNumDec>	linkw %fp,#-32
00020100 		lea %sp@(-40),%sp
00020104 		moveml %d2-%d7/%a2-%a5,%sp@
00020108 		movel %fp@(8),%d3
0002010c 		movel %fp@(12),%d6
00020110 		movel %fp@(16),%d7
00020114 		movel %fp@(20),%d4
00020118 		movel %fp@(24),%d2
0002011c 		moveaw %d2,%a4
  // Imprime la parte entera
  outNum(base, (int)n, opciones);  
0002011e 		lea 000241a2 <__fixdfsi>,%a2
00020124 		movel %d7,%sp@-
00020126 		movel %d6,%sp@-
00020128 		jsr %a2@
0002012a 		addql #8,%sp
0002012c 		moveal %d0,%a0
0002012e 		lea 00024242 <_etext>,%a3
00020134 		lea 00024253 <_etext+0x11>,%a1
0002013a 		moveq #1,%d0
0002013c 		andl %d0,%d2
0002013e 		moveal %a2,%a5
00020140 		tstb %d2
00020142 		bnes 00020156 <outNumDec+0x5a>
00020144 		tstl %a0
00020146 		bges 00020156 <outNumDec+0x5a>
00020148 		moveq #45,%d2
0002014a 		moveb %d2,%d1
0002014c 		moveq #19,%d0
0002014e 		trap #15
00020150 		movel %a0,%d2
00020152 		negl %d2
00020154 		bras 00020158 <outNumDec+0x5c>
00020156 		movel %a0,%d2
00020158 		lea %fp@(-1),%a0
0002015c 		clrb %d1
0002015e 		moveb %d1,%fp@(-1)
00020162 		movel %a4,%d0
00020164 		moveq #2,%d1
00020166 		andl %d1,%d0
00020168 		moveal %d0,%a2
0002016a 		movel %a2,%d5
0002016c 		tstb %d5
0002016e 		beqs 0002017c <outNumDec+0x80>
00020170 		movel %d2,%d1
00020172 		divull %d3,%d0,%d1
00020176 		moveb %a1@(00000000,%d0:l),%a0@-
0002017a 		bras 00020186 <outNumDec+0x8a>
0002017c 		movel %d2,%d1
0002017e 		divull %d3,%d0,%d1
00020182 		moveb %a3@(00000000,%d0:l),%a0@-
00020186 		divull %d3,%d2,%d2
0002018a 		bnes 0002016c <outNumDec+0x70>
0002018c 		movel %a0,%sp@-
0002018e 		jsr 00022506 <output>
00020194 		addql #4,%sp
  
  if(dec != 0){
00020196 		tstl %d4
00020198 		beqw 0002025a <outNumDec+0x15e>
    double dDecimal = n - (int)n;
0002019c 		movel %d7,%sp@-
0002019e 		movel %d6,%sp@-
000201a0 		jsr %a5@
000201a2 		addql #4,%sp
000201a4 		movel %d0,%sp@
000201a6 		jsr 00024028 <__floatsidf>
000201ac 		addql #4,%sp
000201ae 		movel %d1,%sp@-
000201b0 		movel %d0,%sp@-
000201b2 		movel %d7,%sp@-
000201b4 		movel %d6,%sp@-
000201b6 		jsr 00022c32 <__subdf3>
000201bc 		lea %sp@(16),%sp
000201c0 		moveal %d0,%a0
000201c2 		moveal %d1,%a1

    // Multiplica la parte decimal por 10^dec
    while(dec--){
000201c4 		subql #1,%d4
000201c6 		movel %a4,%d5
000201c8 		moveq #1,%d0
000201ca 		andl %d0,%d5
000201cc 		moveq #-1,%d1
000201ce 		cmpl %d4,%d1
000201d0 		beqs 000201f4 <outNumDec+0xf8>
      dDecimal *= 10;
000201d2 		clrl %sp@-
000201d4 		movel #1076101120,%sp@-
000201da 		movel %a1,%sp@-
000201dc 		movel %a0,%sp@-
000201de 		jsr 000230c8 <__muldf3>
000201e4 		lea %sp@(16),%sp
000201e8 		moveal %d0,%a0
000201ea 		moveal %d1,%a1
    }
000201ec 		subql #1,%d4
000201ee 		moveq #-1,%d0
000201f0 		cmpl %d4,%d0
000201f2 		bnes 000201d2 <outNumDec+0xd6>
000201f4 		moveq #46,%d2
000201f6 		moveb %d2,%d1
000201f8 		moveq #19,%d0
000201fa 		trap #15

    // Imprime la marca de decimal
    outch('.');

    // Imprime 'dec' decimales
    outNum(base, (int)dDecimal, opciones);
000201fc 		movel %a1,%sp@-
000201fe 		movel %a0,%sp@-
00020200 		jsr %a5@
00020202 		addql #8,%sp
00020204 		moveal %d0,%a0
00020206 		tstb %d5
00020208 		bnes 0002021c <outNumDec+0x120>
0002020a 		tstl %a0
0002020c 		bges 0002021c <outNumDec+0x120>
0002020e 		moveq #45,%d2
00020210 		moveb %d2,%d1
00020212 		moveq #19,%d0
00020214 		trap #15
00020216 		movel %a0,%d2
00020218 		negl %d2
0002021a 		bras 0002021e <outNumDec+0x122>
0002021c 		movel %a0,%d2
0002021e 		lea %fp@(-1),%a0
00020222 		clrb %d1
00020224 		moveb %d1,%fp@(-1)
00020228 		movel %a2,%d4
0002022a 		tstb %d4
0002022c 		beqs 0002023c <outNumDec+0x140>
0002022e 		movel %d2,%d1
00020230 		divull %d3,%d0,%d1
00020234 		lea 00024253 <_etext+0x11>,%a1
0002023a 		bras 00020248 <outNumDec+0x14c>
0002023c 		movel %d2,%d1
0002023e 		divull %d3,%d0,%d1
00020242 		lea 00024242 <_etext>,%a1
00020248 		moveb %a1@(00000000,%d0:l),%a0@-
0002024c 		divull %d3,%d2,%d2
00020250 		bnes 0002022a <outNumDec+0x12e>
00020252 		movel %a0,%sp@-
00020254 		jsr 00022506 <output>
  }
}
0002025a 		moveml %fp@(-72),%d2-%d7/%a2-%a5
00020260 		unlk %fp
00020262 		rts
//
// Autor: Javier Guillén Álvarez
//------------------------------------------------------------------------------
void ADC_test(long int datoDAC)
{  
00020264 <ADC_test>	linkw %fp,#-32
00020268 		lea %sp@(-40),%sp
0002026c 		moveml %d2-%d7/%a2-%a5,%sp@
00020270 		movel %fp@(8),%d5
00020274 		moveal #268435616,%a0
0002027a 		movew #-32752,%a0@
0002027e 		moveal #268435632,%a1
00020284 		clrw %a1@
00020286 		lea %a0@(20),%a0
0002028a 		movew #-26729,%a0@
0002028e 		clrw %a0@
00020290 		clrw %a0@
00020292 		movew #32,%a1@
00020296 		movew #-29184,%a0@
0002029a 		movew #-29184,%a0@
0002029e 		movew #3584,%a0@
000202a2 		lea %a0@(-12),%a0
000202a6 		movew #4608,%a0@
000202aa 		subql #4,%a0
000202ac 		movew %a0@,%d0
000202ae 		oril #32768,%d0
000202b4 		movew %d0,%a0@
000202b6 		lea 00024264 <_etext+0x22>,%a1
000202bc 		lea 00024242 <_etext>,%a4
000202c2 		lea 00024253 <_etext+0x11>,%a3
000202c8 		movel %fp,%d6
000202ca 		subql #1,%d6
000202cc 		lea 00024266 <_etext+0x24>,%a5
000202d2 		movel #148073,%d7
000202d8 		addql #8,%a0
000202da 		movew %a0@,%d0
000202dc 		moveq #1,%d1
000202de 		andl %d1,%d0
000202e0 		tstw %d0
000202e2 		beqs 000202da <ADC_test+0x76>
000202e4 		moveal #268435628,%a0
000202ea 		movew %a0@,%d0
000202ec 		orl %d1,%d0
000202ee 		movew %d0,%a0@
000202f0 		addql #4,%a0
000202f2 		movew #16,%a0@
000202f6 		addql #4,%a0
000202f8 		movew %a0@,%d0
000202fa 		movew %a0@,%d0
000202fc 		andil #65535,%d0
00020302 		movew %a0@,%d1
00020304 		andil #65535,%d1
0002030a 		asrl #3,%d1
0002030c 		lsll #5,%d0
0002030e 		addl %d0,%d1
00020310 		btst #11,%d1
00020314 		beqs 0002031e <ADC_test+0xba>
00020316 		oril #-4096,%d1
0002031c 		bras 00020324 <ADC_test+0xc0>
0002031e 		andil #4095,%d1
  int datoLeido=0,errorAbs=0,errorRelat=0;
   
  datoLeido = ADC_dato();
  
  datoLeido *= 2; // Para igualar la escala con el DAC
00020324 		movel %d1,%d3
00020326 		addl %d3,%d3

//------------------------------------------------------------------------------
// INLINE void output(char *start)
//
// Descripción: imprime un texto en la pantalla del PC
// Entrada:     char *start, texto que imprimir, terminado en 0
// Salida:      void
// Devuelve:    void
//------------------------------------------------------------------------------
INLINE void output(char *start)
{
  if (start!=0){
00020328 		tstl %a1
0002032a 		beqs 0002033e <ADC_test+0xda>
    int i=0;
    for (i=0; start[i]!=0; i++){
0002032c 		tstb %a1@
0002032e 		beqs 0002033e <ADC_test+0xda>
00020330 		moveal %a1,%a0
00020332 		moveb %a0@+,%d2
00020334 		moveb %d2,%d1
00020336 		moveq #19,%d0
00020338 		trap #15
0002033a 		tstb %a0@
0002033c 		bnes 00020332 <ADC_test+0xce>
0002033e 		movel %d3,%d2
00020340 		moveal %d6,%a0
00020342 		clrb %d4
00020344 		moveb %d4,%fp@(-1)
00020348 		moveal %d3,%a2
0002034a 		subal %d5,%a2
0002034c 		clrb %d0
0002034e 		beqs 0002035e <ADC_test+0xfa>
00020350 		movel %d2,%d1
00020352 		moveq #10,%d4
00020354 		divull %d4,%d0,%d1
00020358 		moveb %a3@(00000000,%d0:l),%a0@-
0002035c 		bras 0002036a <ADC_test+0x106>
0002035e 		movel %d2,%d1
00020360 		moveq #10,%d4
00020362 		divull %d4,%d0,%d1
00020366 		moveb %a4@(00000000,%d0:l),%a0@-
0002036a 		moveq #10,%d1
0002036c 		divull %d1,%d2,%d2
00020370 		bnes 0002034c <ADC_test+0xe8>
00020372 		movel %a0,%sp@-
00020374 		jsr 00022506 <output>
0002037a 		addql #4,%sp
0002037c 		tstl %a5
0002037e 		beqs 00020392 <ADC_test+0x12e>
00020380 		tstb %a5@
00020382 		beqs 00020392 <ADC_test+0x12e>
00020384 		moveal %a5,%a0
00020386 		moveb %a0@+,%d2
00020388 		moveb %d2,%d1
0002038a 		moveq #19,%d0
0002038c 		trap #15
0002038e 		tstb %a0@
00020390 		bnes 00020386 <ADC_test+0x122>
00020392 		movel %d5,%d2
00020394 		moveal %d6,%a0
00020396 		clrb %d4
00020398 		moveb %d4,%fp@(-1)
0002039c 		subal %a5,%a5
0002039e 		movew %a5,%d0
000203a0 		tstb %d0
000203a2 		beqs 000203b2 <ADC_test+0x14e>
000203a4 		movel %d2,%d1
000203a6 		moveq #10,%d4
000203a8 		divull %d4,%d0,%d1
000203ac 		moveb %a3@(00000000,%d0:l),%a0@-
000203b0 		bras 000203be <ADC_test+0x15a>
000203b2 		movel %d2,%d1
000203b4 		moveq #10,%d4
000203b6 		divull %d4,%d0,%d1
000203ba 		moveb %a4@(00000000,%d0:l),%a0@-
000203be 		moveq #10,%d1
000203c0 		divull %d1,%d2,%d2
000203c4 		bnes 0002039e <ADC_test+0x13a>
000203c6 		movel %a0,%sp@-
000203c8 		jsr 00022506 <output>
000203ce 		addql #4,%sp
000203d0 		tstl %d7
000203d2 		beqs 000203e6 <ADC_test+0x182>
000203d4 		moveal %d7,%a0
000203d6 		tstb %a0@
000203d8 		beqs 000203e6 <ADC_test+0x182>
000203da 		moveb %a0@+,%d2
000203dc 		moveb %d2,%d1
000203de 		moveq #19,%d0
000203e0 		trap #15
000203e2 		tstb %a0@
000203e4 		bnes 000203da <ADC_test+0x176>

  output(" ");
  print_number (10, 1, (long)datoLeido);
  output("\t ");
  print_number (10, 1, (long)datoDAC);
  output("\t  ");
  
  if (datoDAC >	datoLeido)
000203e6 		cmpl %d5,%d3
000203e8 		bges 000203ee <ADC_test+0x18a>
     errorAbs=datoDAC-datoLeido;
000203ea 		moveal %d5,%a2
000203ec 		subal %d3,%a2
000203ee 		movel %a2,%d2
000203f0 		moveal %d6,%a0
000203f2 		clrb %d0
000203f4 		moveb %d0,%fp@(-1)
000203f8 		clrl %d4
000203fa 		tstb %d4
000203fc 		beqs 0002040c <ADC_test+0x1a8>
000203fe 		movel %d2,%d1
00020400 		moveq #10,%d7
00020402 		divull %d7,%d0,%d1
00020406 		moveb %a3@(00000000,%d0:l),%a0@-
0002040a 		bras 00020418 <ADC_test+0x1b4>
0002040c 		movel %d2,%d1
0002040e 		moveq #10,%d7
00020410 		divull %d7,%d0,%d1
00020414 		moveb %a4@(00000000,%d0:l),%a0@-
00020418 		moveq #10,%d1
0002041a 		divull %d1,%d2,%d2
0002041e 		bnes 000203fa <ADC_test+0x196>
00020420 		movel %a0,%sp@-
00020422 		jsr 00022506 <output>
00020428 		addql #4,%sp
0002042a 		movel #148077,%d4
00020430 		beqs 00020448 <ADC_test+0x1e4>
00020432 		tstb 0002426d <_etext+0x2b>
00020438 		beqs 00020448 <ADC_test+0x1e4>
0002043a 		moveal %d4,%a0
0002043c 		moveb %a0@+,%d2
0002043e 		moveb %d2,%d1
00020440 		moveq #19,%d0
00020442 		trap #15
00020444 		tstb %a0@
00020446 		bnes 0002043c <ADC_test+0x1d8>
  else
     errorAbs=datoLeido-datoDAC;

  print_number (10, 1, errorAbs);
  output("\t\t  ");

  if (datoDAC>0)
00020448 		tstl %d5
0002044a 		bles 00020460 <ADC_test+0x1fc>
     errorRelat = (100 * errorAbs)/datoDAC;
0002044c 		lea %a2@(00000000,%a2:l:2),%a0
00020450 		movel %a0,%d0
00020452 		lsll #5,%d0
00020454 		addal %d0,%a0
00020456 		movel %a0,%d1
00020458 		addl %a2,%d1
0002045a 		divsll %d5,%d1,%d1
0002045e 		bras 0002047a <ADC_test+0x216>
  else if (datoLeido>0)
00020460 		tstl %d3
00020462 		bles 00020478 <ADC_test+0x214>
     errorRelat = (100 * errorAbs)/datoLeido;
00020464 		lea %a2@(00000000,%a2:l:2),%a0
00020468 		movel %a0,%d0
0002046a 		lsll #5,%d0
0002046c 		addal %d0,%a0
0002046e 		movel %a0,%d1
00020470 		addl %a2,%d1
00020472 		divsll %d3,%d1,%d1
00020476 		bras 0002047a <ADC_test+0x216>
  else
     errorRelat = 100;
00020478 		moveq #100,%d1
0002047a 		movel %d1,%d2
0002047c 		moveal %d6,%a0
0002047e 		clrb %d7
00020480 		moveb %d7,%fp@(-1)
00020484 		clrl %d3
00020486 		tstb %d3
00020488 		beqs 00020498 <ADC_test+0x234>
0002048a 		movel %d2,%d1
0002048c 		moveq #10,%d4
0002048e 		divull %d4,%d0,%d1
00020492 		moveb %a3@(00000000,%d0:l),%a0@-
00020496 		bras 000204a4 <ADC_test+0x240>
00020498 		movel %d2,%d1
0002049a 		moveq #10,%d7
0002049c 		divull %d7,%d0,%d1
000204a0 		moveb %a4@(00000000,%d0:l),%a0@-
000204a4 		moveq #10,%d1
000204a6 		divull %d1,%d2,%d2
000204aa 		bnes 00020486 <ADC_test+0x222>
000204ac 		movel %a0,%sp@-
000204ae 		jsr 00022506 <output>
000204b4 		movel #148082,%d4
000204ba 		beqs 000204d2 <ADC_test+0x26e>
000204bc 		tstb 00024272 <_etext+0x30>
000204c2 		beqs 000204d2 <ADC_test+0x26e>
000204c4 		moveal %d4,%a0
000204c6 		moveb %a0@+,%d2
000204c8 		moveb %d2,%d1
000204ca 		moveq #19,%d0
000204cc 		trap #15
000204ce 		tstb %a0@
000204d0 		bnes 000204c6 <ADC_test+0x262>

  print_number (10, 1, errorRelat);
  output("%\n");
}
000204d2 		moveml %fp@(-72),%d2-%d7/%a2-%a5
000204d8 		unlk %fp
000204da 		rts
// Descripción:
//   Función de inicialización del LCD
//--------------------------------------
void LCD_init()
{
000204dc <LCD_init>	linkw %fp,#0
000204e0 		movel %d2,%sp@-
  LCD_inst(FS_CONF8);	// Function Set: 8bits, 2líneas, 5x7puntos
000204e2 		movew #14336,%d1
000204e6 		movel #14464,%d0

void set16_puertoS (UWORD valor)
{
  UWORD* pchar;
  puertoS = valor;
000204ec 		movew %d0,000309d8 <puertoS>
  pchar=(UWORD*)BASE_PUERTO_S;
  (*pchar)=puertoS;
000204f2 		movew %d0,40000000 <_end+0x3ffcf5f0>
       outch(start[i]);
    }
  }
}

//------------------------------------------------------------------------------
// INLINE void retardo(UINT microsegundos) 
//
// Descripción: Introduce un retardo de los microsegundos indicados aproximadamente
//
// NOTA: La fórmula de cálculo de 'ret' proporciona un error de +-5% si
//       microsegundos >= 100. El error aumenta para tiempos menores.
//
// Autor: Javier Guillén Álvarez
//------------------------------------------------------------------------------
INLINE void retardo(UINT microsegundos) 
{
  UINT ret = (44 * microsegundos - 32)/16;
000204f8 		movel #8248,%d0
  while(ret--);
000204fe 		subql #1,%d0
00020500 		moveq #-1,%d2
00020502 		cmpl %d0,%d2
00020504 		bnes 000204fe <LCD_init+0x22>
00020506 		movew %d1,000309d8 <puertoS>
0002050c 		movew %d1,40000000 <_end+0x3ffcf5f0>
00020512 		movel #8248,%d0
00020518 		subql #1,%d0
0002051a 		moveq #-1,%d1
0002051c 		cmpl %d0,%d1
0002051e 		bnes 00020518 <LCD_init+0x3c>
  LCD_inst(CLR_DISP);	// Clear Display 
00020520 		movew #256,%d1
00020524 		movel #384,%d0
0002052a 		movew %d0,000309d8 <puertoS>
00020530 		movew %d0,40000000 <_end+0x3ffcf5f0>
00020536 		movel #8248,%d0
0002053c 		subql #1,%d0
0002053e 		moveq #-1,%d2
00020540 		cmpl %d0,%d2
00020542 		bnes 0002053c <LCD_init+0x60>
00020544 		movew %d1,000309d8 <puertoS>
0002054a 		movew %d1,40000000 <_end+0x3ffcf5f0>
00020550 		movel #8248,%d0
00020556 		subql #1,%d0
00020558 		moveq #-1,%d1
0002055a 		cmpl %d0,%d1
0002055c 		bnes 00020556 <LCD_init+0x7a>
  LCD_inst(MODE_SET);	// Autoincremento del cursor y sin desplazamiento (shift)
0002055e 		movew #1536,%d1
00020562 		movel #1664,%d0
00020568 		movew %d0,000309d8 <puertoS>
0002056e 		movew %d0,40000000 <_end+0x3ffcf5f0>
00020574 		movel #8248,%d0
0002057a 		subql #1,%d0
0002057c 		moveq #-1,%d2
0002057e 		cmpl %d0,%d2
00020580 		bnes 0002057a <LCD_init+0x9e>
00020582 		movew %d1,000309d8 <puertoS>
00020588 		movew %d1,40000000 <_end+0x3ffcf5f0>
0002058e 		movel #8248,%d0
00020594 		subql #1,%d0
00020596 		moveq #-1,%d1
00020598 		cmpl %d0,%d1
0002059a 		bnes 00020594 <LCD_init+0xb8>
  LCD_inst(CD_ON);	// Activa el display, el cursor y el parpadeo
0002059c 		movew #3840,%d1
000205a0 		movel #3968,%d0
000205a6 		movew %d0,000309d8 <puertoS>
000205ac 		movew %d0,40000000 <_end+0x3ffcf5f0>
000205b2 		movel #8248,%d0
000205b8 		subql #1,%d0
000205ba 		moveq #-1,%d2
000205bc 		cmpl %d0,%d2
000205be 		bnes 000205b8 <LCD_init+0xdc>
000205c0 		movew %d1,000309d8 <puertoS>
000205c6 		movew %d1,40000000 <_end+0x3ffcf5f0>
000205cc 		movel #8248,%d0
000205d2 		subql #1,%d0
000205d4 		moveq #-1,%d1
000205d6 		cmpl %d0,%d1
000205d8 		bnes 000205d2 <LCD_init+0xf6>
}
000205da 		movel %sp@+,%d2
000205dc 		unlk %fp
000205de 		rts

//--------------------------------------
// void LCD_reset()
//
// Descripción:
//   Función de inicialización del LCD
//--------------------------------------
void LCD_reset()
{
000205e0 <LCD_reset>	linkw %fp,#0
000205e4 		movel %d2,%sp@-
000205e6 		movel #41248,%d0
000205ec 		subql #1,%d0
000205ee 		moveq #-1,%d1
000205f0 		cmpl %d0,%d1
000205f2 		bnes 000205ec <LCD_reset+0xc>
  int i;
  retardo(RET_15MS);		// Retardo inicial
  for(i = 0; i < 3; i++){	// Se repite 3 veces,
000205f4 		clrl %d1
000205f6 		moveaw #12416,%a1
000205fa 		moveaw #12288,%a0
000205fe 		movew %a1,000309d8 <puertoS>
00020604 		movew %a1,40000000 <_end+0x3ffcf5f0>
0002060a 		movel #8248,%d0
00020610 		addql #1,%d1
00020612 		subql #1,%d0
00020614 		moveq #-1,%d2
00020616 		cmpl %d0,%d2
00020618 		bnes 00020612 <LCD_reset+0x32>
0002061a 		movew %a0,000309d8 <puertoS>
00020620 		movew %a0,40000000 <_end+0x3ffcf5f0>
00020626 		movel #8248,%d0
0002062c 		subql #1,%d0
0002062e 		moveq #-1,%d2
00020630 		cmpl %d0,%d2
00020632 		bnes 0002062c <LCD_reset+0x4c>
00020634 		movel #41248,%d0
0002063a 		subql #1,%d0
0002063c 		moveq #-1,%d2
0002063e 		cmpl %d0,%d2
00020640 		bnes 0002063a <LCD_reset+0x5a>
00020642 		moveq #2,%d0
00020644 		cmpl %d1,%d0
00020646 		bges 000205fe <LCD_reset+0x1e>
    LCD_inst(FS_8BITS);		//   Instrucción para funcionamiento en 8 bits
    retardo(RET_15MS);		//   Hay que esperar más de 4.1ms
  }
}
00020648 		movel %sp@+,%d2
0002064a 		unlk %fp
0002064c 		rts
// Descripción:
//   Explora el teclado matricial y devuelve la tecla 
//   pulsada
//------------------------------------------------------
char teclado(void) {
0002064e <teclado>	linkw %fp,#0
00020652 		lea %sp@(-28),%sp
00020656 		moveml %d2-%d7/%a2,%sp@
	//char tecla;
	BYTE fila, columna, fila_mask;
	static char teclas[4][4] = {{"123C"},
								{"456D"},
								{"789E"},
								{"A0BF"}};
	// Bucle de exploración del teclado
	while (TRUE) {
0002065a 		lea 00030102 <teclas.108>,%a2
		// Excitamos una columna
		for (columna = NUM_COLS - 1; columna >= 0; columna--) {
00020660 		moveq #3,%d6
			salida = salida & 0xFFF0;
00020662 		movew 00030112 <salida>,%d0
00020668 		andil #65520,%d0
			salida = salida | (EXCIT << columna);
0002066e 		moveb %d6,%d2
00020670 		extbl %d2
00020672 		moveq #1,%d1
00020674 		lsll %d2,%d1
00020676 		orl %d1,%d0
00020678 		movew %d0,00030112 <salida>
0002067e 		movew %d0,000309d8 <puertoS>
00020684 		movew %d0,40000000 <_end+0x3ffcf5f0>
0002068a 		movel #54998,%d0
00020690 		subql #1,%d0
00020692 		moveq #-1,%d1
00020694 		cmpl %d0,%d1
00020696 		bnes 00020690 <teclado+0x42>
			set16_puertoS (salida);					// Se envía la excitación de columna
			retardo(20000);							// Esperamos respuesta de optoacopladores
			
			// Exploramos las filas en busca de respuesta
			for (fila = NUM_FILAS - 1; fila >= 0; fila--) {
00020698 		moveq #3,%d5
0002069a 		moveq #1,%d7
0002069c 		clrl %d3
0002069e 		clrl %d4
000206a0 		moveal %d2,%a1
				fila_mask = EXCIT << fila;					// Máscara para leer el bit de la fila actual
000206a2 		moveb %d5,%d1
000206a4 		extbl %d1
000206a6 		movel %d7,%d0
000206a8 		lsll %d1,%d0
}

//------------------------------------------
// UWORD lee16_puertoE (void)
//
// Descripción:
//   Lee los 16 bits del puerto de entrada
//------------------------------------------
UWORD lee16_puertoE (void)
{
  return *((UWORD*) BASE_PUERTO_E);
000206aa 		movew 50000002 <_end+0x4ffcf5f2>,%d3
				if (lee16_puertoE() & fila_mask) {				// Si encuentra tecla pulsada,
000206b0 		movew %d3,%d4
000206b2 		moveb %d0,%d2
000206b4 		extbl %d2
000206b6 		movel %d4,%d0
000206b8 		andl %d2,%d0
000206ba 		moveal %d1,%a0
000206bc 		beqs 000206ea <teclado+0x9c>
					while (lee_puertoE() & fila_mask);				//	Esperamos a que se suelte
000206be 		clrl %d1
000206c0 		clrl %d3
}

//-------------------------------------------
// UBYTE lee_puertoE (void)
//
// Descripción:
//   Lee el byte bajo del puerto de entrada
//-------------------------------------------
UBYTE lee_puertoE (void)
{
  return  (UBYTE)*((UWORD*) BASE_PUERTO_E);
000206c2 		moveb 50000003 <_end+0x4ffcf5f3>,%d1
000206c8 		moveb %d1,%d3
000206ca 		movel %d3,%d0
000206cc 		andl %d2,%d0
000206ce 		bnes 000206c2 <teclado+0x74>
000206d0 		movel #54998,%d0
000206d6 		subql #1,%d0
000206d8 		moveq #-1,%d1
000206da 		cmpl %d0,%d1
000206dc 		bnes 000206d6 <teclado+0x88>
					retardo(20000);						//	Retardo antirrebotes
					return teclas[fila][columna];					//	Devolvemos la tecla pulsada
000206de 		lea %a1@(00000000,%a0:l:4),%a0
000206e2 		moveb %a0@(00000000,%a2:l),%d0
000206e6 		extbl %d0
000206e8 		bras 00020700 <teclado+0xb2>
000206ea 		movel %d5,%d0
000206ec 		subql #1,%d0
000206ee 		moveb %d0,%d5
000206f0 		bges 000206a2 <teclado+0x54>
000206f2 		movel %d6,%d0
000206f4 		subql #1,%d0
000206f6 		moveb %d0,%d6
000206f8 		bgew 00020662 <teclado+0x14>
				}
			}
			// Siguiente columna
		}
		// Exploración finalizada sin encontrar una tecla pulsada
	}
000206fc 		braw 00020660 <teclado+0x12>
	// Reiniciamos exploración
}00020700 		moveml %sp@,%d2-%d7/%a2
00020704 		lea %sp@(28),%sp
00020708 		unlk %fp
0002070a 		rts
// Parámetros:
//   char* cadena
//     puntero al búfer donde almacena la cadena leída.
//------------------------------------------------------
int getCadTeclado(char* cadena) {
0002070c <getCadTeclado>	linkw %fp,#0
00020710 		lea %sp@(-40),%sp
00020714 		moveml %d2-%d7/%a2-%a5,%sp@
00020718 		moveal %fp@(8),%a3
	int i = 0;													// Lleva la cuenta de la posición en el array
0002071c 		clrl %d4
	char w;														// Variable donde se almacena cada caracter leído del teclado
	int num = 0;													// Número que devuelve la función
	int cifras = 0;	
0002071e 		clrl %d5
00020720 		lea 00024275 <_etext+0x33>,%a0
00020726 		lea %pc@(0002064e <teclado>),%a5
0002072a 		lea 00024279 <_etext+0x37>,%a4
00020730 		tstl %a0
00020732 		beqs 00020744 <getCadTeclado+0x38>
00020734 		tstb %a0@
00020736 		beqs 00020744 <getCadTeclado+0x38>
00020738 		moveb %a0@+,%d2
0002073a 		moveb %d2,%d1
0002073c 		moveq #19,%d0
0002073e 		trap #15
00020740 		tstb %a0@
00020742 		bnes 00020738 <getCadTeclado+0x2c>
	output("			");												// Número de cifras del número
	do {														// Se ejecuta:
00020744 		clrl %d7
00020746 		lea %a3@(00000000,%d4:l),%a2
0002074a 		clrl %d6
0002074c 		bras 00020758 <getCadTeclado+0x4c>
0002074e 		addql #1,%a2
00020750 		addql #1,%d4
00020752 		moveq #3,%d0
00020754 		cmpl %d4,%d0
00020756 		blts 000207c2 <getCadTeclado+0xb6>
		w = teclado();												//	Lee el teclado matricial y almacena la tecla pulsada en w
00020758 		jsr %a5@
0002075a 		moveb %d0,%d2
		if (w <= '9' && w >= '0') {										//	Si la tecla pulsada es un número
0002075c 		moveq #-48,%d0
0002075e 		addl %d2,%d0
00020760 		moveb %d0,%d7
00020762 		moveq #9,%d1
00020764 		cmpl %d7,%d1
00020766 		bcss 0002078a <getCadTeclado+0x7e>
			if (i == 0 && w == '0') {									//		Si para la primera cifra intentamos poner un 0
00020768 		moveb %d2,%d3
0002076a 		extbl %d3
0002076c 		tstl %d4
0002076e 		bnes 0002077e <getCadTeclado+0x72>
00020770 		moveq #48,%d0
00020772 		cmpl %d3,%d0
00020774 		bnes 0002077e <getCadTeclado+0x72>
				i--;											//			Se ignora la tecla pulsada
00020776 		lea %a3@(-1),%a2
0002077a 		moveq #-1,%d4
			} else {											//		Si para la primera cifra no intentamos poner un 0
0002077c 		bras 0002079e <getCadTeclado+0x92>
				cifras++;										//			Aumenta el número de cifras del número
0002077e 		addql #1,%d5
				cadena[i] = w;										// 			Almacena el caracter leído en el array cadena
00020780 		moveb %d2,%a2@
00020782 		moveb %d2,%d1
00020784 		moveq #19,%d0
00020786 		trap #15
				outch(cadena[i]);									// 			Imprime en el terminal el caracter leído
			}
		} else if (w != 'D' && w != 'E') {									//	Si la tecla pulsada no es un número ni la tecla de borrar o de enter 
00020788 		bras 0002079e <getCadTeclado+0x92>
0002078a 		moveq #-68,%d0
0002078c 		addl %d2,%d0
0002078e 		moveb %d0,%d6
00020790 		moveb %d2,%d3
00020792 		extbl %d3
00020794 		moveq #1,%d1
00020796 		cmpl %d6,%d1
00020798 		bccs 0002079e <getCadTeclado+0x92>
			i--;												//		Se ignora la tecla pulsada
0002079a 		subql #1,%a2
0002079c 		subql #1,%d4
		}
		if (w == 'D') { 											//	Si la tecla pulsada es la de borrar
0002079e 		moveq #68,%d0
000207a0 		cmpl %d3,%d0
000207a2 		bnes 000207bc <getCadTeclado+0xb0>
			if (i >	0) {											//		Si no estamos en la primera posición del array
000207a4 		tstl %d4
000207a6 		bles 000207b8 <getCadTeclado+0xac>
				cifras--;										//			Disminuye el número de cifras del número
000207a8 		subql #1,%d5
000207aa 		moveq #8,%d2
000207ac 		moveb %d2,%d1
000207ae 		moveq #19,%d0
000207b0 		trap #15
				outch('\b');										//			Se borra el último número imprimido en el terminal
				i -= 2;											//			Retrocede una posición en el array
000207b2 		subql #2,%a2
000207b4 		subql #2,%d4
			} else {											// 		Si estamos en la primera posición
000207b6 		bras 000207bc <getCadTeclado+0xb0>
				i--;											//			Se ignora la tecla pulsada
000207b8 		subql #1,%a2
000207ba 		subql #1,%d4
			}
		}
	} while ((w != 'E') && (++i < 4));										// Mientras no se pulse la tecla de enter y el número tenga 4 cifras o menos
000207bc 		moveq #69,%d1
000207be 		cmpl %d3,%d1
000207c0 		bnes 0002074e <getCadTeclado+0x42>
000207c2 		movel %d4,%d3
000207c4 		addql #1,%d3
000207c6 		tstl %a4
000207c8 		beqs 000207dc <getCadTeclado+0xd0>
000207ca 		tstb %a4@
000207cc 		beqs 000207dc <getCadTeclado+0xd0>
000207ce 		moveal %a4,%a0
000207d0 		moveb %a0@+,%d2
000207d2 		moveb %d2,%d1
000207d4 		moveq #19,%d0
000207d6 		trap #15
000207d8 		tstb %a0@
000207da 		bnes 000207d0 <getCadTeclado+0xc4>

	output("\r\n");													// Se guardan e imprimen los caracteres de:
	cadena[i++] = '\r';												// - Retorno de carro
000207dc 		moveq #13,%d0
000207de 		moveb %d0,%a3@(00000000,%d4:l)
000207e2 		movel %d3,%d4
	cadena[i++] = '\n';												// - Cambio de línea
000207e4 		moveq #10,%d1
000207e6 		moveb %d1,%a3@(00000000,%d4:l)
	cadena[i]   = '\0';												// - Fin de cadena
000207ea 		clrb %d0
000207ec 		moveb %d0,%a3@(00000001,%d4:l)
	
	if (cifras == 4) {												// Devuelve el número si tiene 4 cifras
000207f0 		moveq #4,%d1
000207f2 		cmpl %d5,%d1
000207f4 		bnes 00020848 <getCadTeclado+0x13c>
		num = 1000*(cadena[0] - 48) + 100*(cadena[1] - 48) + 10*(cadena[2] - 48) + (cadena[3] - 48);
000207f6 		moveb %a3@,%d0
000207f8 		extbl %d0
000207fa 		moveal %d0,%a1
000207fc 		lea %a1@(-48),%a0
00020800 		movel %a0,%d1
00020802 		lsll #5,%d1
00020804 		subl %a0,%d1
00020806 		lea %a0@(00000000,%d1:l:4),%a0
0002080a 		movel %a0,%d1
0002080c 		lsll #3,%d1
0002080e 		moveb %a3@(1),%d0
00020812 		extbl %d0
00020814 		moveal %d0,%a2
00020816 		lea %a2@(-48),%a1
0002081a 		lea %a1@(00000000,%a1:l:2),%a0
0002081e 		movel %a0,%d0
00020820 		lsll #5,%d0
00020822 		addal %d0,%a0
00020824 		addal %a1,%a0
00020826 		lea %a0@(00000000,%d1:l),%a0
0002082a 		moveb %a3@(2),%d1
0002082e 		extbl %d1
00020830 		moveq #-48,%d0
00020832 		addl %d0,%d1
00020834 		movel %d1,%d0
00020836 		lsll #3,%d0
00020838 		moveal %d0,%a2
0002083a 		lea %a2@(00000000,%d1:l:2),%a1
0002083e 		lea %a1@(ffffffd0,%a0:l),%a0
00020842 		moveb %a3@(3),%d0
		return num;
00020846 		bras 0002089e <getCadTeclado+0x192>
	}
	else if (cifras == 3) {												// Devuelve el número si tiene 3 cifras
00020848 		moveq #3,%d0
0002084a 		cmpl %d5,%d0
0002084c 		bnes 00020882 <getCadTeclado+0x176>
		num = 100*(cadena[0] - 48) + 10*(cadena[1] - 48) + (cadena[2] - 48);
0002084e 		moveb %a3@,%d0
00020850 		extbl %d0
00020852 		moveal %d0,%a0
00020854 		lea %a0@(-48),%a1
00020858 		lea %a1@(00000000,%a1:l:2),%a0
0002085c 		movel %a0,%d0
0002085e 		lsll #5,%d0
00020860 		addal %d0,%a0
00020862 		addal %a1,%a0
00020864 		moveb %a3@(1),%d1
00020868 		extbl %d1
0002086a 		moveq #-48,%d0
0002086c 		addl %d0,%d1
0002086e 		movel %d1,%d0
00020870 		lsll #3,%d0
00020872 		moveal %d0,%a2
00020874 		lea %a2@(00000000,%d1:l:2),%a1
00020878 		lea %a1@(ffffffd0,%a0:l),%a0
0002087c 		moveb %a3@(2),%d0
		return num;
00020880 		bras 0002089e <getCadTeclado+0x192>
	}
	else if (cifras == 2) {												// Devuelve el número si tiene 2 cifras
00020882 		moveq #2,%d0
00020884 		cmpl %d5,%d0
00020886 		bnes 000208a4 <getCadTeclado+0x198>
		num = 10*(cadena[0] - 48) + (cadena[1] - 48);
00020888 		moveb %a3@,%d1
0002088a 		extbl %d1
0002088c 		moveq #-48,%d0
0002088e 		addl %d0,%d1
00020890 		movel %d1,%d0
00020892 		lsll #3,%d0
00020894 		moveal %d0,%a1
00020896 		lea %a1@(ffffffd0,%d1:l:2),%a0
0002089a 		moveb %a3@(1),%d0
0002089e 		extbl %d0
		return num;
000208a0 		addl %a0,%d0
000208a2 		bras 000208b2 <getCadTeclado+0x1a6>
	}
	else if (cifras == 1) {												// Devuelve el número si tiene 1 cifra
000208a4 		moveq #1,%d0
000208a6 		cmpl %d5,%d0
000208a8 		bnes 000208b2 <getCadTeclado+0x1a6>
		num = (cadena[0] - 48);
000208aa 		moveb %a3@,%d0
000208ac 		extbl %d0
		return num;
000208ae 		moveq #-48,%d1
000208b0 		addl %d1,%d0
	}
	else if (cifras == 0) {												// Devuelve un 1 si no introducimos nada
		return 1;
	}
	return 1;
}000208b2 		moveml %fp@(-40),%d2-%d7/%a2-%a5
000208b8 		unlk %fp
000208ba 		rts
//
// Descripción:
//   Función de atención a la interrupción para TIMER0
//------------------------------------------------------
void rutina_tout0(void) {
000208bc <rutina_tout0>	linkw %fp,#-16
000208c0 		lea %sp@(-40),%sp
000208c4 		moveml %d2-%d7/%a2-%a5,%sp@
000208c8 		moveal #268435616,%a0
000208ce 		movew #-32752,%a0@
000208d2 		moveal #268435632,%a1
000208d8 		clrw %a1@
000208da 		lea %a0@(20),%a0
000208de 		movew #-26729,%a0@
000208e2 		clrw %a0@
000208e4 		clrw %a0@
000208e6 		movew #32,%a1@
000208ea 		movew #-29184,%a0@
000208ee 		movew #-29184,%a0@
000208f2 		movew #3584,%a0@
000208f6 		lea %a0@(-12),%a0
000208fa 		movew #4608,%a0@
000208fe 		subql #4,%a0
00020900 		movew %a0@,%d0
00020902 		oril #32768,%d0
00020908 		movew %d0,%a0@
0002090a 		addql #8,%a0
0002090c 		movew %a0@,%d0
0002090e 		moveq #1,%d1
00020910 		andl %d1,%d0
00020912 		tstw %d0
00020914 		beqs 0002090c <rutina_tout0+0x50>
00020916 		moveal #268435628,%a0
0002091c 		movew %a0@,%d0
0002091e 		orl %d1,%d0
00020920 		movew %d0,%a0@
00020922 		addql #4,%a0
00020924 		movew #16,%a0@
00020928 		addql #4,%a0
0002092a 		movew %a0@,%d0
0002092c 		movew %a0@,%d0
0002092e 		andil #65535,%d0
00020934 		movew %a0@,%d1
00020936 		clrl %d5
00020938 		movew %d1,%d5
0002093a 		asrl #3,%d5
0002093c 		lsll #5,%d0
0002093e 		addl %d0,%d5
00020940 		btst #11,%d5
00020944 		beqs 0002094e <rutina_tout0+0x92>
00020946 		oril #-4096,%d5
0002094c 		bras 00020954 <rutina_tout0+0x98>
0002094e 		andil #4095,%d5
	static int sumaSeno[MAX_FRECS];											// Almacena todos los valores (el sumatorio) de la parte imaginaria de la DFT
	static int sumaCoseno[MAX_FRECS];										// Almacena todos los valores (el sumatorio) de la parte real de la DFT
	int dato = ADC_dato();												// Número obtenido tras interpretar el número leído a la entrada (int ADC_leeRxRAM() de m5272adc_dac.c)
	mbar_writeShort(MCFSIM_TER0,BORRA_REF); 									// Reset del bit de fin de cuenta
00020954 		moveal #268435984,%a0
0002095a 		movew #2,%a0@

	/*	Se incrementa contadorDFT para llevar la cuenta dexm cuantas interrupciones van.
		Recorremos con i las 20 frecuencias. Si estamos en la primera interrupción, ponemos cada componente de los arrays sumaSeno[] y sumaCoseno[] a 0.
		Después se rellena cada posición de dichos arrays (cada posición representa una frecuencia distinta) con el dato multiplpicado por un valor de
		sinusoide10HZ[]. Para el seno este valor es resto de dividir entre el numero de muestras (400) el valor del paso correspondiente a cada frecuencia
		(pasos[i]) multiplicado por contadorDFT. Para el coseno es similar, hay que sumar al producto pasos[i] * contadorDFT el desfase necesario para
		convertir el seno en un coseno. Sabemos que cos(x) = sen(x + pi/2). Este desfase se traduce como un desfase de la cuarta parte de
		NUM_MUESTRAS_PERIODO_10HZ, que son 100 muestras.
		Después, si hemos hecho todas las interrupciones necesarias (contadorDFT == n_dft), contadorDFT se reinicia a 0, realizamos el desescalado de
		los arrays del seno y del coseno, y en el array S_out[] guardamos para cada frecuencia el resultado que devuelva la función busquedaBinaria
		de sumaCoseno[k]^2 + sumaSeno[k]^2, es decir, el módulo de la DFT. El objetivo de busquedaBinaria es escalar dicho módulo.
	*/
	contadorDFT++;																	// Incrementamos contadorDFT
0002095e 		movel 00030118 <contadorDFT>,%d0
00020964 		movel %d0,%d2
00020966 		addql #1,%d2
00020968 		movel %d2,00030118 <contadorDFT>
	if (contadorDFT == 1) {																// Si contadorDFT es 1
0002096e 		tstl %d0
00020970 		bnes 0002099a <rutina_tout0+0xde>
}

//------------------------------------------------------------------------------
// INLINE LONG _strlen(char *st)
//
// Descripción: Calcula la longitud de una cadena de char terminada en 0
// Entrada:     char *st, puntero a la cadena de texto que medir (acabada en 0)
// Salida:      void
// Devuelve:    LONG, número de caracteres de la cadena (sin contar el 0 final)
//------------------------------------------------------------------------------
INLINE LONG _strlen(char *st)
{
  LONG len = 0;
  char *pt = st;
  while (*pt++) len++;
  return len;
}

//------------------------------------------------------------------------------
// INLINE LONG memcpy(char *st)
//
// Descripción: Inicializa una zona de memoria con un valor determinado
// Entrada:     char *dest, char *src fuente de la información, size_t tamaño a copiar
// Salida:      void 
// Devuelve:    void puntero a la zona de memoria
//------------------------------------------------------------------------------
INLINE void *memcpy(void *dst0, const void *src0, size_t n)
{
  char* dst = (char*) dst0;
  const char* src = (const char*) src0;
  while (n--) *dst++ = *src++;
  return dst0;
}

//------------------------------------------------------------------------------
// INLINE LONG memset(char *st)
//
// Descripción: Sets the first num bytes pointed by buffer to the value specified by c parameter.
// Entrada:     char *buffer, int c, size_t número de bytes
// Salida:      void 
// Devuelve:    void puntero a la zona de memoria
//------------------------------------------------------------------------------
INLINE void *memset(void *dst0, int c, size_t n)
{
00020972 		clrl %d1
  char* dst = (char*) dst0;
00020974 		lea 00030858 <__bss_start>,%a0
  while (n--) *dst++ = c;
0002097a 		moveq #29,%d0
0002097c 		moveb %d1,%a0@+
0002097e 		subql #1,%d0
00020980 		moveq #-1,%d3
00020982 		cmpl %d0,%d3
00020984 		bnes 0002097c <rutina_tout0+0xc0>
00020986 		clrl %d1
00020988 		lea 000308d0 <sumaCoseno.119>,%a0
0002098e 		moveq #29,%d0
00020990 		moveb %d1,%a0@+
00020992 		subql #1,%d0
00020994 		moveq #-1,%d7
00020996 		cmpl %d0,%d7
00020998 		bnes 00020990 <rutina_tout0+0xd4>
	 	memset(sumaSeno, 0, MAX_FRECS);														//	Todas las posiciones de sumaSeno[i] se ponen a 0
	 	memset(sumaCoseno, 0, MAX_FRECS);													//	Todas las posiciones de sumaCoseno[i] se ponen a 0
	}
	for (i = 0; i < n_frecs; i++) {															// Para cada frecuencia
0002099a 		clrl 000309e6 <i>
000209a0 		moveal 00030128 <n_frecs>,%a1
000209a6 		tstl %a1
000209a8 		beqs 00020a1a <rutina_tout0+0x15e>
000209aa 		lea 00030858 <__bss_start>,%a4
000209b0 		lea 0003014c <pasos>,%a5
000209b6 		movel 00030118 <contadorDFT>,%d6
000209bc 		subql #1,%d6
000209be 		lea 000301c4 <sinusoide10Hz>,%a3
000209c4 		lea 000308d0 <sumaCoseno.119>,%a2
000209ca 		subal %a0,%a0
		sumaSeno[i] += (dato * (sinusoide10Hz[(pasos[i] * (contadorDFT - 1))%NUM_MUESTRAS_PERIODO_10HZ]));					//	Rellenamos sumaSeno[i] con los valores correspondientes a cada frecuencia 
000209cc 		movel %a0,%d4
000209ce 		movel %a0,%d2
000209d0 		lsll #2,%d2
000209d2 		movel %d6,%d1
000209d4 		movel %a5@(00000000,%d2:l),%d0
000209d8 		mulsl %d0,%d1
000209dc 		movel %d1,%d0
000209de 		movel #400,%d7
000209e4 		divull %d7,%d3,%d0
000209e8 		movel %d5,%d0
000209ea 		movel %a3@(00000000,%d3:l:4),%d3
000209ee 		mulsl %d3,%d0
000209f2 		addl %d0,%a4@(00000000,%d2:l)
		sumaCoseno[i] += (dato * (sinusoide10Hz[((pasos[i] * (contadorDFT - 1)) + NUM_MUESTRAS_PERIODO_10HZ/4)%NUM_MUESTRAS_PERIODO_10HZ]));	//	Rellenamos sumaCoseno[i] con los valores correspondientes a cada frecuencia 
000209f6 		moveq #100,%d0
000209f8 		addl %d0,%d1
000209fa 		divull %d7,%d3,%d1
000209fe 		movel %d5,%d0
00020a00 		movel %a3@(00000000,%d3:l:4),%d3
00020a04 		mulsl %d3,%d0
00020a08 		addl %d0,%a2@(00000000,%d2:l)
00020a0c 		addql #1,%a0
00020a0e 		addql #1,%d4
00020a10 		cmpal %d4,%a1
00020a12 		bhis 000209cc <rutina_tout0+0x110>
00020a14 		movel %a0,000309e6 <i>
	}
	if (contadorDFT == n_dft) {															// Si hemos hecho todas las interrupciones necesarias
00020a1a 		movel 00030124 <n_dft>,%d1
00020a20 		cmpl 00030118 <contadorDFT>,%d1
00020a26 		bnew 00020b54 <rutina_tout0+0x298>
		contadorDFT = 0;															//	Reiniciamos contadorDFT
00020a2a 		clrl 00030118 <contadorDFT>
		for (j = 0; j < n_frecs; j++) {														//	Para cada frecuencia
00020a30 		clrl 00030950 <j>
00020a36 		movel 00030128 <n_frecs>,%d0
00020a3c 		beqw 00020b54 <rutina_tout0+0x298>
00020a40 		movel #198744,%d6
00020a46 		lea 000308d0 <sumaCoseno.119>,%a5
00020a4c 		subal %a1,%a1
00020a4e 		movel 00030002 <umbrales.103>,%d2
00020a54 		movel %d2,%fp@(-4)
00020a58 		movel 00030082 <adapt_DAC.104>,%d3
00020a5e 		movel %d3,%fp@(-8)
00020a62 		movel 0003007a <umbrales.103+0x78>,%d7
00020a68 		movel %d7,%fp@(-12)
00020a6c 		moveal 000300fe <adapt_DAC.104+0x7c>,%a0
00020a72 		movel %a0,%fp@(-16)
00020a76 		movel 000309de <dft_lcd>,%d5
00020a7c 		moveal 000309ee <frec_lcd>,%a2
00020a82 		movel %d0,%d7
			sumaSeno[j] >>= 10;														// 		Desescalado de 1024 (mover a la derecha 10 bits) para que no se produzcan desbordamientos
00020a84 		movel %a1,%d2
00020a86 		lsll #2,%d2
00020a88 		moveal %d6,%a0
00020a8a 		movel %a0@(00000000,%d2:l),%d1
00020a8e 		moveq #10,%d0
00020a90 		asrl %d0,%d1
00020a92 		movel %d1,%a0@(00000000,%d2:l)
			sumaCoseno[j] >>= 10;														// 		Desescalado de 1024 (mover a la derecha 10 bits) para que no se produzcan desbordamientos
00020a96 		movel %a5@(00000000,%d2:l),%d0
00020a9a 		moveq #10,%d3
00020a9c 		asrl %d3,%d0
00020a9e 		movel %d0,%a5@(00000000,%d2:l)
			S_out[j] = busquedaBinaria((sumaCoseno[j] * sumaCoseno[j]) + (sumaSeno[j] * sumaSeno[j]));					// 		Almacenamos en S_out[j] el módulo cuantificado de la DFT de cada frecuencia	
00020aa2 		mulsl %d0,%d0
00020aa6 		mulsl %d1,%d1
// Parámetros:
//   int numero
//     módulo de la DFT
//------------------------------------------------------
int busquedaBinaria(int numero) {
00020aaa 		addl %d0,%d1
	int contadorUmbrales;									// Contador que llegará hasta 5 y se reiniciará
	int izquierda = 0;									// Margen inferior de la búsqueda
00020aac 		clrl %d4
	int derecha = N_UMBRALES - 1;								// Margen superior de la búsqueda
00020aae 		moveq #31,%d3
	int centro = (izquierda + derecha)/2;							// Centro (la media de izquierda y derecha)
00020ab0 		moveq #15,%d0

	// Array con los distintos umbrales que puede alcanzar la señal 
	static int umbrales[N_UMBRALES] = {63095,84924,114304,153849,207075,278715,375140,504923,679607,914724,1231182,1657123,2230422,3002059,4040653,5438559,
					7320085,9852544,13261133,17848959,24023991,32335339,43522083,58578997,78845006,106122250,142836338,192252044,258763624,348285572,468778561,686492401};
	// Array con los valores cuantificados de la señal según su valor. umbrales[i] se escalará a adapt_DAC[i] 			
	static int adapt_DAC[N_UMBRALES] = {122,245,368,491,614,737,860,983,1105,1228,1351,1474,1597,1720,1843,1966,2088,2211,2334,2457,2580,2703,2826,2949,3072,3194,3317,3440,3563,3686,3809,3932};
   
	if (numero < umbrales[0]) return adapt_DAC[0];						// Si el número que recibe busquedaBinaria es menor que el mínimo valor de los umbrales, devuelve el valor mínimo de los valores de adapt_DAC
00020ab2 		cmpl %fp@(-4),%d1
00020ab6 		bges 00020ac4 <rutina_tout0+0x208>
00020ab8 		movel %fp@(-8),%d1
00020abc 		lea 0003095c <S_out>,%a4
00020ac2 		bras 00020b0a <rutina_tout0+0x24e>
	if (numero >	umbrales[N_UMBRALES - 2]) return adapt_DAC[N_UMBRALES - 1];		// Si el numero que recibe busquedaBinaria es mayor que el segundo máximo valor de los umbrales, devuelve el valor máximo de los valores de adapt_DAC
00020ac4 		cmpl %fp@(-12),%d1
00020ac8 		bles 00020ad6 <rutina_tout0+0x21a>
00020aca 		movel %fp@(-16),%d1
00020ace 		lea 0003095c <S_out>,%a4
00020ad4 		bras 00020b0a <rutina_tout0+0x24e>

	for (contadorUmbrales = 0; contadorUmbrales < 5; contadorUmbrales++) {			// El proceso de la búsqueda binaria dura 5 iteraciones
00020ad6 		lea 00030082 <adapt_DAC.104>,%a3
00020adc 		lea 0003095c <S_out>,%a4
00020ae2 		lea 00030002 <umbrales.103>,%a0
00020ae8 		moveq #4,%d2
		if (numero < umbrales[centro]) {						// Si el número que recibe busquedaBinaria es menor que el valor central del array umbrales[] 
00020aea 		cmpl %a0@(00000000,%d0:l:4),%d1
00020aee 		bges 00020af6 <rutina_tout0+0x23a>
			derecha = centro;							// El margen superior pasa a ser el valor previo de centro
00020af0 		movel %d0,%d3
			centro = (izquierda + derecha)/2;					// Recalculamos el nuevo valor de centro para el valor actualizado de derecha
00020af2 		movel %d4,%d0
		} else {									// Si el número que recibe busquedaBinaria es mayor que el valor central del array umbrales[]
00020af4 		bras 00020af8 <rutina_tout0+0x23c>
			izquierda = centro;							// El margen inferior pasa a ser el valor previo de centro
00020af6 		movel %d0,%d4
			centro = (izquierda + derecha)/2;					// Recalculamos el nuevo valor de centro para el valor actualizado de izquierda
00020af8 		addl %d3,%d0
00020afa 		movel %d0,%d0
00020afc 		bpls 00020b00 <rutina_tout0+0x244>
00020afe 		addql #1,%d0
00020b00 		asrl #1,%d0
00020b02 		subql #1,%d2
00020b04 		bpls 00020aea <rutina_tout0+0x22e>
		}		
	}
	contadorUmbrales = 0;									// Reseteamos contadorUmbrales
	return adapt_DAC[centro];								// Devolvemos el valor encontrado en el array de valores escalados para el valor que recibe la función busquedaBinaria
00020b06 		movel %a3@(00000000,%d0:l:4),%d1
00020b0a 		movel %a1,%d0
00020b0c 		lsll #2,%d0
00020b0e 		movel %d1,%a4@(00000000,%d0:l)
			if (j == 0) {
00020b12 		tstl %a1
00020b14 		bnes 00020b1c <rutina_tout0+0x260>
				dft_lcd = S_out[0];
00020b16 		movel %a4@,%d5
				frec_lcd = 0;
00020b18 		subal %a2,%a2
			}
			if (j >	0 && S_out[j] > dft_lcd) {
00020b1a 		bras 00020b36 <rutina_tout0+0x27a>
00020b1c 		cmpl %d1,%d5
00020b1e 		bccs 00020b36 <rutina_tout0+0x27a>
				dft_lcd = S_out[j];
00020b20 		movel %d1,%d5
				frec_lcd = 10 * pasos[j];
00020b22 		lea 0003014c <pasos>,%a0
00020b28 		movel %a0@(00000000,%d0:l),%d1
00020b2c 		movel %d1,%d0
00020b2e 		lsll #3,%d0
00020b30 		moveal %d0,%a0
00020b32 		lea %a0@(00000000,%d1:l:2),%a2
00020b36 		movel %a1,%d0
00020b38 		addql #1,%a1
00020b3a 		addql #1,%d0
00020b3c 		cmpl %d0,%d7
00020b3e 		bhiw 00020a84 <rutina_tout0+0x1c8>
00020b42 		movel %a2,000309ee <frec_lcd>
00020b48 		movel %d5,000309de <dft_lcd>
00020b4e 		movel %a1,00030950 <j>
			}
		}
	}
	
	/*	Cada vez que contadorS_out sea igual a t_comp (8) reseteamos contadorS_out a 0, y si hemos sacado la última frecuencia (f=20), procedemos a volver
		a empezar, sacando la primera (f=1). Y cuando contadorS_our sea 0, sacamos por el DAC S_out[f], el cual se visualizará en el osciloscopio.
	*/
	if (contadorS_out == t_comp) {											// Si han transcurrido t_comp segundos
00020b54 		movel 00030138 <t_comp>,%d0
00020b5a 		cmpl 0003011c <contadorS_out>,%d0
00020b60 		bnes 00020b7c <rutina_tout0+0x2c0>
		contadorS_out = 0;											// 	Reseteamos contadorS_out
00020b62 		clrl 0003011c <contadorS_out>
		if (f == n_frecs) {											// 	Si hemos contado todas las frecuencias
00020b68 		movel 00030128 <n_frecs>,%d1
00020b6e 		cmpl 00030114 <f>,%d1
00020b74 		bnes 00020b7c <rutina_tout0+0x2c0>
			f = 0;												// 		Reset de f (índice de la componente de frecuencia a visualizar)
00020b76 		clrl 00030114 <f>
		}
	}
	if (contadorS_out == 0) {											// Si contadorS_out es 0
00020b7c 		tstl 0003011c <contadorS_out>
00020b82 		bnew 00020c06 <rutina_tout0+0x34a>
		DAC_dato(S_out[f]);											// 	Sacamos S_out[f] por el DAC 
00020b86 		movel 00030114 <f>,%d0
00020b8c 		lea 0003095c <S_out>,%a0
00020b92 		movel %a0@(00000000,%d0:l:4),%d1
00020b96 		tstb 00030000 <primeraVez.45>
00020b9c 		bnes 00020bb0 <rutina_tout0+0x2f4>
00020b9e 		moveal #268435628,%a0
00020ba4 		movew %a0@,%d0
00020ba6 		moveq #1,%d2
00020ba8 		andl %d2,%d0
00020baa 		tstw %d0
00020bac 		beqs 00020ba4 <rutina_tout0+0x2e8>
00020bae 		bras 00020bb8 <rutina_tout0+0x2fc>
00020bb0 		clrb %d3
00020bb2 		moveb %d3,00030000 <primeraVez.45>
00020bb8 		moveal #268435628,%a0
00020bbe 		movew %a0@,%d0
00020bc0 		moveq #1,%d7
00020bc2 		orl %d7,%d0
00020bc4 		movew %d0,%a0@
00020bc6 		lea %a0@(-12),%a0
00020bca 		movew #-32765,%a0@
00020bce 		andil #4095,%d1
00020bd4 		moveal #268435632,%a1
00020bda 		clrw %a1@
00020bdc 		lea %a0@(20),%a0
00020be0 		addl %d1,%d1
00020be2 		movew %d1,%a0@
00020be4 		movew #32,%a1@
00020be8 		movew #19712,%a0@
00020bec 		lea %a0@(-12),%a0
00020bf0 		movew #4096,%a0@
00020bf4 		subql #4,%a0
00020bf6 		movew %a0@,%d0
00020bf8 		oril #32768,%d0
00020bfe 		movew %d0,%a0@
		f++;													// 	Incrementamos f
00020c00 		addl %d7,00030114 <f>
	}
	contadorS_out++;												// Incrementamos contadorS_out++;
00020c06 		moveq #1,%d0
00020c08 		addl %d0,0003011c <contadorS_out>

	/*	Usamos set16_S para sacar un 1 cada t_barrido y así resetear la rampa 
		Cuando contadorReset sea 0, sacamos un 0 por una de las salidas digitales del ENT2004CF, y cuando contadorReset sea 160, sacamos un 1 por esa salida
		digital, y reseteamos contadorReset
	*/
	if (contadorReset == 0) {											// Si contadorReset es 0
00020c0e 		movel 00030120 <contadorReset>,%d1
00020c14 		bnes 00020c34 <rutina_tout0+0x378>
		salida = salida & 0xFFFE;
00020c16 		movew 00030112 <salida>,%d0
00020c1c 		andil #65534,%d0
00020c22 		movew %d0,00030112 <salida>
00020c28 		movew %d0,000309d8 <puertoS>
00020c2e 		movew %d0,40000000 <_end+0x3ffcf5f0>
		set16_puertoS(salida);											// 	Sacamos un 0 por la salida digital
	}
	contadorReset++;												// Incrementamos contadorReset
00020c34 		movel %d1,%d2
00020c36 		addql #1,%d2
00020c38 		movel %d2,00030120 <contadorReset>
	if (contadorReset == t_barrido) {										// Si ha pasado un tiempo t_barrido
00020c3e 		movel %d1,%d0
00020c40 		addql #1,%d0
00020c42 		cmpl 0003012c <t_barrido>,%d0
00020c48 		bnes 00020c6c <rutina_tout0+0x3b0>
	        salida = salida | 0x0001;
00020c4a 		movew 00030112 <salida>,%d0
00020c50 		moveq #1,%d3
00020c52 		orl %d3,%d0
00020c54 		movew %d0,00030112 <salida>
00020c5a 		movew %d0,000309d8 <puertoS>
00020c60 		movew %d0,40000000 <_end+0x3ffcf5f0>
		set16_puertoS(salida);											// 	Sacamos un 1 por la salida digital
		contadorReset = 0;											// 	Reseteamos contadorReset
00020c66 		clrl 00030120 <contadorReset>
	}

//	if (mbar_readShort(MCFSIM_TER0) & BORRA_REF) {
//		static int flag = 0;
//		if (!flag) {
//			flag = 1;
//			output("MAL\n");
//		}
//	} 
}
00020c6c 		moveml %sp@,%d2-%d7/%a2-%a5
00020c70 		lea %sp@(40),%sp
00020c74 		unlk %fp
00020c76 		rts

//------------------------------------------------------
// void rutina_int1(void)
//
// Descripción:
//   Función de atención a la interrupción para la
//   interrupción externa.
//------------------------------------------------------
void rutina_int1(void) {
00020c78 <rutina_int1>	linkw %fp,#0
00020c7c 		lea %sp@(-20),%sp
00020c80 		moveml %d2-%d4/%a2-%a3,%sp@
	if (scroll >	0) {
00020c84 		tstl 00030148 <scroll>
00020c8a 		beqs 00020ca4 <rutina_int1+0x2c>
		frecuencia_a = frecuencia_;
00020c8c 		movel 000309e2 <frecuencia_>,%d0
00020c92 		movel %d0,000309fc <frecuencia_a>
		dft_a = dft_;
00020c98 		movel 000309f8 <dft_>,%d1
00020c9e 		movel %d1,00030954 <dft_a>
00020ca4 		lea 00024282 <_etext+0x40>,%a0
00020caa 		lea %pc@(000205e0 <LCD_reset>),%a1
00020cae 		lea %pc@(000204dc <LCD_init>),%a2
00020cb2 		lea 000309f4 <array>,%a3
00020cb8 		tstl %a0
00020cba 		beqs 00020ccc <rutina_int1+0x54>
00020cbc 		tstb %a0@
00020cbe 		beqs 00020ccc <rutina_int1+0x54>
00020cc0 		moveb %a0@+,%d2
00020cc2 		moveb %d2,%d1
00020cc4 		moveq #19,%d0
00020cc6 		trap #15
00020cc8 		tstb %a0@
00020cca 		bnes 00020cc0 <rutina_int1+0x48>
	}

	output("He detectado un flanco de subida\r\n");									// Imprime el mensaje de la interrupción
	LCD_reset();
00020ccc 		jsr %a1@
	LCD_init();
00020cce 		jsr %a2@
	LCD_inst(CLR_DISP);												// Limpiamos display
00020cd0 		movew #256,%d1
00020cd4 		movel #384,%d0
00020cda 		movew %d0,000309d8 <puertoS>
00020ce0 		movew %d0,40000000 <_end+0x3ffcf5f0>
00020ce6 		movel #8248,%d0
00020cec 		subql #1,%d0
00020cee 		moveq #-1,%d2
00020cf0 		cmpl %d0,%d2
00020cf2 		bnes 00020cec <rutina_int1+0x74>
00020cf4 		movew %d1,000309d8 <puertoS>
00020cfa 		movew %d1,40000000 <_end+0x3ffcf5f0>
00020d00 		movel #8248,%d0
00020d06 		subql #1,%d0
00020d08 		moveq #-1,%d4
00020d0a 		cmpl %d0,%d4
00020d0c 		bnes 00020d06 <rutina_int1+0x8e>
	LCD_inst(LIN_1LCD);												// Movemos el cursor a la 1ª línea
00020d0e 		movew #-32768,%d1
00020d12 		movel #32896,%d0
00020d18 		movew %d0,000309d8 <puertoS>
00020d1e 		movew %d0,40000000 <_end+0x3ffcf5f0>
00020d24 		movel #8248,%d0
00020d2a 		subql #1,%d0
00020d2c 		moveq #-1,%d2
00020d2e 		cmpl %d0,%d2
00020d30 		bnes 00020d2a <rutina_int1+0xb2>
00020d32 		movew %d1,000309d8 <puertoS>
00020d38 		movew %d1,40000000 <_end+0x3ffcf5f0>
00020d3e 		movel #8248,%d0
00020d44 		subql #1,%d0
00020d46 		moveq #-1,%d4
00020d48 		cmpl %d0,%d4
00020d4a 		bnes 00020d44 <rutina_int1+0xcc>
	frecuencia = "f[Hz]=";
00020d4c 		movel #148133,%d0
00020d52 		movel %d0,0003094c <frecuencia>
	dft = "|H(jf)|=";
00020d58 		movel #148140,%d1
00020d5e 		movel %d1,00030958 <dft>
	
	frecuencia_ = numeroarray(frec_lcd);
00020d64 		movel 000309ee <frec_lcd>,%d3
// Parámetros:
//   int num
//------------------------------------------------------
char * numeroarray(int num) {
	if (num >	1000) {
00020d6a 		cmpil #1000,%d3
00020d70 		bles 00020d7c <rutina_int1+0x104>
		tam = 4;
00020d72 		moveq #4,%d2
00020d74 		movel %d2,00030a00 <tam>
	} else if (num >	100) {
00020d7a 		bras 00020dce <rutina_int1+0x156>
00020d7c 		moveq #100,%d4
00020d7e 		cmpl %d3,%d4
00020d80 		bges 00020d94 <rutina_int1+0x11c>
		tam = 3;
00020d82 		moveq #3,%d0
00020d84 		movel %d0,00030a00 <tam>
		array[3] = ' '; 
00020d8a 		moveq #32,%d1
00020d8c 		moveb %d1,000309f7 <array+0x3>
	} else if (num >	10) {
00020d92 		bras 00020dce <rutina_int1+0x156>
00020d94 		moveq #10,%d2
00020d96 		cmpl %d3,%d2
00020d98 		bges 00020db2 <rutina_int1+0x13a>
		tam = 2;
00020d9a 		moveq #2,%d4
00020d9c 		movel %d4,00030a00 <tam>
		array[2] = ' ';
00020da2 		moveq #32,%d0
00020da4 		moveb %d0,000309f6 <array+0x2>
		array[3] = ' ';
00020daa 		moveb %d0,000309f7 <array+0x3>
	} else {
00020db0 		bras 00020dce <rutina_int1+0x156>
		tam = 1;
00020db2 		moveq #1,%d1
00020db4 		movel %d1,00030a00 <tam>
		array[1] = ' ';
00020dba 		moveq #32,%d2
00020dbc 		moveb %d2,000309f5 <array+0x1>
		array[2] = ' ';
00020dc2 		moveb %d2,000309f6 <array+0x2>
		array[3] = ' ';
00020dc8 		moveb %d2,000309f7 <array+0x3>
	}
	p = tam - 1;
00020dce 		movel 00030a00 <tam>,%d4
00020dd4 		subql #1,%d4
00020dd6 		movel %d4,00030948 <p>
	do {
		array[p] = num%10 + 48;
00020ddc 		movel 00030948 <p>,%d0
00020de2 		movel %d3,%d2
00020de4 		moveq #10,%d4
00020de6 		divsll %d4,%d1,%d2
00020dea 		moveq #48,%d2
00020dec 		addl %d2,%d1
00020dee 		moveb %d1,%a3@(00000000,%d0:l)
		num = num * 0.1;
00020df2 		movel %d3,%sp@-
00020df4 		jsr 00024028 <__floatsidf>
00020dfa 		addql #4,%sp
00020dfc 		movel #-1717986918,%sp@-
00020e02 		movel #1069128089,%sp@-
00020e08 		movel %d1,%sp@-
00020e0a 		movel %d0,%sp@-
00020e0c 		jsr 000230c8 <__muldf3>
00020e12 		lea %sp@(16),%sp
00020e16 		movel %d1,%sp@-
00020e18 		movel %d0,%sp@-
00020e1a 		jsr 000241a2 <__fixdfsi>
00020e20 		addql #8,%sp
00020e22 		movel %d0,%d3
		p--;
00020e24 		moveq #-1,%d4
00020e26 		addl %d4,00030948 <p>
	} while (num !=0);
00020e2c 		tstl %d3
00020e2e 		bnes 00020ddc <rutina_int1+0x164>
00020e30 		movel %a3,000309e2 <frecuencia_>
	while(*frecuencia) {												// Imprime el mensaje frecuencia en el display
00020e36 		moveal 0003094c <frecuencia>,%a0
00020e3c 		tstb %a0@
00020e3e 		beqs 00020eae <rutina_int1+0x236>
		LCD_dato(*frecuencia++); 										// carácter a carácter
00020e40 		moveal 0003094c <frecuencia>,%a0
00020e46 		moveb %a0@,%d1
00020e48 		extw %d1
00020e4a 		moveq #1,%d0
00020e4c 		addl %d0,0003094c <frecuencia>
00020e52 		movel %d1,%d0
00020e54 		lsll #8,%d0
00020e56 		movew %d0,%d1
00020e58 		oril #192,%d0
00020e5e 		movew %d0,000309d8 <puertoS>
00020e64 		movew %d0,40000000 <_end+0x3ffcf5f0>
00020e6a 		movel #8248,%d0
00020e70 		subql #1,%d0
00020e72 		moveq #-1,%d2
00020e74 		cmpl %d0,%d2
00020e76 		bnes 00020e70 <rutina_int1+0x1f8>
00020e78 		moveq #64,%d0
00020e7a 		orl %d1,%d0
00020e7c 		movew %d0,000309d8 <puertoS>
00020e82 		movew %d0,40000000 <_end+0x3ffcf5f0>
00020e88 		movel #8248,%d0
00020e8e 		subql #1,%d0
00020e90 		moveq #-1,%d4
00020e92 		cmpl %d0,%d4
00020e94 		bnes 00020e8e <rutina_int1+0x216>
00020e96 		movel #137498,%d0
00020e9c 		moveal 0003094c <frecuencia>,%a0
00020ea2 		subql #1,%d0
00020ea4 		moveq #-1,%d1
00020ea6 		cmpl %d0,%d1
00020ea8 		bnes 00020ea2 <rutina_int1+0x22a>
		retardo(RET_50MS);											// Mantenemos el mensaje 1 segundo
	}
00020eaa 		tstb %a0@
00020eac 		bnes 00020e40 <rutina_int1+0x1c8>
	while(*frecuencia_) {												// Imprime la frecuencia en el display
00020eae 		movel 000309e2 <frecuencia_>,%d0
00020eb4 		moveal %d0,%a0
00020eb6 		tstb %a0@
00020eb8 		beqs 00020f22 <rutina_int1+0x2aa>
		LCD_dato(*frecuencia_++); 										// carácter a carácter
00020eba 		moveb %a0@,%d1
00020ebc 		extw %d1
00020ebe 		moveq #1,%d2
00020ec0 		addl %d2,000309e2 <frecuencia_>
00020ec6 		movel %d1,%d0
00020ec8 		lsll #8,%d0
00020eca 		movew %d0,%d1
00020ecc 		oril #192,%d0
00020ed2 		movew %d0,000309d8 <puertoS>
00020ed8 		movew %d0,40000000 <_end+0x3ffcf5f0>
00020ede 		movel #8248,%d0
00020ee4 		subql #1,%d0
00020ee6 		moveq #-1,%d4
00020ee8 		cmpl %d0,%d4
00020eea 		bnes 00020ee4 <rutina_int1+0x26c>
00020eec 		moveq #64,%d0
00020eee 		orl %d1,%d0
00020ef0 		movew %d0,000309d8 <puertoS>
00020ef6 		movew %d0,40000000 <_end+0x3ffcf5f0>
00020efc 		movel #8248,%d0
00020f02 		subql #1,%d0
00020f04 		moveq #-1,%d1
00020f06 		cmpl %d0,%d1
00020f08 		bnes 00020f02 <rutina_int1+0x28a>
00020f0a 		movel #137498,%d0
00020f10 		moveal 000309e2 <frecuencia_>,%a0
00020f16 		subql #1,%d0
00020f18 		moveq #-1,%d2
00020f1a 		cmpl %d0,%d2
00020f1c 		bnes 00020f16 <rutina_int1+0x29e>
		retardo(RET_50MS);											// Mantenemos el mensaje 1 segundo
	}
00020f1e 		tstb %a0@
00020f20 		bnes 00020eba <rutina_int1+0x242>
	
	LCD_inst(LIN_2LCD);												// Movemos el cursor a la 2ª línea
00020f22 		movew #-16384,%d1
00020f26 		movel #49280,%d0
00020f2c 		movew %d0,000309d8 <puertoS>
00020f32 		movew %d0,40000000 <_end+0x3ffcf5f0>
00020f38 		movel #8248,%d0
00020f3e 		subql #1,%d0
00020f40 		moveq #-1,%d4
00020f42 		cmpl %d0,%d4
00020f44 		bnes 00020f3e <rutina_int1+0x2c6>
00020f46 		movew %d1,000309d8 <puertoS>
00020f4c 		movew %d1,40000000 <_end+0x3ffcf5f0>
00020f52 		movel #8248,%d0
00020f58 		subql #1,%d0
00020f5a 		moveq #-1,%d1
00020f5c 		cmpl %d0,%d1
00020f5e 		bnes 00020f58 <rutina_int1+0x2e0>
	dft_ = numeroarray(dft_lcd);
00020f60 		movel 000309de <dft_lcd>,%d3
00020f66 		cmpil #1000,%d3
00020f6c 		bles 00020f78 <rutina_int1+0x300>
00020f6e 		moveq #4,%d2
00020f70 		movel %d2,00030a00 <tam>
00020f76 		bras 00020fca <rutina_int1+0x352>
00020f78 		moveq #100,%d4
00020f7a 		cmpl %d3,%d4
00020f7c 		bges 00020f90 <rutina_int1+0x318>
00020f7e 		moveq #3,%d0
00020f80 		movel %d0,00030a00 <tam>
00020f86 		moveq #32,%d1
00020f88 		moveb %d1,000309f7 <array+0x3>
00020f8e 		bras 00020fca <rutina_int1+0x352>
00020f90 		moveq #10,%d2
00020f92 		cmpl %d3,%d2
00020f94 		bges 00020fae <rutina_int1+0x336>
00020f96 		moveq #2,%d4
00020f98 		movel %d4,00030a00 <tam>
00020f9e 		moveq #32,%d0
00020fa0 		moveb %d0,000309f6 <array+0x2>
00020fa6 		moveb %d0,000309f7 <array+0x3>
00020fac 		bras 00020fca <rutina_int1+0x352>
00020fae 		moveq #1,%d1
00020fb0 		movel %d1,00030a00 <tam>
00020fb6 		moveq #32,%d2
00020fb8 		moveb %d2,000309f5 <array+0x1>
00020fbe 		moveb %d2,000309f6 <array+0x2>
00020fc4 		moveb %d2,000309f7 <array+0x3>
00020fca 		movel 00030a00 <tam>,%d4
00020fd0 		subql #1,%d4
00020fd2 		movel %d4,00030948 <p>
00020fd8 		movel 00030948 <p>,%d0
00020fde 		movel %d3,%d2
00020fe0 		moveq #10,%d4
00020fe2 		divsll %d4,%d1,%d2
00020fe6 		moveq #48,%d2
00020fe8 		addl %d2,%d1
00020fea 		moveb %d1,%a3@(00000000,%d0:l)
00020fee 		movel %d3,%sp@-
00020ff0 		jsr 00024028 <__floatsidf>
00020ff6 		addql #4,%sp
00020ff8 		movel #-1717986918,%sp@-
00020ffe 		movel #1069128089,%sp@-
00021004 		movel %d1,%sp@-
00021006 		movel %d0,%sp@-
00021008 		jsr 000230c8 <__muldf3>
0002100e 		lea %sp@(16),%sp
00021012 		movel %d1,%sp@-
00021014 		movel %d0,%sp@-
00021016 		jsr 000241a2 <__fixdfsi>
0002101c 		addql #8,%sp
0002101e 		movel %d0,%d3
00021020 		moveq #-1,%d4
00021022 		addl %d4,00030948 <p>
00021028 		tstl %d3
0002102a 		bnes 00020fd8 <rutina_int1+0x360>
0002102c 		movel %a3,000309f8 <dft_>
	while(*dft) {													// Imprime el mensaje módulo de la dft en el display
00021032 		moveal 00030958 <dft>,%a0
00021038 		tstb %a0@
0002103a 		beqs 000210aa <rutina_int1+0x432>
		LCD_dato(*dft++); 											// carácter a carácter
0002103c 		moveal 00030958 <dft>,%a0
00021042 		moveb %a0@,%d1
00021044 		extw %d1
00021046 		moveq #1,%d0
00021048 		addl %d0,00030958 <dft>
0002104e 		movel %d1,%d0
00021050 		lsll #8,%d0
00021052 		movew %d0,%d1
00021054 		oril #192,%d0
0002105a 		movew %d0,000309d8 <puertoS>
00021060 		movew %d0,40000000 <_end+0x3ffcf5f0>
00021066 		movel #8248,%d0
0002106c 		subql #1,%d0
0002106e 		moveq #-1,%d2
00021070 		cmpl %d0,%d2
00021072 		bnes 0002106c <rutina_int1+0x3f4>
00021074 		moveq #64,%d0
00021076 		orl %d1,%d0
00021078 		movew %d0,000309d8 <puertoS>
0002107e 		movew %d0,40000000 <_end+0x3ffcf5f0>
00021084 		movel #8248,%d0
0002108a 		subql #1,%d0
0002108c 		moveq #-1,%d4
0002108e 		cmpl %d0,%d4
00021090 		bnes 0002108a <rutina_int1+0x412>
00021092 		movel #137498,%d0
00021098 		moveal 00030958 <dft>,%a0
0002109e 		subql #1,%d0
000210a0 		moveq #-1,%d1
000210a2 		cmpl %d0,%d1
000210a4 		bnes 0002109e <rutina_int1+0x426>
		retardo(RET_50MS);											// Mantenemos el mensaje 1 segundo
	}
000210a6 		tstb %a0@
000210a8 		bnes 0002103c <rutina_int1+0x3c4>
	while(*dft_) {													// Imprime el módulo de la dft en el display
000210aa 		movel 000309f8 <dft_>,%d0
000210b0 		moveal %d0,%a0
000210b2 		tstb %a0@
000210b4 		beqs 0002111e <rutina_int1+0x4a6>
		LCD_dato(*dft_++); 											// carácter a carácter
000210b6 		moveb %a0@,%d1
000210b8 		extw %d1
000210ba 		moveq #1,%d2
000210bc 		addl %d2,000309f8 <dft_>
000210c2 		movel %d1,%d0
000210c4 		lsll #8,%d0
000210c6 		movew %d0,%d1
000210c8 		oril #192,%d0
000210ce 		movew %d0,000309d8 <puertoS>
000210d4 		movew %d0,40000000 <_end+0x3ffcf5f0>
000210da 		movel #8248,%d0
000210e0 		subql #1,%d0
000210e2 		moveq #-1,%d4
000210e4 		cmpl %d0,%d4
000210e6 		bnes 000210e0 <rutina_int1+0x468>
000210e8 		moveq #64,%d0
000210ea 		orl %d1,%d0
000210ec 		movew %d0,000309d8 <puertoS>
000210f2 		movew %d0,40000000 <_end+0x3ffcf5f0>
000210f8 		movel #8248,%d0
000210fe 		subql #1,%d0
00021100 		moveq #-1,%d1
00021102 		cmpl %d0,%d1
00021104 		bnes 000210fe <rutina_int1+0x486>
00021106 		movel #137498,%d0
0002110c 		moveal 000309f8 <dft_>,%a0
00021112 		subql #1,%d0
00021114 		moveq #-1,%d2
00021116 		cmpl %d0,%d2
00021118 		bnes 00021112 <rutina_int1+0x49a>
		retardo(RET_50MS);											// Mantenemos el mensaje 1 segundo
	}
0002111a 		tstb %a0@
0002111c 		bnes 000210b6 <rutina_int1+0x43e>
	scroll++;
0002111e 		moveq #1,%d4
00021120 		addl %d4,00030148 <scroll>
	mbar_writeLong(MCFSIM_ICR1, 0xD888C888);									// Al ser interrupción externa debemos volverla a activar
00021126 		moveal #268435488,%a0
0002112c 		movel #-662124408,%a0@
}
00021132 		moveml %fp@(-20),%d2-%d4/%a2-%a3
00021138 		unlk %fp
0002113a 		rts

//------------------------------------------------------
// void __init(void)
//
// Descripción:
//   Función por defecto de inicialización del sistema
//------------------------------------------------------
void __init(void) {
	mbar_writeByte(MCFSIM_PIVR,V_BASE);										// Fija comienzo de vectores de interrupción en V_BASE.

	ACCESO_A_MEMORIA_LONG(DIR_VTMR0)= (ULONG)_prep_TOUT0; 								// Escribimos la dirección de la función para TMR0
	ACCESO_A_MEMORIA_LONG(DIR_VINT1) = (ULONG) _prep_INT1;								// Escribimos la dirección de la función para INT1

	mbar_writeShort(MCFSIM_TMR0, (PRESCALADO-1)<<8|0x3D);								// TMR0: PS=1-1=0 CE=00 OM=1 ORI=1 FRR=1 CLK=10 RST=1
	mbar_writeShort(MCFSIM_TCN0, 0x0000);										// Ponemos a 0 el contador del TIMER0
	mbar_writeShort(MCFSIM_TRR0, CNT_INT1);										// Fijamos la cuenta final del contador
	
	mbar_writeLong(MCFSIM_PITR, mbar_readLong(MCFSIM_PITR) | 0x80000000);						// Configuramos INT1 para que se active con flanco de subida
	mbar_writeLong(MCFSIM_ICR1, 0xD888C888);									// Marca la interrupción del TIMER0 como no pendiente y de nivel 4
	
	DAC_ADC_init();													// Inicialización DAC_ADC
	LCD_reset();													// Reset del LCD
	LCD_init();													// Inicialización del display
	output("____________________\r\n\r\nCOMIENZA EL PROGRAMA\r\n____________________\r\n\r\n");			// Imprime el mensaje de comienzo del programa
	output("Pulse F para acceder al menú\r\n\r\n");									// Imprime el mensaje de como abrir el menú
	sti();														// Habilitamos interrupciones
}

//------------------------------------------------------
// void bucleMain(void)
//
// Descripción:
//   Función del programa principal
//------------------------------------------------------
void bucleMain(void) {
0002113c <bucleMain>	linkw %fp,#-32
00021140 		lea %sp@(-40),%sp
00021144 		moveml %d2-%d7/%a2-%a5,%sp@
	if (teclado() == 'F') {
00021148 		lea %pc@(0002064e <teclado>),%a2
0002114c 		jsr %a2@
0002114e 		extbl %d0
00021150 		movel %a2,%d5
00021152 		moveq #70,%d1
00021154 		cmpl %d0,%d1
00021156 		bnew 00022422 <bucleMain+0x12e6>
0002115a 		lea 0002431d <_etext+0xdb>,%a0
00021160 		lea 0002434e <_etext+0x10c>,%a1
00021166 		lea 0002437b <_etext+0x139>,%a3
0002116c 		lea 000243a8 <_etext+0x166>,%a2
00021172 		lea 000243e2 <_etext+0x1a0>,%a4
00021178 		lea 0002440f <_etext+0x1cd>,%a5
0002117e 		movel #148561,%d3
00021184 		movel #148614,%d4
0002118a 		tstl %a0
0002118c 		beqs 0002119e <bucleMain+0x62>
0002118e 		tstb %a0@
00021190 		beqs 0002119e <bucleMain+0x62>
00021192 		moveb %a0@+,%d2
00021194 		moveb %d2,%d1
00021196 		moveq #19,%d0
00021198 		trap #15
0002119a 		tstb %a0@
0002119c 		bnes 00021192 <bucleMain+0x56>
0002119e 		tstl %a1
000211a0 		beqs 000211b4 <bucleMain+0x78>
000211a2 		tstb %a1@
000211a4 		beqs 000211b4 <bucleMain+0x78>
000211a6 		moveal %a1,%a0
000211a8 		moveb %a0@+,%d2
000211aa 		moveb %d2,%d1
000211ac 		moveq #19,%d0
000211ae 		trap #15
000211b0 		tstb %a0@
000211b2 		bnes 000211a8 <bucleMain+0x6c>
000211b4 		tstl %a3
000211b6 		beqs 000211ca <bucleMain+0x8e>
000211b8 		tstb %a3@
000211ba 		beqs 000211ca <bucleMain+0x8e>
000211bc 		moveal %a3,%a0
000211be 		moveb %a0@+,%d2
000211c0 		moveb %d2,%d1
000211c2 		moveq #19,%d0
000211c4 		trap #15
000211c6 		tstb %a0@
000211c8 		bnes 000211be <bucleMain+0x82>
000211ca 		tstl %a2
000211cc 		beqs 000211e0 <bucleMain+0xa4>
000211ce 		tstb %a2@
000211d0 		beqs 000211e0 <bucleMain+0xa4>
000211d2 		moveal %a2,%a0
000211d4 		moveb %a0@+,%d2
000211d6 		moveb %d2,%d1
000211d8 		moveq #19,%d0
000211da 		trap #15
000211dc 		tstb %a0@
000211de 		bnes 000211d4 <bucleMain+0x98>
000211e0 		tstl %a4
000211e2 		beqs 000211f6 <bucleMain+0xba>
000211e4 		tstb %a4@
000211e6 		beqs 000211f6 <bucleMain+0xba>
000211e8 		moveal %a4,%a0
000211ea 		moveb %a0@+,%d2
000211ec 		moveb %d2,%d1
000211ee 		moveq #19,%d0
000211f0 		trap #15
000211f2 		tstb %a0@
000211f4 		bnes 000211ea <bucleMain+0xae>
000211f6 		tstl %a5
000211f8 		beqs 0002120c <bucleMain+0xd0>
000211fa 		tstb %a5@
000211fc 		beqs 0002120c <bucleMain+0xd0>
000211fe 		moveal %a5,%a0
00021200 		moveb %a0@+,%d2
00021202 		moveb %d2,%d1
00021204 		moveq #19,%d0
00021206 		trap #15
00021208 		tstb %a0@
0002120a 		bnes 00021200 <bucleMain+0xc4>
0002120c 		tstl %d3
0002120e 		beqs 00021222 <bucleMain+0xe6>
00021210 		moveal %d3,%a0
00021212 		tstb %a0@
00021214 		beqs 00021222 <bucleMain+0xe6>
00021216 		moveb %a0@+,%d2
00021218 		moveb %d2,%d1
0002121a 		moveq #19,%d0
0002121c 		trap #15
0002121e 		tstb %a0@
00021220 		bnes 00021216 <bucleMain+0xda>
00021222 		tstl %d4
00021224 		beqs 0002123a <bucleMain+0xfe>
00021226 		moveal %d4,%a1
00021228 		tstb %a1@
0002122a 		beqs 0002123a <bucleMain+0xfe>
0002122c 		moveal %d4,%a0
0002122e 		moveb %a0@+,%d2
00021230 		moveb %d2,%d1
00021232 		moveq #19,%d0
00021234 		trap #15
00021236 		tstb %a0@
00021238 		bnes 0002122e <bucleMain+0xf2>
		output("	Pulse 1 para cambiar el número de frecuencias\r\n");
		output("	Pulse 2 para cambiar la frecuencia mínima\r\n");
		output("	Pulse 3 para cambiar la frecuencia máxima\r\n");
		output("	Pulse 4 para cambiar el número de muestras para la DFT\r\n");
		output("	Pulse 5 para cambiar el tiempo de barrido\r\n");		
		output("	Pulse 6 para elegir el tipo de distribución de las frecuencias\r\n");
		output("	Pulse 7 para mostrar los datos anteriores del LCD\r\n");
		output("	Pulse cualquier otro botón para salir\r\n\r\n");
		
		// Escribimos en el display la tecla pulsada
		switch (teclado()) {
0002123a 		moveal %d5,%a0
0002123c 		jsr %a0@
0002123e 		moveq #-49,%d1
00021240 		addl %d1,%d0
00021242 		extbl %d0
00021244 		moveq #6,%d2
00021246 		cmpl %d0,%d2
00021248 		bcsw 000223ea <bucleMain+0x12ae>
0002124c 		movew %pc@(00021256 <bucleMain+0x11a>,%d0:l:2),%d0
00021250 		extl %d0
00021252 		jmp %pc@(00021256 <bucleMain+0x11a>,%d0:l)
00021256 		orib #-62,%fp
0002125a 		addib #88,%a2
0002125e 		btst %d4,%a4@(00000078,%d0:l:2)
00021262 		bclr %d6,%a4@(16889)
00021266 		orib #-79,%d2
0002126a 		lea %pc@(0002070c <getCadTeclado>),%a1
0002126e 		lea 0002455f <_etext+0x31d>,%a4
00021274 		movel %fp,%d5
00021276 		subql #1,%d5
00021278 		lea 00024579 <_etext+0x337>,%a5
0002127e 		tstl %a0
00021280 		beqs 00021292 <bucleMain+0x156>
00021282 		tstb %a0@
00021284 		beqs 00021292 <bucleMain+0x156>
00021286 		moveb %a0@+,%d2
00021288 		moveb %d2,%d1
0002128a 		moveq #19,%d0
0002128c 		trap #15
0002128e 		tstb %a0@
00021290 		bnes 00021286 <bucleMain+0x14a>
			case '1':															// Si pulsamos 1
				output("		Introduzca número de frecuencias (máx: 30)\r\n");						//	Imprime mensaje
				n_frecs = getCadTeclado(cadena);											//	Lee una cadena del teclado y la asigna a n_frecs
00021292 		pea 00030a04 <cadena>
00021298 		jsr %a1@
0002129a 		movel %d0,00030128 <n_frecs>
				if (n_frecs >	30) {													//	Limita el valor máximo
000212a0 		addql #4,%sp
000212a2 		moveq #30,%d3
000212a4 		cmpl %d0,%d3
000212a6 		bccs 000212ae <bucleMain+0x172>
					n_frecs = 30;
000212a8 		movel %d3,00030128 <n_frecs>
				}
				t_comp = t_barrido/n_frecs;
000212ae 		movel 00030128 <n_frecs>,%d1
000212b4 		movel 0003012c <t_barrido>,%d2
000212ba 		divull %d1,%d2,%d2
000212be 		movel %d2,00030138 <t_comp>
				if (escala == 1) {
000212c4 		moveal 00030140 <escala>,%a2
000212ca 		moveq #1,%d3
000212cc 		cmpl %a2,%d3
000212ce 		bnew 000213b6 <bucleMain+0x27a>
					salto = (0.1 * (f_max - f_min)/(n_frecs - 1));									// 	"salto" es la distancia entre frecuencias
000212d2 		movel 00030134 <f_max>,%d2
000212d8 		subl 00030130 <f_min>,%d2
000212de 		movel %d2,%sp@-
000212e0 		jsr 00024028 <__floatsidf>
000212e6 		addql #4,%sp
000212e8 		tstl %d2
000212ea 		bges 00021302 <bucleMain+0x1c6>
000212ec 		clrl %sp@-
000212ee 		movel #1106247680,%sp@-
000212f4 		movel %d1,%sp@-
000212f6 		movel %d0,%sp@-
000212f8 		jsr 00022c38 <__adddf3>
000212fe 		lea %sp@(16),%sp
00021302 		movel #-1717986918,%sp@-
00021308 		movel #1069128089,%sp@-
0002130e 		movel %d1,%sp@-
00021310 		movel %d0,%sp@-
00021312 		jsr 000230c8 <__muldf3>
00021318 		lea %sp@(16),%sp
0002131c 		movel %d0,%d3
0002131e 		movel %d1,%d4
00021320 		movel 00030128 <n_frecs>,%d2
00021326 		subql #1,%d2
00021328 		movel %d2,%sp@-
0002132a 		jsr 00024028 <__floatsidf>
00021330 		addql #4,%sp
00021332 		tstl %d2
00021334 		bges 0002134c <bucleMain+0x210>
00021336 		clrl %sp@-
00021338 		movel #1106247680,%sp@-
0002133e 		movel %d1,%sp@-
00021340 		movel %d0,%sp@-
00021342 		jsr 00022c38 <__adddf3>
00021348 		lea %sp@(16),%sp
0002134c 		movel %d1,%sp@-
0002134e 		movel %d0,%sp@-
00021350 		movel %d4,%sp@-
00021352 		movel %d3,%sp@-
00021354 		jsr 000232b0 <__divdf3>
0002135a 		lea %sp@(16),%sp
0002135e 		movel %d1,%sp@-
00021360 		movel %d0,%sp@-
00021362 		jsr 0002375c <__fixunsdfsi>
00021368 		addql #8,%sp
0002136a 		movel %d0,0003013c <salto>
					for (k = 1; k < n_frecs - 1; k++) {										// 	Para cada frecuencia
00021370 		moveq #1,%d1
00021372 		movel %d1,000309d4 <k>
00021378 		movel 00030128 <n_frecs>,%d1
0002137e 		subql #1,%d1
00021380 		cmpl %a2,%d1
00021382 		blsw 00021588 <bucleMain+0x44c>
00021386 		lea 0003014c <pasos>,%a0
0002138c 		movel %d0,%d4
0002138e 		movel %d1,%d2
						pasos[k] = (pasos[0] + k * salto);									// 		Rellenamos el array pasos con su valor correspondiente
00021390 		movel 000309d4 <k>,%d1
00021396 		movel %d1,%d0
00021398 		mulsl %d4,%d0
0002139c 		addl %a0@,%d0
0002139e 		movel %d0,%a0@(00000000,%d1:l:4)
000213a2 		movel %d1,%d3
000213a4 		addql #1,%d3
000213a6 		movel %d3,000309d4 <k>
000213ac 		addql #1,%d1
000213ae 		cmpl %d1,%d2
000213b0 		bhis 00021390 <bucleMain+0x254>
					}
				} else {
000213b2 		braw 00021588 <bucleMain+0x44c>
					if (n_frecs < 7) {
000213b6 		lea 00030804 <logs>,%a2
000213bc 		moveq #6,%d0
000213be 		cmpl %d1,%d0
000213c0 		bcss 000213f4 <bucleMain+0x2b8>
000213c2 		lea 000244e0 <_etext+0x29e>,%a0
000213c8 		tstl %a0
000213ca 		beqs 000213dc <bucleMain+0x2a0>
000213cc 		tstb %a0@
000213ce 		beqs 000213dc <bucleMain+0x2a0>
000213d0 		moveb %a0@+,%d2
000213d2 		moveb %d2,%d1
000213d4 		moveq #19,%d0
000213d6 		trap #15
000213d8 		tstb %a0@
000213da 		bnes 000213d0 <bucleMain+0x294>
						output("			Para la distribución logarítmica, el mínimo número de frecuencias es de 7 frecuencias: n_frecs se fijará en 7 frecuencias\r\n");
						n_frecs = 7;
000213dc 		moveq #7,%d1
000213de 		movel %d1,00030128 <n_frecs>
						t_comp = t_barrido/7;
000213e4 		movel 0003012c <t_barrido>,%d2
000213ea 		divull %d1,%d2,%d2
000213ee 		movel %d2,00030138 <t_comp>
					}
					pasoLogs = logs[n_frecs - 7];
000213f4 		movel 00030128 <n_frecs>,%d0
000213fa 		subql #7,%d0
000213fc 		movel %a2@(00000000,%d0:l:4),%d0
00021400 		movel %d0,00030a0c <pasoLogs>
					pasos[0] = f_min * 0.1;
00021406 		movel 00030130 <f_min>,%d2
0002140c 		movel %d2,%sp@-
0002140e 		jsr 00024028 <__floatsidf>
00021414 		addql #4,%sp
00021416 		tstl %d2
00021418 		bges 00021430 <bucleMain+0x2f4>
0002141a 		clrl %sp@-
0002141c 		movel #1106247680,%sp@-
00021422 		movel %d1,%sp@-
00021424 		movel %d0,%sp@-
00021426 		jsr 00022c38 <__adddf3>
0002142c 		lea %sp@(16),%sp
00021430 		moveal #1069128089,%a2
00021436 		moveal #-1717986918,%a3
0002143c 		movel %a3,%sp@-
0002143e 		movel %a2,%sp@-
00021440 		movel %d1,%sp@-
00021442 		movel %d0,%sp@-
00021444 		jsr 000230c8 <__muldf3>
0002144a 		lea %sp@(16),%sp
0002144e 		movel %d1,%sp@-
00021450 		movel %d0,%sp@-
00021452 		jsr 000241a2 <__fixdfsi>
00021458 		addql #8,%sp
0002145a 		movel %d0,0003014c <pasos>
					pasos[n_frecs - 1] = f_max * 0.1;
00021460 		movel 00030128 <n_frecs>,%d4
00021466 		subql #1,%d4
00021468 		lsll #2,%d4
0002146a 		movel 00030134 <f_max>,%d2
00021470 		movel %d2,%sp@-
00021472 		jsr 00024028 <__floatsidf>
00021478 		addql #4,%sp
0002147a 		tstl %d2
0002147c 		bges 00021494 <bucleMain+0x358>
0002147e 		clrl %sp@-
00021480 		movel #1106247680,%sp@-
00021486 		movel %d1,%sp@-
00021488 		movel %d0,%sp@-
0002148a 		jsr 00022c38 <__adddf3>
00021490 		lea %sp@(16),%sp
00021494 		movel %a3,%sp@-
00021496 		movel %a2,%sp@-
00021498 		movel %d1,%sp@-
0002149a 		movel %d0,%sp@-
0002149c 		jsr 000230c8 <__muldf3>
000214a2 		lea %sp@(16),%sp
000214a6 		movel %d1,%sp@-
000214a8 		movel %d0,%sp@-
000214aa 		jsr 000241a2 <__fixdfsi>
000214b0 		addql #8,%sp
000214b2 		lea 0003014c <pasos>,%a0
000214b8 		movel %d0,%a0@(00000000,%d4:l)
					for (i = 1; i < n_frecs; i++) {
000214bc 		moveq #1,%d0
000214be 		movel %d0,000309e6 <i>
000214c4 		cmpl 00030128 <n_frecs>,%d0
000214ca 		bccw 00021588 <bucleMain+0x44c>
000214ce 		moveal 00030130 <f_min>,%a2
000214d4 		lea 000230c8 <__muldf3>,%a3
						pasos[i] = f_min * 0.1 * pasoLogs;
000214da 		movel 000309e6 <i>,%d4
000214e0 		lsll #2,%d4
000214e2 		movel %a2,%sp@-
000214e4 		jsr 00024028 <__floatsidf>
000214ea 		addql #4,%sp
000214ec 		tstl %a2
000214ee 		bges 00021506 <bucleMain+0x3ca>
000214f0 		clrl %sp@-
000214f2 		movel #1106247680,%sp@-
000214f8 		movel %d1,%sp@-
000214fa 		movel %d0,%sp@-
000214fc 		jsr 00022c38 <__adddf3>
00021502 		lea %sp@(16),%sp
00021506 		movel #-1717986918,%sp@-
0002150c 		movel #1069128089,%sp@-
00021512 		movel %d1,%sp@-
00021514 		movel %d0,%sp@-
00021516 		jsr %a3@
00021518 		lea %sp@(16),%sp
0002151c 		movel %d0,%d2
0002151e 		movel %d1,%d3
00021520 		movel 00030a0c <pasoLogs>,%d1
00021526 		movel %d1,%sp@-
00021528 		jsr 000240c8 <__extendsfdf2>
0002152e 		addql #4,%sp
00021530 		movel %d1,%sp@-
00021532 		movel %d0,%sp@-
00021534 		movel %d3,%sp@-
00021536 		movel %d2,%sp@-
00021538 		jsr %a3@
0002153a 		lea %sp@(16),%sp
0002153e 		movel %d1,%sp@-
00021540 		movel %d0,%sp@-
00021542 		jsr 000241a2 <__fixdfsi>
00021548 		addql #8,%sp
0002154a 		lea 0003014c <pasos>,%a0
00021550 		movel %d0,%a0@(00000000,%d4:l)
						pasoLogs *= pasoLogs;
00021554 		movel 00030a0c <pasoLogs>,%d0
0002155a 		movel %d0,%sp@-
0002155c 		movel %d0,%sp@-
0002155e 		jsr 00023af8 <__mulsf3>
00021564 		addql #8,%sp
00021566 		movel %d0,00030a0c <pasoLogs>
0002156c 		movel 000309e6 <i>,%d0
00021572 		moveal %d0,%a1
00021574 		addql #1,%a1
00021576 		movel %a1,000309e6 <i>
0002157c 		addql #1,%d0
0002157e 		cmpl 00030128 <n_frecs>,%d0
00021584 		bcsw 000214da <bucleMain+0x39e>
00021588 		movel 00030128 <n_frecs>,%d4
0002158e 		tstl %a4
00021590 		beqs 000215a4 <bucleMain+0x468>
00021592 		tstb %a4@
00021594 		beqs 000215a4 <bucleMain+0x468>
00021596 		moveal %a4,%a0
00021598 		moveb %a0@+,%d2
0002159a 		moveb %d2,%d1
0002159c 		moveq #19,%d0
0002159e 		trap #15
000215a0 		tstb %a0@
000215a2 		bnes 00021598 <bucleMain+0x45c>
000215a4 		tstl %d4
000215a6 		bges 000215b6 <bucleMain+0x47a>
000215a8 		moveq #45,%d2
000215aa 		moveb %d2,%d1
000215ac 		moveq #19,%d0
000215ae 		trap #15
000215b0 		movel %d4,%d2
000215b2 		negl %d2
000215b4 		bras 000215b8 <bucleMain+0x47c>
000215b6 		movel %d4,%d2
000215b8 		moveal %d5,%a0
000215ba 		clrb %d0
000215bc 		moveb %d0,%fp@(-1)
000215c0 		moveq #2,%d4
000215c2 		andl %d0,%d4
000215c4 		tstb %d4
000215c6 		beqs 000215d8 <bucleMain+0x49c>
000215c8 		movel %d2,%d1
000215ca 		moveq #10,%d3
000215cc 		divull %d3,%d0,%d1
000215d0 		lea 00024253 <_etext+0x11>,%a1
000215d6 		bras 000215e6 <bucleMain+0x4aa>
000215d8 		movel %d2,%d1
000215da 		moveq #10,%d3
000215dc 		divull %d3,%d0,%d1
000215e0 		lea 00024242 <_etext>,%a1
000215e6 		moveb %a1@(00000000,%d0:l),%a0@-
000215ea 		moveq #10,%d1
000215ec 		divull %d1,%d2,%d2
000215f0 		bnes 000215c4 <bucleMain+0x488>
000215f2 		movel %a0,%sp@-
000215f4 		jsr 00022506 <output>
000215fa 		tstl %a5
000215fc 		beqw 00022404 <bucleMain+0x12c8>
00021600 		tstb %a5@
00021602 		beqw 00022404 <bucleMain+0x12c8>
00021606 		moveal %a5,%a0
00021608 		moveb %a0@+,%d2
0002160a 		moveb %d2,%d1
0002160c 		moveq #19,%d0
0002160e 		trap #15
00021610 		tstb %a0@
00021612 		bnes 00021608 <bucleMain+0x4cc>
					}
				}
				output("		Número de frecuencias: ");
				outNum(10,n_frecs,0);													//	Imprime el número de frecuencias
				output(" frecuencias\r\n\r\n");												//	Retorno de carro y salto de línea
				break;
00021614 		braw 00022404 <bucleMain+0x12c8>
00021618 		lea 0002458a <_etext+0x348>,%a0
0002161e 		lea %pc@(0002070c <getCadTeclado>),%a1
00021622 		movel #144048,%d6
00021628 		movel #145244,%d7
0002162e 		movel %fp,%d5
00021630 		subql #1,%d5
00021632 		lea 000245c9 <_etext+0x387>,%a2
00021638 		lea 000245df <_etext+0x39d>,%a5
0002163e 		tstl %a0
00021640 		beqs 00021652 <bucleMain+0x516>
00021642 		tstb %a0@
00021644 		beqs 00021652 <bucleMain+0x516>
00021646 		moveb %a0@+,%d2
00021648 		moveb %d2,%d1
0002164a 		moveq #19,%d0
0002164c 		trap #15
0002164e 		tstb %a0@
00021650 		bnes 00021646 <bucleMain+0x50a>
			case '2':															// Si pulsamos 2
				output("		Introduzca la frecuencia mínima (mín: 50 Hz, máx: 1971 Hz)\r\n");				//	Imprime mensaje
				f_min = getCadTeclado(cadena);												//	Lee una cadena del teclado y la asigna a f_min
00021652 		pea 00030a04 <cadena>
00021658 		jsr %a1@
0002165a 		movel %d0,00030130 <f_min>
				if (f_min >	1971) {													//	Limita el valor máximo
00021660 		addql #4,%sp
00021662 		cmpil #1971,%d0
00021668 		blss 00021678 <bucleMain+0x53c>
					f_min = 1971;
0002166a 		movel #1971,%d2
00021670 		movel %d2,00030130 <f_min>
				} else if (f_min < 50) {												//	Limita el valor mínimo
00021676 		bras 00021686 <bucleMain+0x54a>
00021678 		moveq #49,%d3
0002167a 		cmpl %d0,%d3
0002167c 		bcss 00021686 <bucleMain+0x54a>
					f_min = 50;
0002167e 		moveq #50,%d0
00021680 		movel %d0,00030130 <f_min>
				}
				if (f_max < f_min + n_frecs) {												//	Limita diferencia entre f_min y f_max
00021686 		movel 00030128 <n_frecs>,%d2
0002168c 		movel 00030130 <f_min>,%d0
00021692 		addl %d2,%d0
00021694 		movel 00030134 <f_max>,%d1
0002169a 		cmpl %d1,%d0
0002169c 		blss 000216a6 <bucleMain+0x56a>
					f_min = f_max - n_frecs;
0002169e 		subl %d2,%d1
000216a0 		movel %d1,00030130 <f_min>
				}
				pasos[0] = f_min * 0.1;													// 	La primera posición de pasos[] es la frecuencia mínima entre 10
000216a6 		movel 00030130 <f_min>,%d2
000216ac 		movel %d2,%sp@-
000216ae 		jsr 00024028 <__floatsidf>
000216b4 		addql #4,%sp
000216b6 		tstl %d2
000216b8 		bges 000216d0 <bucleMain+0x594>
000216ba 		clrl %sp@-
000216bc 		movel #1106247680,%sp@-
000216c2 		movel %d1,%sp@-
000216c4 		movel %d0,%sp@-
000216c6 		jsr 00022c38 <__adddf3>
000216cc 		lea %sp@(16),%sp
000216d0 		movel #1069128089,%d3
000216d6 		movel #-1717986918,%d4
000216dc 		movel %d4,%sp@-
000216de 		movel %d3,%sp@-
000216e0 		movel %d1,%sp@-
000216e2 		movel %d0,%sp@-
000216e4 		jsr 000230c8 <__muldf3>
000216ea 		lea %sp@(16),%sp
000216ee 		movel %d1,%sp@-
000216f0 		movel %d0,%sp@-
000216f2 		jsr 000241a2 <__fixdfsi>
000216f8 		addql #8,%sp
000216fa 		movel %d0,0003014c <pasos>
				salto = (0.1 * (f_max - f_min)/(n_frecs - 1));										// 	"salto" es la distancia entre frecuencias
00021700 		movel 00030134 <f_max>,%d2
00021706 		subl 00030130 <f_min>,%d2
0002170c 		movel %d2,%sp@-
0002170e 		jsr 00024028 <__floatsidf>
00021714 		addql #4,%sp
00021716 		tstl %d2
00021718 		bges 00021730 <bucleMain+0x5f4>
0002171a 		clrl %sp@-
0002171c 		movel #1106247680,%sp@-
00021722 		movel %d1,%sp@-
00021724 		movel %d0,%sp@-
00021726 		jsr 00022c38 <__adddf3>
0002172c 		lea %sp@(16),%sp
00021730 		movel %d4,%sp@-
00021732 		movel %d3,%sp@-
00021734 		movel %d1,%sp@-
00021736 		movel %d0,%sp@-
00021738 		jsr 000230c8 <__muldf3>
0002173e 		lea %sp@(16),%sp
00021742 		movel %d0,%d3
00021744 		movel %d1,%d4
00021746 		movel 00030128 <n_frecs>,%d2
0002174c 		subql #1,%d2
0002174e 		movel %d2,%sp@-
00021750 		jsr 00024028 <__floatsidf>
00021756 		addql #4,%sp
00021758 		tstl %d2
0002175a 		bges 00021772 <bucleMain+0x636>
0002175c 		clrl %sp@-
0002175e 		movel #1106247680,%sp@-
00021764 		movel %d1,%sp@-
00021766 		movel %d0,%sp@-
00021768 		jsr 00022c38 <__adddf3>
0002176e 		lea %sp@(16),%sp
00021772 		movel %d1,%sp@-
00021774 		movel %d0,%sp@-
00021776 		movel %d4,%sp@-
00021778 		movel %d3,%sp@-
0002177a 		moveal %d6,%a0
0002177c 		jsr %a0@
0002177e 		lea %sp@(16),%sp
00021782 		movel %d1,%sp@-
00021784 		movel %d0,%sp@-
00021786 		moveal %d7,%a1
00021788 		jsr %a1@
0002178a 		addql #8,%sp
0002178c 		movel %d0,0003013c <salto>
				for (k = 1; k < n_frecs - 1; k++) {											// 	Para cada frecuencia
00021792 		moveq #1,%d1
00021794 		movel %d1,000309d4 <k>
0002179a 		movel 00030128 <n_frecs>,%d1
000217a0 		subql #1,%d1
000217a2 		moveq #1,%d2
000217a4 		cmpl %d1,%d2
000217a6 		bccs 000217ce <bucleMain+0x692>
000217a8 		lea 0003014c <pasos>,%a0
000217ae 		movel %d0,%d3
000217b0 		movel %d1,%d4
					pasos[k] = (pasos[0] + k * salto);										// 		Rellenamos el array pasos con su valor correspondiente
000217b2 		movel %d2,%d1
000217b4 		movel %d2,%d0
000217b6 		mulsl %d3,%d0
000217ba 		addl %a0@,%d0
000217bc 		movel %d0,%a0@(00000000,%d2:l:4)
000217c0 		addql #1,%d2
000217c2 		addql #1,%d1
000217c4 		cmpl %d1,%d4
000217c6 		bhis 000217b2 <bucleMain+0x676>
000217c8 		movel %d2,000309d4 <k>
000217ce 		movel 00030130 <f_min>,%d4
000217d4 		tstl %a2
000217d6 		beqs 000217ea <bucleMain+0x6ae>
000217d8 		tstb %a2@
000217da 		beqs 000217ea <bucleMain+0x6ae>
000217dc 		moveal %a2,%a0
000217de 		moveb %a0@+,%d2
000217e0 		moveb %d2,%d1
000217e2 		moveq #19,%d0
000217e4 		trap #15
000217e6 		tstb %a0@
000217e8 		bnes 000217de <bucleMain+0x6a2>
000217ea 		tstl %d4
000217ec 		bges 000217fc <bucleMain+0x6c0>
000217ee 		moveq #45,%d2
000217f0 		moveb %d2,%d1
000217f2 		moveq #19,%d0
000217f4 		trap #15
000217f6 		movel %d4,%d2
000217f8 		negl %d2
000217fa 		bras 000217fe <bucleMain+0x6c2>
000217fc 		movel %d4,%d2
000217fe 		moveal %d5,%a0
00021800 		clrb %d3
00021802 		moveb %d3,%fp@(-1)
00021806 		clrb %d0
00021808 		moveq #2,%d4
0002180a 		andl %d0,%d4
0002180c 		tstb %d4
0002180e 		beqs 00021820 <bucleMain+0x6e4>
00021810 		movel %d2,%d1
00021812 		moveq #10,%d3
00021814 		divull %d3,%d0,%d1
00021818 		lea 00024253 <_etext+0x11>,%a1
0002181e 		bras 0002182e <bucleMain+0x6f2>
00021820 		movel %d2,%d1
00021822 		moveq #10,%d3
00021824 		divull %d3,%d0,%d1
00021828 		lea 00024242 <_etext>,%a1
0002182e 		moveb %a1@(00000000,%d0:l),%a0@-
00021832 		moveq #10,%d1
00021834 		divull %d1,%d2,%d2
00021838 		bnes 0002180c <bucleMain+0x6d0>
0002183a 		movel %a0,%sp@-
0002183c 		jsr 00022506 <output>
00021842 		tstl %a5
00021844 		beqw 00022404 <bucleMain+0x12c8>
00021848 		tstb %a5@
0002184a 		beqw 00022404 <bucleMain+0x12c8>
0002184e 		moveal %a5,%a0
00021850 		moveb %a0@+,%d2
00021852 		moveb %d2,%d1
00021854 		moveq #19,%d0
00021856 		trap #15
00021858 		tstb %a0@
0002185a 		bnes 00021850 <bucleMain+0x714>
				}
				output("		Frecuencia mínima: ");	
				outNum(10,f_min,0);													// 	Imprime el valor de la frecuencia mínima
				output(" Hz\r\n\r\n");													// 	Retorno de carro y salto de línea
				break;
0002185c 		braw 00022404 <bucleMain+0x12c8>
00021860 		lea 000245e7 <_etext+0x3a5>,%a0
00021866 		lea %pc@(0002070c <getCadTeclado>),%a1
0002186a 		movel #144048,%d6
00021870 		movel #145244,%d7
00021876 		movel %fp,%d5
00021878 		subql #1,%d5
0002187a 		lea 000245df <_etext+0x39d>,%a5
00021880 		lea 00024626 <_etext+0x3e4>,%a4
00021886 		tstl %a0
00021888 		beqs 0002189a <bucleMain+0x75e>
0002188a 		tstb %a0@
0002188c 		beqs 0002189a <bucleMain+0x75e>
0002188e 		moveb %a0@+,%d2
00021890 		moveb %d2,%d1
00021892 		moveq #19,%d0
00021894 		trap #15
00021896 		tstb %a0@
00021898 		bnes 0002188e <bucleMain+0x752>
			case '3':															// Si pulsamos 3
				output("		Introduzca la frecuencia máxima (mín: 79 Hz, máx: 2000 Hz)\r\n");				// 	Imprime mensaje
				f_max = getCadTeclado(cadena);												// 	Lee una cadena del teclado y la asigna a f_max
0002189a 		pea 00030a04 <cadena>
000218a0 		jsr %a1@
000218a2 		movel %d0,00030134 <f_max>
				if (f_max >	2000) {													//	Limita el valor máximo
000218a8 		addql #4,%sp
000218aa 		cmpil #2000,%d0
000218b0 		blss 000218c0 <bucleMain+0x784>
					f_max = 2000;
000218b2 		movel #2000,%d2
000218b8 		movel %d2,00030134 <f_max>
				} else if (f_max < 79) {												//	Limita el valor mínimo
000218be 		bras 000218ce <bucleMain+0x792>
000218c0 		moveq #78,%d3
000218c2 		cmpl %d0,%d3
000218c4 		bcss 000218ce <bucleMain+0x792>
					f_max = 79;
000218c6 		moveq #79,%d0
000218c8 		movel %d0,00030134 <f_max>
				}
				if (f_max < f_min + n_frecs) {												//	Limita diferencia entre f_min y f_max
000218ce 		movel 00030128 <n_frecs>,%d1
000218d4 		movel 00030130 <f_min>,%d0
000218da 		addl %d1,%d0
000218dc 		cmpl 00030134 <f_max>,%d0
000218e2 		blss 000218ea <bucleMain+0x7ae>
					f_max = f_min + n_frecs;
000218e4 		movel %d0,00030134 <f_max>
				}
				pasos[n_frecs - 1] = f_max * 0.1;											// 	La última posición de pasos[] es la frecuencia máxima entre 10
000218ea 		movel %d1,%d4
000218ec 		subql #1,%d4
000218ee 		lsll #2,%d4
000218f0 		movel 00030134 <f_max>,%d2
000218f6 		movel %d2,%sp@-
000218f8 		jsr 00024028 <__floatsidf>
000218fe 		addql #4,%sp
00021900 		tstl %d2
00021902 		bges 0002191a <bucleMain+0x7de>
00021904 		clrl %sp@-
00021906 		movel #1106247680,%sp@-
0002190c 		movel %d1,%sp@-
0002190e 		movel %d0,%sp@-
00021910 		jsr 00022c38 <__adddf3>
00021916 		lea %sp@(16),%sp
0002191a 		moveal #1069128089,%a2
00021920 		moveal #-1717986918,%a3
00021926 		movel %a3,%sp@-
00021928 		movel %a2,%sp@-
0002192a 		movel %d1,%sp@-
0002192c 		movel %d0,%sp@-
0002192e 		jsr 000230c8 <__muldf3>
00021934 		lea %sp@(16),%sp
00021938 		movel %d1,%sp@-
0002193a 		movel %d0,%sp@-
0002193c 		jsr 000241a2 <__fixdfsi>
00021942 		addql #8,%sp
00021944 		lea 0003014c <pasos>,%a0
0002194a 		movel %d0,%a0@(00000000,%d4:l)
				salto = (0.1 * (f_max - f_min)/(n_frecs - 1));										//	 "salto" es la distancia entre frecuencias
0002194e 		movel 00030134 <f_max>,%d2
00021954 		subl 00030130 <f_min>,%d2
0002195a 		movel %d2,%sp@-
0002195c 		jsr 00024028 <__floatsidf>
00021962 		addql #4,%sp
00021964 		tstl %d2
00021966 		bges 0002197e <bucleMain+0x842>
00021968 		clrl %sp@-
0002196a 		movel #1106247680,%sp@-
00021970 		movel %d1,%sp@-
00021972 		movel %d0,%sp@-
00021974 		jsr 00022c38 <__adddf3>
0002197a 		lea %sp@(16),%sp
0002197e 		movel %a3,%sp@-
00021980 		movel %a2,%sp@-
00021982 		movel %d1,%sp@-
00021984 		movel %d0,%sp@-
00021986 		jsr 000230c8 <__muldf3>
0002198c 		lea %sp@(16),%sp
00021990 		movel %d0,%d3
00021992 		movel %d1,%d4
00021994 		movel 00030128 <n_frecs>,%d2
0002199a 		subql #1,%d2
0002199c 		movel %d2,%sp@-
0002199e 		jsr 00024028 <__floatsidf>
000219a4 		addql #4,%sp
000219a6 		tstl %d2
000219a8 		bges 000219c0 <bucleMain+0x884>
000219aa 		clrl %sp@-
000219ac 		movel #1106247680,%sp@-
000219b2 		movel %d1,%sp@-
000219b4 		movel %d0,%sp@-
000219b6 		jsr 00022c38 <__adddf3>
000219bc 		lea %sp@(16),%sp
000219c0 		movel %d1,%sp@-
000219c2 		movel %d0,%sp@-
000219c4 		movel %d4,%sp@-
000219c6 		movel %d3,%sp@-
000219c8 		moveal %d6,%a1
000219ca 		jsr %a1@
000219cc 		lea %sp@(16),%sp
000219d0 		movel %d1,%sp@-
000219d2 		movel %d0,%sp@-
000219d4 		moveal %d7,%a0
000219d6 		jsr %a0@
000219d8 		addql #8,%sp
000219da 		movel %d0,0003013c <salto>
				for (k = 1; k < n_frecs - 1; k++) {											// 	Para cada frecuencia
000219e0 		moveq #1,%d1
000219e2 		movel %d1,000309d4 <k>
000219e8 		movel 00030128 <n_frecs>,%d1
000219ee 		subql #1,%d1
000219f0 		moveq #1,%d2
000219f2 		cmpl %d1,%d2
000219f4 		bccs 00021a1c <bucleMain+0x8e0>
000219f6 		lea 0003014c <pasos>,%a0
000219fc 		movel %d0,%d3
000219fe 		movel %d1,%d4
					pasos[k] = (pasos[0] + k * salto);										// 		Rellenamos el array pasos con su valor correspondiente
00021a00 		movel %d2,%d1
00021a02 		movel %d2,%d0
00021a04 		mulsl %d3,%d0
00021a08 		addl %a0@,%d0
00021a0a 		movel %d0,%a0@(00000000,%d2:l:4)
00021a0e 		addql #1,%d2
00021a10 		addql #1,%d1
00021a12 		cmpl %d1,%d4
00021a14 		bhis 00021a00 <bucleMain+0x8c4>
00021a16 		movel %d2,000309d4 <k>
00021a1c 		movel 00030134 <f_max>,%d4
00021a22 		tstl %a4
00021a24 		beqs 00021a38 <bucleMain+0x8fc>
00021a26 		tstb %a4@
00021a28 		beqs 00021a38 <bucleMain+0x8fc>
00021a2a 		moveal %a4,%a0
00021a2c 		moveb %a0@+,%d2
00021a2e 		moveb %d2,%d1
00021a30 		moveq #19,%d0
00021a32 		trap #15
00021a34 		tstb %a0@
00021a36 		bnes 00021a2c <bucleMain+0x8f0>
00021a38 		tstl %d4
00021a3a 		bges 00021a4a <bucleMain+0x90e>
00021a3c 		moveq #45,%d2
00021a3e 		moveb %d2,%d1
00021a40 		moveq #19,%d0
00021a42 		trap #15
00021a44 		movel %d4,%d2
00021a46 		negl %d2
00021a48 		bras 00021a4c <bucleMain+0x910>
00021a4a 		movel %d4,%d2
00021a4c 		moveal %d5,%a0
00021a4e 		clrb %d3
00021a50 		moveb %d3,%fp@(-1)
00021a54 		clrb %d0
00021a56 		moveq #2,%d4
00021a58 		andl %d0,%d4
00021a5a 		tstb %d4
00021a5c 		beqs 00021a6e <bucleMain+0x932>
00021a5e 		movel %d2,%d1
00021a60 		moveq #10,%d3
00021a62 		divull %d3,%d0,%d1
00021a66 		lea 00024253 <_etext+0x11>,%a1
00021a6c 		bras 00021a7c <bucleMain+0x940>
00021a6e 		movel %d2,%d1
00021a70 		moveq #10,%d3
00021a72 		divull %d3,%d0,%d1
00021a76 		lea 00024242 <_etext>,%a1
00021a7c 		moveb %a1@(00000000,%d0:l),%a0@-
00021a80 		moveq #10,%d1
00021a82 		divull %d1,%d2,%d2
00021a86 		bnes 00021a5a <bucleMain+0x91e>
00021a88 		movel %a0,%sp@-
00021a8a 		jsr 00022506 <output>
00021a90 		tstl %a5
00021a92 		beqw 00022404 <bucleMain+0x12c8>
00021a96 		tstb %a5@
00021a98 		beqw 00022404 <bucleMain+0x12c8>
00021a9c 		moveal %a5,%a0
00021a9e 		moveb %a0@+,%d2
00021aa0 		moveb %d2,%d1
00021aa2 		moveq #19,%d0
00021aa4 		trap #15
00021aa6 		tstb %a0@
00021aa8 		bnes 00021a9e <bucleMain+0x962>
				}
				output("		Frecuencia máxima: ");	
				outNum(10,f_max,0);													// 	Imprime el valor de la frecuencia máxima
				output(" Hz\r\n\r\n");													// 	Retorno de carro y salto de línea
				break;			
00021aaa 		braw 00022404 <bucleMain+0x12c8>
00021aae 		lea 0002463c <_etext+0x3fa>,%a0
00021ab4 		lea %pc@(0002070c <getCadTeclado>),%a1
00021ab8 		movel %fp,%d5
00021aba 		subql #1,%d5
00021abc 		lea 00024677 <_etext+0x435>,%a2
00021ac2 		lea 0002468e <_etext+0x44c>,%a3
00021ac8 		tstl %a0
00021aca 		beqs 00021adc <bucleMain+0x9a0>
00021acc 		tstb %a0@
00021ace 		beqs 00021adc <bucleMain+0x9a0>
00021ad0 		moveb %a0@+,%d2
00021ad2 		moveb %d2,%d1
00021ad4 		moveq #19,%d0
00021ad6 		trap #15
00021ad8 		tstb %a0@
00021ada 		bnes 00021ad0 <bucleMain+0x994>
			case '4':															// Si pulsamos 4
				output("		Introduzca el número de muestras para la DFT (máx: 80)\r\n");					// 	Imprime mensaje
				n_dft = getCadTeclado(cadena);												// 	Lee una cadena del teclado y la asigna a n_dft
00021adc 		pea 00030a04 <cadena>
00021ae2 		jsr %a1@
00021ae4 		movel %d0,00030124 <n_dft>
				if (n_dft >	80) {													//	Limita el valor máximo
00021aea 		addql #4,%sp
00021aec 		moveq #80,%d2
00021aee 		cmpl %d0,%d2
00021af0 		bccs 00021af8 <bucleMain+0x9bc>
					n_dft = 80;
00021af2 		movel %d2,00030124 <n_dft>
00021af8 		movel 00030124 <n_dft>,%d4
00021afe 		tstl %a2
00021b00 		beqs 00021b14 <bucleMain+0x9d8>
00021b02 		tstb %a2@
00021b04 		beqs 00021b14 <bucleMain+0x9d8>
00021b06 		moveal %a2,%a0
00021b08 		moveb %a0@+,%d2
00021b0a 		moveb %d2,%d1
00021b0c 		moveq #19,%d0
00021b0e 		trap #15
00021b10 		tstb %a0@
00021b12 		bnes 00021b08 <bucleMain+0x9cc>
00021b14 		tstl %d4
00021b16 		bges 00021b26 <bucleMain+0x9ea>
00021b18 		moveq #45,%d2
00021b1a 		moveb %d2,%d1
00021b1c 		moveq #19,%d0
00021b1e 		trap #15
00021b20 		movel %d4,%d2
00021b22 		negl %d2
00021b24 		bras 00021b28 <bucleMain+0x9ec>
00021b26 		movel %d4,%d2
00021b28 		moveal %d5,%a0
00021b2a 		clrb %d3
00021b2c 		moveb %d3,%fp@(-1)
00021b30 		clrb %d0
00021b32 		moveq #2,%d4
00021b34 		andl %d0,%d4
00021b36 		tstb %d4
00021b38 		beqs 00021b4a <bucleMain+0xa0e>
00021b3a 		movel %d2,%d1
00021b3c 		moveq #10,%d3
00021b3e 		divull %d3,%d0,%d1
00021b42 		lea 00024253 <_etext+0x11>,%a1
00021b48 		bras 00021b58 <bucleMain+0xa1c>
00021b4a 		movel %d2,%d1
00021b4c 		moveq #10,%d3
00021b4e 		divull %d3,%d0,%d1
00021b52 		lea 00024242 <_etext>,%a1
00021b58 		moveb %a1@(00000000,%d0:l),%a0@-
00021b5c 		moveq #10,%d1
00021b5e 		divull %d1,%d2,%d2
00021b62 		bnes 00021b36 <bucleMain+0x9fa>
00021b64 		movel %a0,%sp@-
00021b66 		jsr 00022506 <output>
00021b6c 		tstl %a3
00021b6e 		beqw 00022404 <bucleMain+0x12c8>
00021b72 		tstb %a3@
00021b74 		beqw 00022404 <bucleMain+0x12c8>
00021b78 		moveal %a3,%a0
00021b7a 		moveb %a0@+,%d2
00021b7c 		moveb %d2,%d1
00021b7e 		moveq #19,%d0
00021b80 		trap #15
00021b82 		tstb %a0@
00021b84 		bnes 00021b7a <bucleMain+0xa3e>
				}
				output("		Número de muestras: ");
				outNum(10,n_dft,0);													// 	Imprime el número de muestras para la DFT
				output(" muestras\r\n\r\n");												// 	Retorno de carro y salto de línea
				break;
00021b86 		braw 00022404 <bucleMain+0x12c8>
00021b8a 		lea 0002469c <_etext+0x45a>,%a0
00021b90 		lea %pc@(0002070c <getCadTeclado>),%a1
00021b94 		movel %fp,%d5
00021b96 		subql #1,%d5
00021b98 		lea 000246cd <_etext+0x48b>,%a2
00021b9e 		lea 000246e3 <_etext+0x4a1>,%a3
00021ba4 		tstl %a0
00021ba6 		beqs 00021bb8 <bucleMain+0xa7c>
00021ba8 		tstb %a0@
00021baa 		beqs 00021bb8 <bucleMain+0xa7c>
00021bac 		moveb %a0@+,%d2
00021bae 		moveb %d2,%d1
00021bb0 		moveq #19,%d0
00021bb2 		trap #15
00021bb4 		tstb %a0@
00021bb6 		bnes 00021bac <bucleMain+0xa70>
			case '5':															// Si pulsamos 5
				output("		Introduzca el tiempo de barrido (máx: 40 ms)\r\n");						// 	Imprime mensaje
				t_barrido = 4 * getCadTeclado(cadena);											// 	Lee una cadena del teclado, multiplica el número obtenido de la cadena por 4 y la asigna a t_barrido
00021bb8 		pea 00030a04 <cadena>
00021bbe 		jsr %a1@
00021bc0 		lsll #2,%d0
00021bc2 		movel %d0,0003012c <t_barrido>
				if (t_barrido >	160) {													//	Limita el valor máximo
00021bc8 		addql #4,%sp
00021bca 		cmpil #160,%d0
00021bd0 		blss 00021bde <bucleMain+0xaa2>
					t_barrido = 160;
00021bd2 		movel #160,%d2
00021bd8 		movel %d2,0003012c <t_barrido>
				}
				t_comp = t_barrido/n_frecs;												//	Calcula el tiempo de componente
00021bde 		movel 0003012c <t_barrido>,%d3
00021be4 		movel 00030128 <n_frecs>,%d1
00021bea 		divull %d1,%d3,%d3
00021bee 		movel %d3,00030138 <t_comp>
00021bf4 		tstl %a2
00021bf6 		beqs 00021c0a <bucleMain+0xace>
00021bf8 		tstb %a2@
00021bfa 		beqs 00021c0a <bucleMain+0xace>
00021bfc 		moveal %a2,%a0
00021bfe 		moveb %a0@+,%d2
00021c00 		moveb %d2,%d1
00021c02 		moveq #19,%d0
00021c04 		trap #15
00021c06 		tstb %a0@
00021c08 		bnes 00021bfe <bucleMain+0xac2>
				output("		Tiempo de barrido: ");
				outNum(10,t_barrido * 0.25,0);												// 	Imprime el tiempo de barrido
00021c0a 		movel 0003012c <t_barrido>,%d2
00021c10 		movel %d2,%sp@-
00021c12 		jsr 00024028 <__floatsidf>
00021c18 		addql #4,%sp
00021c1a 		tstl %d2
00021c1c 		bges 00021c34 <bucleMain+0xaf8>
00021c1e 		clrl %sp@-
00021c20 		movel #1106247680,%sp@-
00021c26 		movel %d1,%sp@-
00021c28 		movel %d0,%sp@-
00021c2a 		jsr 00022c38 <__adddf3>
00021c30 		lea %sp@(16),%sp
00021c34 		clrl %sp@-
00021c36 		movel #1070596096,%sp@-
00021c3c 		movel %d1,%sp@-
00021c3e 		movel %d0,%sp@-
00021c40 		jsr 000230c8 <__muldf3>
00021c46 		lea %sp@(16),%sp
00021c4a 		movel %d1,%sp@-
00021c4c 		movel %d0,%sp@-
00021c4e 		jsr 000241a2 <__fixdfsi>
00021c54 		addql #8,%sp
00021c56 		moveal %d0,%a0
00021c58 		tstl %a0
00021c5a 		bges 00021c6a <bucleMain+0xb2e>
00021c5c 		moveq #45,%d2
00021c5e 		moveb %d2,%d1
00021c60 		moveq #19,%d0
00021c62 		trap #15
00021c64 		movel %a0,%d2
00021c66 		negl %d2
00021c68 		bras 00021c6c <bucleMain+0xb30>
00021c6a 		movel %a0,%d2
00021c6c 		moveal %d5,%a0
00021c6e 		clrb %d3
00021c70 		moveb %d3,%fp@(-1)
00021c74 		clrb %d0
00021c76 		moveq #2,%d4
00021c78 		andl %d0,%d4
00021c7a 		tstb %d4
00021c7c 		beqs 00021c8e <bucleMain+0xb52>
00021c7e 		movel %d2,%d1
00021c80 		moveq #10,%d3
00021c82 		divull %d3,%d0,%d1
00021c86 		lea 00024253 <_etext+0x11>,%a1
00021c8c 		bras 00021c9c <bucleMain+0xb60>
00021c8e 		movel %d2,%d1
00021c90 		moveq #10,%d3
00021c92 		divull %d3,%d0,%d1
00021c96 		lea 00024242 <_etext>,%a1
00021c9c 		moveb %a1@(00000000,%d0:l),%a0@-
00021ca0 		moveq #10,%d1
00021ca2 		divull %d1,%d2,%d2
00021ca6 		bnes 00021c7a <bucleMain+0xb3e>
00021ca8 		movel %a0,%sp@-
00021caa 		jsr 00022506 <output>
00021cb0 		tstl %a3
00021cb2 		beqw 00022404 <bucleMain+0x12c8>
00021cb6 		tstb %a3@
00021cb8 		beqw 00022404 <bucleMain+0x12c8>
00021cbc 		moveal %a3,%a0
00021cbe 		moveb %a0@+,%d2
00021cc0 		moveb %d2,%d1
00021cc2 		moveq #19,%d0
00021cc4 		trap #15
00021cc6 		tstb %a0@
00021cc8 		bnes 00021cbe <bucleMain+0xb82>
				output(" ms\r\n\r\n");													// 	Retorno de carro y salto de línea
				break;
00021cca 		braw 00022404 <bucleMain+0x12c8>
00021cce 		lea 000246eb <_etext+0x4a9>,%a0
00021cd4 		lea 00024800 <_etext+0x5be>,%a5
00021cda 		tstl %a0
00021cdc 		beqs 00021cee <bucleMain+0xbb2>
00021cde 		tstb %a0@
00021ce0 		beqs 00021cee <bucleMain+0xbb2>
00021ce2 		moveb %a0@+,%d2
00021ce4 		moveb %d2,%d1
00021ce6 		moveq #19,%d0
00021ce8 		trap #15
00021cea 		tstb %a0@
00021cec 		bnes 00021ce2 <bucleMain+0xba6>
			case '6':															// Si pulsamos 6
				output("		Pulse 1 para distribución lineal\r\n		Pulse 2 para distribución logarítmica");	//	Imprime mensaje
				switch (teclado()) {
00021cee 		moveal %d5,%a0
00021cf0 		jsr %a0@
00021cf2 		extbl %d0
00021cf4 		moveq #49,%d1
00021cf6 		cmpl %d0,%d1
00021cf8 		beqs 00021d06 <bucleMain+0xbca>
00021cfa 		moveq #50,%d2
00021cfc 		cmpl %d0,%d2
00021cfe 		beqw 00021e2c <bucleMain+0xcf0>
00021d02 		braw 00021fca <bucleMain+0xe8e>
00021d06 		lea 00024737 <_etext+0x4f5>,%a0
00021d0c 		movel #144048,%d6
00021d12 		movel #145244,%d7
00021d18 		lea 00024740 <_etext+0x4fe>,%a2
00021d1e 		tstl %a0
00021d20 		beqs 00021d32 <bucleMain+0xbf6>
00021d22 		tstb %a0@
00021d24 		beqs 00021d32 <bucleMain+0xbf6>
00021d26 		moveb %a0@+,%d2
00021d28 		moveb %d2,%d1
00021d2a 		moveq #19,%d0
00021d2c 		trap #15
00021d2e 		tstb %a0@
00021d30 		bnes 00021d26 <bucleMain+0xbea>
					case '1':
						output("\r\n			1\r\n");
						escala = 1;
00021d32 		moveq #1,%d3
00021d34 		movel %d3,00030140 <escala>
						salto = (0.1 * (f_max - f_min)/(n_frecs - 1));								// 	"salto" es la distancia entre frecuencias
00021d3a 		movel 00030134 <f_max>,%d2
00021d40 		subl 00030130 <f_min>,%d2
00021d46 		movel %d2,%sp@-
00021d48 		jsr 00024028 <__floatsidf>
00021d4e 		addql #4,%sp
00021d50 		tstl %d2
00021d52 		bges 00021d6a <bucleMain+0xc2e>
00021d54 		clrl %sp@-
00021d56 		movel #1106247680,%sp@-
00021d5c 		movel %d1,%sp@-
00021d5e 		movel %d0,%sp@-
00021d60 		jsr 00022c38 <__adddf3>
00021d66 		lea %sp@(16),%sp
00021d6a 		movel #-1717986918,%sp@-
00021d70 		movel #1069128089,%sp@-
00021d76 		movel %d1,%sp@-
00021d78 		movel %d0,%sp@-
00021d7a 		jsr 000230c8 <__muldf3>
00021d80 		lea %sp@(16),%sp
00021d84 		movel %d0,%d3
00021d86 		movel %d1,%d4
00021d88 		movel 00030128 <n_frecs>,%d2
00021d8e 		subql #1,%d2
00021d90 		movel %d2,%sp@-
00021d92 		jsr 00024028 <__floatsidf>
00021d98 		addql #4,%sp
00021d9a 		tstl %d2
00021d9c 		bges 00021db4 <bucleMain+0xc78>
00021d9e 		clrl %sp@-
00021da0 		movel #1106247680,%sp@-
00021da6 		movel %d1,%sp@-
00021da8 		movel %d0,%sp@-
00021daa 		jsr 00022c38 <__adddf3>
00021db0 		lea %sp@(16),%sp
00021db4 		movel %d1,%sp@-
00021db6 		movel %d0,%sp@-
00021db8 		movel %d4,%sp@-
00021dba 		movel %d3,%sp@-
00021dbc 		moveal %d6,%a0
00021dbe 		jsr %a0@
00021dc0 		lea %sp@(16),%sp
00021dc4 		movel %d1,%sp@-
00021dc6 		movel %d0,%sp@-
00021dc8 		moveal %d7,%a1
00021dca 		jsr %a1@
00021dcc 		movel %d0,0003013c <salto>
						for (k_lin = 1; k_lin < n_frecs - 1; k_lin++) {								// 	Para cada frecuencia
00021dd2 		moveq #1,%d1
00021dd4 		movel %d1,000309ea <k_lin>
00021dda 		movel 00030128 <n_frecs>,%d1
00021de0 		subql #1,%d1
00021de2 		moveq #1,%d2
00021de4 		cmpl %d1,%d2
00021de6 		bccs 00021e0e <bucleMain+0xcd2>
00021de8 		lea 0003014c <pasos>,%a0
00021dee 		movel %d0,%d3
00021df0 		movel %d1,%d4
							pasos[k_lin] = (pasos[0] + k_lin * salto);							// 		Rellenamos el array pasos con su valor correspondiente
00021df2 		movel %d2,%d1
00021df4 		movel %d2,%d0
00021df6 		mulsl %d3,%d0
00021dfa 		addl %a0@,%d0
00021dfc 		movel %d0,%a0@(00000000,%d2:l:4)
00021e00 		addql #1,%d2
00021e02 		addql #1,%d1
00021e04 		cmpl %d1,%d4
00021e06 		bhis 00021df2 <bucleMain+0xcb6>
00021e08 		movel %d2,000309ea <k_lin>
00021e0e 		tstl %a2
00021e10 		beqw 00021fe4 <bucleMain+0xea8>
00021e14 		tstb %a2@
00021e16 		beqw 00021fe4 <bucleMain+0xea8>
00021e1a 		moveal %a2,%a0
00021e1c 		moveb %a0@+,%d2
00021e1e 		moveb %d2,%d1
00021e20 		moveq #19,%d0
00021e22 		trap #15
00021e24 		tstb %a0@
00021e26 		bnes 00021e1c <bucleMain+0xce0>
						}
						output("		Distribución de frecuencias: lineal");
						break;
00021e28 		braw 00021fe4 <bucleMain+0xea8>
00021e2c 		lea 00024766 <_etext+0x524>,%a0
00021e32 		lea 00030804 <logs>,%a2
00021e38 		lea 0002476f <_etext+0x52d>,%a1
00021e3e 		lea 000247d4 <_etext+0x592>,%a4
00021e44 		tstl %a0
00021e46 		beqs 00021e58 <bucleMain+0xd1c>
00021e48 		tstb %a0@
00021e4a 		beqs 00021e58 <bucleMain+0xd1c>
00021e4c 		moveb %a0@+,%d2
00021e4e 		moveb %d2,%d1
00021e50 		moveq #19,%d0
00021e52 		trap #15
00021e54 		tstb %a0@
00021e56 		bnes 00021e4c <bucleMain+0xd10>
					case '2':
						output("\r\n			2\r\n");
						escala = 2;
00021e58 		moveq #2,%d3
00021e5a 		movel %d3,00030140 <escala>
						if (n_frecs < 7) {
00021e60 		moveq #6,%d0
00021e62 		cmpl 00030128 <n_frecs>,%d0
00021e68 		bcss 00021e9c <bucleMain+0xd60>
00021e6a 		lea 000244e0 <_etext+0x29e>,%a0
00021e70 		tstl %a0
00021e72 		beqs 00021e84 <bucleMain+0xd48>
00021e74 		tstb %a0@
00021e76 		beqs 00021e84 <bucleMain+0xd48>
00021e78 		moveb %a0@+,%d2
00021e7a 		moveb %d2,%d1
00021e7c 		moveq #19,%d0
00021e7e 		trap #15
00021e80 		tstb %a0@
00021e82 		bnes 00021e78 <bucleMain+0xd3c>
							output("			Para la distribución logarítmica, el mínimo número de frecuencias es de 7 frecuencias: n_frecs se fijará en 7 frecuencias\r\n");
							n_frecs = 7;
00021e84 		moveq #7,%d1
00021e86 		movel %d1,00030128 <n_frecs>
							t_comp = t_barrido/7;
00021e8c 		movel 0003012c <t_barrido>,%d2
00021e92 		divull %d1,%d2,%d2
00021e96 		movel %d2,00030138 <t_comp>
00021e9c 		tstl %a1
00021e9e 		beqs 00021eb2 <bucleMain+0xd76>
00021ea0 		tstb %a1@
00021ea2 		beqs 00021eb2 <bucleMain+0xd76>
00021ea4 		moveal %a1,%a0
00021ea6 		moveb %a0@+,%d2
00021ea8 		moveb %d2,%d1
00021eaa 		moveq #19,%d0
00021eac 		trap #15
00021eae 		tstb %a0@
00021eb0 		bnes 00021ea6 <bucleMain+0xd6a>
						}
						output("			Para la distribución logarítmica, la frecuencia mínima se fijará a 100 Hz y la máxima a 1900 Hz\r\n");
						f_min = 100;
00021eb2 		moveq #100,%d3
00021eb4 		movel %d3,00030130 <f_min>
						f_max = 1900;
00021eba 		moveaw #1900,%a0
00021ebe 		movel %a0,00030134 <f_max>
						pasoLogs = logs[n_frecs - 7];
00021ec4 		movel 00030128 <n_frecs>,%d0
00021eca 		moveal %a2@(ffffffe4,%d0:l:4),%a2
00021ece 		movel %a2,00030a0c <pasoLogs>
						pasos[0] = f_min * 0.1;
00021ed4 		moveq #10,%d1
00021ed6 		movel %d1,0003014c <pasos>
						pasos[n_frecs - 1] = f_max * 0.1;
00021edc 		moveaw #190,%a1
00021ee0 		lea 0003014c <pasos>,%a0
00021ee6 		movel %a1,%a0@(fffffffc,%d0:l:4)
						for (k_log = 1; k_log < n_frecs; k_log++) {
00021eea 		moveq #1,%d1
00021eec 		movel %d1,000309da <k_log>
00021ef2 		cmpl %d0,%d1
00021ef4 		bccw 00021fb2 <bucleMain+0xe76>
00021ef8 		moveal 00030130 <f_min>,%a2
00021efe 		lea 000230c8 <__muldf3>,%a3
							pasos[k_log] = f_min * 0.1 * pasoLogs;
00021f04 		movel 000309da <k_log>,%d4
00021f0a 		lsll #2,%d4
00021f0c 		movel %a2,%sp@-
00021f0e 		jsr 00024028 <__floatsidf>
00021f14 		addql #4,%sp
00021f16 		tstl %a2
00021f18 		bges 00021f30 <bucleMain+0xdf4>
00021f1a 		clrl %sp@-
00021f1c 		movel #1106247680,%sp@-
00021f22 		movel %d1,%sp@-
00021f24 		movel %d0,%sp@-
00021f26 		jsr 00022c38 <__adddf3>
00021f2c 		lea %sp@(16),%sp
00021f30 		movel #-1717986918,%sp@-
00021f36 		movel #1069128089,%sp@-
00021f3c 		movel %d1,%sp@-
00021f3e 		movel %d0,%sp@-
00021f40 		jsr %a3@
00021f42 		lea %sp@(16),%sp
00021f46 		movel %d0,%d2
00021f48 		movel %d1,%d3
00021f4a 		moveal 00030a0c <pasoLogs>,%a0
00021f50 		movel %a0,%sp@-
00021f52 		jsr 000240c8 <__extendsfdf2>
00021f58 		addql #4,%sp
00021f5a 		movel %d1,%sp@-
00021f5c 		movel %d0,%sp@-
00021f5e 		movel %d3,%sp@-
00021f60 		movel %d2,%sp@-
00021f62 		jsr %a3@
00021f64 		lea %sp@(16),%sp
00021f68 		movel %d1,%sp@-
00021f6a 		movel %d0,%sp@-
00021f6c 		jsr 000241a2 <__fixdfsi>
00021f72 		addql #8,%sp
00021f74 		lea 0003014c <pasos>,%a1
00021f7a 		movel %d0,%a1@(00000000,%d4:l)
							pasoLogs *= pasoLogs;
00021f7e 		movel 00030a0c <pasoLogs>,%d0
00021f84 		movel %d0,%sp@-
00021f86 		movel %d0,%sp@-
00021f88 		jsr 00023af8 <__mulsf3>
00021f8e 		addql #8,%sp
00021f90 		movel %d0,00030a0c <pasoLogs>
00021f96 		movel 000309da <k_log>,%d0
00021f9c 		movel %d0,%d1
00021f9e 		addql #1,%d1
00021fa0 		movel %d1,000309da <k_log>
00021fa6 		addql #1,%d0
00021fa8 		cmpl 00030128 <n_frecs>,%d0
00021fae 		bcsw 00021f04 <bucleMain+0xdc8>
00021fb2 		tstl %a4
00021fb4 		beqs 00021fe4 <bucleMain+0xea8>
00021fb6 		tstb %a4@
00021fb8 		beqs 00021fe4 <bucleMain+0xea8>
00021fba 		moveal %a4,%a0
00021fbc 		moveb %a0@+,%d2
00021fbe 		moveb %d2,%d1
00021fc0 		moveq #19,%d0
00021fc2 		trap #15
00021fc4 		tstb %a0@
00021fc6 		bnes 00021fbc <bucleMain+0xe80>
						}
						output("		Distribución de frecuencias: logarítmica");
						break;
00021fc8 		bras 00021fe4 <bucleMain+0xea8>
00021fca 		lea 000247ff <_etext+0x5bd>,%a0
00021fd0 		tstl %a0
00021fd2 		beqs 00021fe4 <bucleMain+0xea8>
00021fd4 		tstb %a0@
00021fd6 		beqs 00021fe4 <bucleMain+0xea8>
00021fd8 		moveb %a0@+,%d2
00021fda 		moveb %d2,%d1
00021fdc 		moveq #19,%d0
00021fde 		trap #15
00021fe0 		tstb %a0@
00021fe2 		bnes 00021fd8 <bucleMain+0xe9c>
00021fe4 		tstl %a5
00021fe6 		beqw 00022404 <bucleMain+0x12c8>
00021fea 		tstb %a5@
00021fec 		beqw 00022404 <bucleMain+0x12c8>
00021ff0 		moveal %a5,%a0
00021ff2 		moveb %a0@+,%d2
00021ff4 		moveb %d2,%d1
00021ff6 		moveq #19,%d0
00021ff8 		trap #15
00021ffa 		tstb %a0@
00021ffc 		bnes 00021ff2 <bucleMain+0xeb6>
					default:
						output("");
				}
				output("\r\n\r\n");													// 	Retorno de carro y salto de línea
				break;
00021ffe 		braw 00022404 <bucleMain+0x12c8>
			case '7':															// Si pulsamos 7
				if (scroll >	0) {
00022002 		tstl 00030148 <scroll>
00022008 		beqw 000222aa <bucleMain+0x116e>
					LCD_reset();
0002200c 		jsr %pc@(000205e0 <LCD_reset>)
					LCD_init();
00022010 		jsr %pc@(000204dc <LCD_init>)
					LCD_inst(CLR_DISP);												// 	Limpiamos display
00022014 		movew #256,%d1
00022018 		movel #384,%d0
0002201e 		movew %d0,000309d8 <puertoS>
00022024 		movew %d0,40000000 <_end+0x3ffcf5f0>
0002202a 		movel #8248,%d0
00022030 		lea 00024800 <_etext+0x5be>,%a5
00022036 		subql #1,%d0
00022038 		moveq #-1,%d2
0002203a 		cmpl %d0,%d2
0002203c 		bnes 00022036 <bucleMain+0xefa>
0002203e 		movew %d1,000309d8 <puertoS>
00022044 		movew %d1,40000000 <_end+0x3ffcf5f0>
0002204a 		movel #8248,%d0
00022050 		subql #1,%d0
00022052 		moveq #-1,%d3
00022054 		cmpl %d0,%d3
00022056 		bnes 00022050 <bucleMain+0xf14>
					LCD_inst(LIN_1LCD);												//	 Movemos el cursor a la 1ª línea
00022058 		movew #-32768,%d1
0002205c 		movel #32896,%d0
00022062 		movew %d0,000309d8 <puertoS>
00022068 		movew %d0,40000000 <_end+0x3ffcf5f0>
0002206e 		movel #8248,%d0
00022074 		subql #1,%d0
00022076 		moveq #-1,%d2
00022078 		cmpl %d0,%d2
0002207a 		bnes 00022074 <bucleMain+0xf38>
0002207c 		movew %d1,000309d8 <puertoS>
00022082 		movew %d1,40000000 <_end+0x3ffcf5f0>
00022088 		movel #8248,%d0
0002208e 		subql #1,%d0
00022090 		moveq #-1,%d3
00022092 		cmpl %d0,%d3
00022094 		bnes 0002208e <bucleMain+0xf52>
				
					while(*frecuencia) {												//	 Imprime el mensaje frecuencia en el display
00022096 		movel 0003094c <frecuencia>,%d0
0002209c 		moveal %d0,%a0
0002209e 		tstb %a0@
000220a0 		beqs 0002210a <bucleMain+0xfce>
						LCD_dato(*frecuencia++); 										//	 carácter a carácter
000220a2 		moveb %a0@,%d1
000220a4 		extw %d1
000220a6 		moveq #1,%d0
000220a8 		addl %d0,0003094c <frecuencia>
000220ae 		movel %d1,%d0
000220b0 		lsll #8,%d0
000220b2 		movew %d0,%d1
000220b4 		oril #192,%d0
000220ba 		movew %d0,000309d8 <puertoS>
000220c0 		movew %d0,40000000 <_end+0x3ffcf5f0>
000220c6 		movel #8248,%d0
000220cc 		subql #1,%d0
000220ce 		moveq #-1,%d2
000220d0 		cmpl %d0,%d2
000220d2 		bnes 000220cc <bucleMain+0xf90>
000220d4 		moveq #64,%d0
000220d6 		orl %d1,%d0
000220d8 		movew %d0,000309d8 <puertoS>
000220de 		movew %d0,40000000 <_end+0x3ffcf5f0>
000220e4 		movel #8248,%d0
000220ea 		subql #1,%d0
000220ec 		moveq #-1,%d3
000220ee 		cmpl %d0,%d3
000220f0 		bnes 000220ea <bucleMain+0xfae>
000220f2 		movel #137498,%d0
000220f8 		moveal 0003094c <frecuencia>,%a0
000220fe 		subql #1,%d0
00022100 		moveq #-1,%d1
00022102 		cmpl %d0,%d1
00022104 		bnes 000220fe <bucleMain+0xfc2>
						retardo(RET_50MS);											//	 Mantenemos el mensaje 1 segundo
					}
00022106 		tstb %a0@
00022108 		bnes 000220a2 <bucleMain+0xf66>
					while(*frecuencia_a) {												//	 Imprime la frecuencia en el display
0002210a 		movel 000309fc <frecuencia_a>,%d0
00022110 		moveal %d0,%a0
00022112 		tstb %a0@
00022114 		beqs 0002217e <bucleMain+0x1042>
						LCD_dato(*frecuencia_a++);	 									// 	carácter a carácter
00022116 		moveb %a0@,%d1
00022118 		extw %d1
0002211a 		moveq #1,%d2
0002211c 		addl %d2,000309fc <frecuencia_a>
00022122 		movel %d1,%d0
00022124 		lsll #8,%d0
00022126 		movew %d0,%d1
00022128 		oril #192,%d0
0002212e 		movew %d0,000309d8 <puertoS>
00022134 		movew %d0,40000000 <_end+0x3ffcf5f0>
0002213a 		movel #8248,%d0
00022140 		subql #1,%d0
00022142 		moveq #-1,%d3
00022144 		cmpl %d0,%d3
00022146 		bnes 00022140 <bucleMain+0x1004>
00022148 		moveq #64,%d0
0002214a 		orl %d1,%d0
0002214c 		movew %d0,000309d8 <puertoS>
00022152 		movew %d0,40000000 <_end+0x3ffcf5f0>
00022158 		movel #8248,%d0
0002215e 		subql #1,%d0
00022160 		moveq #-1,%d1
00022162 		cmpl %d0,%d1
00022164 		bnes 0002215e <bucleMain+0x1022>
00022166 		movel #137498,%d0
0002216c 		moveal 000309fc <frecuencia_a>,%a0
00022172 		subql #1,%d0
00022174 		moveq #-1,%d2
00022176 		cmpl %d0,%d2
00022178 		bnes 00022172 <bucleMain+0x1036>
						retardo(RET_50MS);											// 	Mantenemos el mensaje 1 segundo
					}
0002217a 		tstb %a0@
0002217c 		bnes 00022116 <bucleMain+0xfda>
				
					LCD_inst(LIN_2LCD);												//	 Movemos el cursor a la 2ª línea
0002217e 		movew #-16384,%d1
00022182 		movel #49280,%d0
00022188 		movew %d0,000309d8 <puertoS>
0002218e 		movew %d0,40000000 <_end+0x3ffcf5f0>
00022194 		movel #8248,%d0
0002219a 		subql #1,%d0
0002219c 		moveq #-1,%d3
0002219e 		cmpl %d0,%d3
000221a0 		bnes 0002219a <bucleMain+0x105e>
000221a2 		movew %d1,000309d8 <puertoS>
000221a8 		movew %d1,40000000 <_end+0x3ffcf5f0>
000221ae 		movel #8248,%d0
000221b4 		subql #1,%d0
000221b6 		moveq #-1,%d1
000221b8 		cmpl %d0,%d1
000221ba 		bnes 000221b4 <bucleMain+0x1078>
					while(*dft) {													//	 Imprime el mensaje módulo de la dft en el display
000221bc 		movel 00030958 <dft>,%d0
000221c2 		moveal %d0,%a0
000221c4 		tstb %a0@
000221c6 		beqs 00022230 <bucleMain+0x10f4>
						LCD_dato(*dft++); 											//	 carácter a carácter
000221c8 		moveb %a0@,%d1
000221ca 		extw %d1
000221cc 		moveq #1,%d2
000221ce 		addl %d2,00030958 <dft>
000221d4 		movel %d1,%d0
000221d6 		lsll #8,%d0
000221d8 		movew %d0,%d1
000221da 		oril #192,%d0
000221e0 		movew %d0,000309d8 <puertoS>
000221e6 		movew %d0,40000000 <_end+0x3ffcf5f0>
000221ec 		movel #8248,%d0
000221f2 		subql #1,%d0
000221f4 		moveq #-1,%d3
000221f6 		cmpl %d0,%d3
000221f8 		bnes 000221f2 <bucleMain+0x10b6>
000221fa 		moveq #64,%d0
000221fc 		orl %d1,%d0
000221fe 		movew %d0,000309d8 <puertoS>
00022204 		movew %d0,40000000 <_end+0x3ffcf5f0>
0002220a 		movel #8248,%d0
00022210 		subql #1,%d0
00022212 		moveq #-1,%d1
00022214 		cmpl %d0,%d1
00022216 		bnes 00022210 <bucleMain+0x10d4>
00022218 		movel #137498,%d0
0002221e 		moveal 00030958 <dft>,%a0
00022224 		subql #1,%d0
00022226 		moveq #-1,%d2
00022228 		cmpl %d0,%d2
0002222a 		bnes 00022224 <bucleMain+0x10e8>
						retardo(RET_50MS);											//	 Mantenemos el mensaje 1 segundo
					}
0002222c 		tstb %a0@
0002222e 		bnes 000221c8 <bucleMain+0x108c>
					while(*dft_a) {													//	 Imprime el módulo de la dft en el display
00022230 		movel 00030954 <dft_a>,%d0
00022236 		moveal %d0,%a0
00022238 		tstb %a0@
0002223a 		beqw 000223d2 <bucleMain+0x1296>
						LCD_dato(*dft_a++); 											// 	carácter a carácter
0002223e 		moveb %a0@,%d1
00022240 		extw %d1
00022242 		moveq #1,%d3
00022244 		addl %d3,00030954 <dft_a>
0002224a 		movel %d1,%d0
0002224c 		lsll #8,%d0
0002224e 		movew %d0,%d1
00022250 		oril #192,%d0
00022256 		movew %d0,000309d8 <puertoS>
0002225c 		movew %d0,40000000 <_end+0x3ffcf5f0>
00022262 		movel #8248,%d0
00022268 		subql #1,%d0
0002226a 		moveq #-1,%d2
0002226c 		cmpl %d0,%d2
0002226e 		bnes 00022268 <bucleMain+0x112c>
00022270 		moveq #64,%d0
00022272 		orl %d1,%d0
00022274 		movew %d0,000309d8 <puertoS>
0002227a 		movew %d0,40000000 <_end+0x3ffcf5f0>
00022280 		movel #8248,%d0
00022286 		subql #1,%d0
00022288 		moveq #-1,%d3
0002228a 		cmpl %d0,%d3
0002228c 		bnes 00022286 <bucleMain+0x114a>
0002228e 		movel #137498,%d0
00022294 		moveal 00030954 <dft_a>,%a0
0002229a 		subql #1,%d0
0002229c 		moveq #-1,%d1
0002229e 		cmpl %d0,%d1
000222a0 		bnes 0002229a <bucleMain+0x115e>
						retardo(RET_50MS);											//	 Mantenemos el mensaje 1 segundo
					}
000222a2 		tstb %a0@
000222a4 		bnes 0002223e <bucleMain+0x1102>
				} else {
000222a6 		braw 000223d2 <bucleMain+0x1296>
000222aa 		lea 00024805 <_etext+0x5c3>,%a0
000222b0 		lea 00024800 <_etext+0x5be>,%a5
000222b6 		lea %pc@(000205e0 <LCD_reset>),%a1
000222ba 		lea %pc@(000204dc <LCD_init>),%a2
000222be 		tstl %a0
000222c0 		beqs 000222d2 <bucleMain+0x1196>
000222c2 		tstb %a0@
000222c4 		beqs 000222d2 <bucleMain+0x1196>
000222c6 		moveb %a0@+,%d2
000222c8 		moveb %d2,%d1
000222ca 		moveq #19,%d0
000222cc 		trap #15
000222ce 		tstb %a0@
000222d0 		bnes 000222c6 <bucleMain+0x118a>
					output("No hay datos anteriores almacenados");
					err = "Error";
000222d2 		movel #148092,%d2
000222d8 		movel %d2,00030144 <err>
					LCD_reset();
000222de 		jsr %a1@
					LCD_init();
000222e0 		jsr %a2@
					LCD_inst(CLR_DISP);												// 	Limpiamos display
000222e2 		movew #256,%d1
000222e6 		movel #384,%d0
000222ec 		movew %d0,000309d8 <puertoS>
000222f2 		movew %d0,40000000 <_end+0x3ffcf5f0>
000222f8 		movel #8248,%d0
000222fe 		subql #1,%d0
00022300 		moveq #-1,%d3
00022302 		cmpl %d0,%d3
00022304 		bnes 000222fe <bucleMain+0x11c2>
00022306 		movew %d1,000309d8 <puertoS>
0002230c 		movew %d1,40000000 <_end+0x3ffcf5f0>
00022312 		movel #8248,%d0
00022318 		subql #1,%d0
0002231a 		moveq #-1,%d1
0002231c 		cmpl %d0,%d1
0002231e 		bnes 00022318 <bucleMain+0x11dc>
					LCD_inst(LIN_1LCD);												//	 Movemos el cursor a la 1ª línea
00022320 		movew #-32768,%d1
00022324 		movel #32896,%d0
0002232a 		movew %d0,000309d8 <puertoS>
00022330 		movew %d0,40000000 <_end+0x3ffcf5f0>
00022336 		movel #8248,%d0
0002233c 		subql #1,%d0
0002233e 		moveq #-1,%d2
00022340 		cmpl %d0,%d2
00022342 		bnes 0002233c <bucleMain+0x1200>
00022344 		movew %d1,000309d8 <puertoS>
0002234a 		movew %d1,40000000 <_end+0x3ffcf5f0>
00022350 		movel #8248,%d0
00022356 		subql #1,%d0
00022358 		moveq #-1,%d3
0002235a 		cmpl %d0,%d3
0002235c 		bnes 00022356 <bucleMain+0x121a>
				
					while(*err) {													//	 Imprime el mensaje de error en el display
0002235e 		movel 00030144 <err>,%d0
00022364 		moveal %d0,%a0
00022366 		tstb %a0@
00022368 		beqs 000223d2 <bucleMain+0x1296>
						LCD_dato(*err++); 											//	 carácter a carácter
0002236a 		moveb %a0@,%d1
0002236c 		extw %d1
0002236e 		moveq #1,%d0
00022370 		addl %d0,00030144 <err>
00022376 		movel %d1,%d0
00022378 		lsll #8,%d0
0002237a 		movew %d0,%d1
0002237c 		oril #192,%d0
00022382 		movew %d0,000309d8 <puertoS>
00022388 		movew %d0,40000000 <_end+0x3ffcf5f0>
0002238e 		movel #8248,%d0
00022394 		subql #1,%d0
00022396 		moveq #-1,%d2
00022398 		cmpl %d0,%d2
0002239a 		bnes 00022394 <bucleMain+0x1258>
0002239c 		moveq #64,%d0
0002239e 		orl %d1,%d0
000223a0 		movew %d0,000309d8 <puertoS>
000223a6 		movew %d0,40000000 <_end+0x3ffcf5f0>
000223ac 		movel #8248,%d0
000223b2 		subql #1,%d0
000223b4 		moveq #-1,%d3
000223b6 		cmpl %d0,%d3
000223b8 		bnes 000223b2 <bucleMain+0x1276>
000223ba 		movel #137498,%d0
000223c0 		moveal 00030144 <err>,%a0
000223c6 		subql #1,%d0
000223c8 		moveq #-1,%d1
000223ca 		cmpl %d0,%d1
000223cc 		bnes 000223c6 <bucleMain+0x128a>
						retardo(RET_50MS);											//	 Mantenemos el mensaje 1 segundo
					}
000223ce 		tstb %a0@
000223d0 		bnes 0002236a <bucleMain+0x122e>
000223d2 		tstl %a5
000223d4 		beqs 00022404 <bucleMain+0x12c8>
000223d6 		tstb %a5@
000223d8 		beqs 00022404 <bucleMain+0x12c8>
000223da 		moveal %a5,%a0
000223dc 		moveb %a0@+,%d2
000223de 		moveb %d2,%d1
000223e0 		moveq #19,%d0
000223e2 		trap #15
000223e4 		tstb %a0@
000223e6 		bnes 000223dc <bucleMain+0x12a0>
				}
				output("\r\n\r\n");													// 	Retorno de carro y salto de línea
				break;	
000223e8 		bras 00022404 <bucleMain+0x12c8>
000223ea 		lea 000247ff <_etext+0x5bd>,%a0
000223f0 		tstl %a0
000223f2 		beqs 00022404 <bucleMain+0x12c8>
000223f4 		tstb %a0@
000223f6 		beqs 00022404 <bucleMain+0x12c8>
000223f8 		moveb %a0@+,%d2
000223fa 		moveb %d2,%d1
000223fc 		moveq #19,%d0
000223fe 		trap #15
00022400 		tstb %a0@
00022402 		bnes 000223f8 <bucleMain+0x12bc>
00022404 		movel #149545,%d2
0002240a 		beqs 00022422 <bucleMain+0x12e6>
0002240c 		tstb 00024829 <_etext+0x5e7>
00022412 		beqs 00022422 <bucleMain+0x12e6>
00022414 		moveal %d2,%a0
00022416 		moveb %a0@+,%d2
00022418 		moveb %d2,%d1
0002241a 		moveq #19,%d0
0002241c 		trap #15
0002241e 		tstb %a0@
00022420 		bnes 00022416 <bucleMain+0x12da>
			default:															// Si pulsamos cualquier otra tecla
				output("");														//	Sale del menú
		}
		output("\r\nPulse F para acceder al menú\r\n\r\n");											// Imprime el mensaje de como abrir el menú
	}
}
00022422 		moveml %fp@(-72),%d2-%d7/%a2-%a5
00022428 		unlk %fp
0002242a 		rts
0002242c <_exit>	linkw %fp,#0
00022430 		moveb #0,%d1
00022434 		moveq #0,%d0
00022436 		trap #15
00022438 		unlk %fp
0002243a 		rts
0002243c <inch>	linkw %fp,#0
00022440 		movel %d2,%sp@-
00022442 		moveq #16,%d0
00022444 		trap #15
00022446 		movel %d1,%d2
00022448 		moveb %d2,%d0
0002244a 		extbl %d0
0002244c 		movel %sp@+,%d2
0002244e 		unlk %fp
00022450 		rts
00022452 <inche>	linkw %fp,#0
00022456 		movel %d2,%sp@-
00022458 		moveq #16,%d0
0002245a 		trap #15
0002245c 		movel %d1,%d2
0002245e 		extbl %d2
00022460 		movel %d2,%sp@-
00022462 		jsr 00022472 <outch>
00022468 		movel %d2,%d0
0002246a 		movel %fp@(-4),%d2
0002246e 		unlk %fp
00022470 		rts
00022472 <outch>	linkw %fp,#0
00022476 		movel %d2,%sp@-
00022478 		moveb %fp@(11),%d2
0002247c 		moveb %d2,%d1
0002247e 		moveq #19,%d0
00022480 		trap #15
00022482 		movel %sp@+,%d2
00022484 		unlk %fp
00022486 		rts
00022488 <outNum>	linkw %fp,#-32
0002248c 		lea %sp@(-20),%sp
00022490 		moveml %d2-%d5/%a2,%sp@
00022494 		movel %fp@(8),%d3
00022498 		movel %fp@(12),%d4
0002249c 		movel %fp@(16),%d0
000224a0 		moveb %d0,%d5
000224a2 		lea 00024242 <_etext>,%a2
000224a8 		lea 00024253 <_etext+0x11>,%a1
000224ae 		moveq #1,%d1
000224b0 		andl %d1,%d0
000224b2 		tstb %d0
000224b4 		bnes 000224c8 <outNum+0x40>
000224b6 		tstl %d4
000224b8 		bges 000224c8 <outNum+0x40>
000224ba 		moveq #45,%d2
000224bc 		moveb %d2,%d1
000224be 		moveq #19,%d0
000224c0 		trap #15
000224c2 		movel %d4,%d2
000224c4 		negl %d2
000224c6 		bras 000224ca <outNum+0x42>
000224c8 		movel %d4,%d2
000224ca 		lea %fp@(-1),%a0
000224ce 		clrb %a0@
000224d0 		moveq #2,%d4
000224d2 		andl %d5,%d4
000224d4 		tstb %d4
000224d6 		beqs 000224e4 <outNum+0x5c>
000224d8 		movel %d2,%d1
000224da 		divull %d3,%d0,%d1
000224de 		moveb %a1@(00000000,%d0:l),%a0@-
000224e2 		bras 000224ee <outNum+0x66>
000224e4 		movel %d2,%d1
000224e6 		divull %d3,%d0,%d1
000224ea 		moveb %a2@(00000000,%d0:l),%a0@-
000224ee 		divull %d3,%d2,%d2
000224f2 		bnes 000224d4 <outNum+0x4c>
000224f4 		movel %a0,%sp@-
000224f6 		jsr 00022506 <output>
000224fc 		moveml %fp@(-52),%d2-%d5/%a2
00022502 		unlk %fp
00022504 		rts
00022506 <output>	linkw %fp,#0
0002250a 		movel %d2,%sp@-
0002250c 		moveal %fp@(8),%a0
00022510 		tstl %a0
00022512 		beqs 00022524 <output+0x1e>
00022514 		tstb %a0@
00022516 		beqs 00022524 <output+0x1e>
00022518 		moveb %a0@+,%d2
0002251a 		moveb %d2,%d1
0002251c 		moveq #19,%d0
0002251e 		trap #15
00022520 		tstb %a0@
00022522 		bnes 00022518 <output+0x12>
00022524 		movel %sp@+,%d2
00022526 		unlk %fp
00022528 		rts
0002252a <retardo>	linkw %fp,#0
0002252e 		moveal %fp@(8),%a0
00022532 		lea %a0@(00000000,%a0:l:4),%a1
00022536 		lea %a0@(00000000,%a1:l:2),%a1
0002253a 		movel %a1,%d0
0002253c 		lsll #2,%d0
0002253e 		moveq #-32,%d1
00022540 		addl %d1,%d0
00022542 		lsrl #4,%d0
00022544 		subql #1,%d0
00022546 		moveq #-1,%d1
00022548 		cmpl %d0,%d1
0002254a 		bnes 00022544 <retardo+0x1a>
0002254c 		unlk %fp
0002254e 		rts
00022550 <_strlen>	linkw %fp,#0
00022554 		clrl %d0
00022556 		moveal %fp@(8),%a0
0002255a 		tstb %a0@+
0002255c 		beqs 00022564 <_strlen+0x14>
0002255e 		addql #1,%d0
00022560 		tstb %a0@+
00022562 		bnes 0002255e <_strlen+0xe>
00022564 		unlk %fp
00022566 		rts
00022568 <memcpy>	linkw %fp,#0
0002256c 		movel %d2,%sp@-
0002256e 		movel %fp@(8),%d0
00022572 		moveal %d0,%a1
00022574 		moveal %fp@(12),%a0
00022578 		movel %fp@(16),%d1
0002257c 		bras 00022580 <memcpy+0x18>
0002257e 		moveb %a0@+,%a1@+
00022580 		subql #1,%d1
00022582 		moveq #-1,%d2
00022584 		cmpl %d1,%d2
00022586 		bnes 0002257e <memcpy+0x16>
00022588 		movel %sp@+,%d2
0002258a 		unlk %fp
0002258c 		rts
0002258e <memset>	linkw %fp,#0
00022592 		movel %d2,%sp@-
00022594 		moveal %fp@(8),%a1
00022598 		movel %fp@(12),%d0
0002259c 		moveal %a1,%a0
0002259e 		movel %fp@(16),%d1
000225a2 		bras 000225a6 <memset+0x18>
000225a4 		moveb %d0,%a0@+
000225a6 		subql #1,%d1
000225a8 		moveq #-1,%d2
000225aa 		cmpl %d1,%d2
000225ac 		bnes 000225a4 <memset+0x16>
  return dst0;
000225ae 		movel %a1,%d0
}
000225b0 		movel %sp@+,%d2
000225b2 		unlk %fp
000225b4 		rts
000225b6 <DAC_ADC_init>	linkw %fp,#0
000225ba 		moveal #268435500,%a0
000225c0 		movew #-32768,%a0@
000225c4 		lea %a0@(84),%a0
000225c8 		movel #8388608,%a0@
000225ce 		lea %a0@(36),%a0
000225d2 		clrw %a0@
000225d4 		addql #8,%a0
000225d6 		movew #-12275,%a0@
000225da 		lea %a0@(-12),%a0
000225de 		movew #-32768,%a0@
000225e2 		unlk %fp
000225e4 		rts
000225e6 <DAC_escribeTxRAM>	linkw %fp,#0
000225ea 		movel %fp@(8),%d0
000225ee 		moveal #268435632,%a0
000225f4 		clrw %a0@
000225f6 		addql #4,%a0
000225f8 		addl %d0,%d0
000225fa 		movew %d0,%a0@
000225fc 		unlk %fp
000225fe 		rts
00022600 <DAC_escribeCommandRAM>	linkw %fp,#0
00022604 		moveal #268435632,%a0
0002260a 		movew #32,%a0@
0002260e 		addql #4,%a0
00022610 		movew #19712,%a0@
00022614 		unlk %fp
00022616 		rts
00022618 <DAC_dato>	linkw %fp,#0
0002261c 		movel %d2,%sp@-
0002261e 		movel %fp@(8),%d1
00022622 		tstb 00030000 <primeraVez.45>
00022628 		bnes 0002263c <DAC_dato+0x24>
0002262a 		moveal #268435628,%a0
00022630 		movew %a0@,%d0
00022632 		moveq #1,%d2
00022634 		andl %d2,%d0
00022636 		tstw %d0
00022638 		beqs 00022630 <DAC_dato+0x18>
0002263a 		bras 00022644 <DAC_dato+0x2c>
0002263c 		clrb %d0
0002263e 		moveb %d0,00030000 <primeraVez.45>
00022644 		moveal #268435628,%a0
0002264a 		movew %a0@,%d0
0002264c 		moveq #1,%d2
0002264e 		orl %d2,%d0
00022650 		movew %d0,%a0@
00022652 		lea %a0@(-12),%a0
00022656 		movew #-32765,%a0@
0002265a 		andil #4095,%d1
00022660 		moveal #268435632,%a1
00022666 		clrw %a1@
00022668 		lea %a0@(20),%a0
0002266c 		addl %d1,%d1
0002266e 		movew %d1,%a0@
00022670 		movew #32,%a1@
00022674 		movew #19712,%a0@
00022678 		lea %a0@(-12),%a0
0002267c 		movew #4096,%a0@
00022680 		subql #4,%a0
00022682 		movew %a0@,%d0
00022684 		oril #32768,%d0
0002268a 		movew %d0,%a0@
0002268c 		movel %sp@+,%d2
0002268e 		unlk %fp
00022690 		rts
00022692 <ADC_escribeTxRAM>	linkw %fp,#0
00022696 		moveal #268435632,%a0
0002269c 		clrw %a0@
0002269e 		addql #4,%a0
000226a0 		movew #-26729,%a0@
000226a4 		clrw %a0@
000226a6 		clrw %a0@
000226a8 		unlk %fp
000226aa 		rts
000226ac <ADC_escribeCommandRAM>	linkw %fp,#0
000226b0 		moveal #268435632,%a0
000226b6 		movew #32,%a0@
000226ba 		addql #4,%a0
000226bc 		movew #-29184,%a0@
000226c0 		movew #-29184,%a0@
000226c4 		movew #3584,%a0@
000226c8 		unlk %fp
000226ca 		rts
000226cc <ADC_leeRxRAM>	linkw %fp,#0
000226d0 		moveal #268435632,%a0
000226d6 		movew #16,%a0@
000226da 		addql #4,%a0
000226dc 		movew %a0@,%d0
000226de 		movew %a0@,%d0
000226e0 		andil #65535,%d0
000226e6 		movew %a0@,%d1
000226e8 		andil #65535,%d1
000226ee 		asrl #3,%d1
000226f0 		lsll #5,%d0
000226f2 		addl %d0,%d1
000226f4 		btst #11,%d1
000226f8 		beqs 00022702 <ADC_leeRxRAM+0x36>
000226fa 		oril #-4096,%d1
00022700 		bras 00022708 <ADC_leeRxRAM+0x3c>
00022702 		andil #4095,%d1
00022708 		movel %d1,%d0
0002270a 		unlk %fp
0002270c 		rts
0002270e <ADC_dato>	linkw %fp,#0
00022712 		moveal #268435616,%a0
00022718 		movew #-32752,%a0@
0002271c 		moveal #268435632,%a1
00022722 		clrw %a1@
00022724 		lea %a0@(20),%a0
00022728 		movew #-26729,%a0@
0002272c 		clrw %a0@
0002272e 		clrw %a0@
00022730 		movew #32,%a1@
00022734 		movew #-29184,%a0@
00022738 		movew #-29184,%a0@
0002273c 		movew #3584,%a0@
00022740 		lea %a0@(-12),%a0
00022744 		movew #4608,%a0@
00022748 		subql #4,%a0
0002274a 		movew %a0@,%d0
0002274c 		oril #32768,%d0
00022752 		movew %d0,%a0@
00022754 		addql #8,%a0
00022756 		movew %a0@,%d0
00022758 		moveq #1,%d1
0002275a 		andl %d1,%d0
0002275c 		tstw %d0
0002275e 		beqs 00022756 <ADC_dato+0x48>
00022760 		moveal #268435628,%a0
00022766 		movew %a0@,%d0
00022768 		orl %d1,%d0
0002276a 		movew %d0,%a0@
0002276c 		addql #4,%a0
0002276e 		movew #16,%a0@
00022772 		addql #4,%a0
00022774 		movew %a0@,%d0
00022776 		movew %a0@,%d0
00022778 		andil #65535,%d0
0002277e 		movew %a0@,%d1
00022780 		andil #65535,%d1
00022786 		asrl #3,%d1
00022788 		lsll #5,%d0
0002278a 		addl %d0,%d1
0002278c 		btst #11,%d1
00022790 		beqs 0002279a <ADC_dato+0x8c>
00022792 		oril #-4096,%d1
00022798 		bras 000227a0 <ADC_dato+0x92>
0002279a 		andil #4095,%d1
000227a0 		movel %d1,%d0
000227a2 		unlk %fp
000227a4 		rts
000227a6 <set_puertoS_H>	linkw %fp,#0
000227aa 		clrl %d1
000227ac 		moveb 000309d9 <puertoS+0x1>,%d1
000227b2 		clrw %d0
000227b4 		moveb %fp@(11),%d0
000227b8 		lsll #8,%d0
000227ba 		orl %d0,%d1
000227bc 		movew %d1,000309d8 <puertoS>
000227c2 		movew %d1,40000000 <_end+0x3ffcf5f0>
000227c8 		unlk %fp
000227ca 		rts
000227cc <set_puertoS>	linkw %fp,#0
000227d0 		movew 000309d8 <puertoS>,%d0
000227d6 		andil #65280,%d0
000227dc 		clrw %d1
000227de 		moveb %fp@(11),%d1
000227e2 		orl %d1,%d0
000227e4 		movew %d0,000309d8 <puertoS>
000227ea 		movew %d0,40000000 <_end+0x3ffcf5f0>
000227f0 		unlk %fp
000227f2 		rts
000227f4 <set16_puertoS>	linkw %fp,#0
000227f8 		movel %fp@(8),%d0
000227fc 		movew %d0,000309d8 <puertoS>
00022802 		movew %d0,40000000 <_end+0x3ffcf5f0>
00022808 		unlk %fp
0002280a 		rts
0002280c <lee16_puertoE>	linkw %fp,#0
00022810 		clrl %d0
00022812 		movew 50000002 <_end+0x4ffcf5f2>,%d0
00022818 		unlk %fp
0002281a 		rts
0002281c <lee_puertoE>	linkw %fp,#0
00022820 		clrl %d0
00022822 		moveb 50000003 <_end+0x4ffcf5f3>,%d0
}
00022828 		unlk %fp
0002282a 		rts

//-------------------------------------------------
// void gpio_setup(void)
// 
// Descripción:
//  Configuración del módulo de entrada/salida de 
//   propósito general del M5272 (GPIO) 
//
//-------------------------------------------------
void gpio_setup(void)
{  
0002282c <gpio_setup>	linkw %fp,#0
  // Configuracion del puerto A
  mbar_writeLong(MCFSIM_PACNT, 0x00000000);	// Puerto A como Puerto IO
00022830 		moveal #268435584,%a0
00022836 		clrl %a0@
  mbar_writeShort(MCFSIM_PADDR, 0x7E80);	// Son todo entradas
00022838 		addql #4,%a0
0002283a 		movew #32384,%a0@

  // Configuracion del puerto B
  // El puerto B comparte los pines Ethernet y la primera UART
  mbar_writeLong(MCFSIM_PBCNT, 0x55554155); 
0002283e 		addql #4,%a0
00022840 		movel #1431650645,%a0@
  mbar_writeShort(MCFSIM_PBDDR, 0x0000); 	// Sólo afecta a PB5 y PB6 (in)
00022846 		addql #4,%a0
00022848 		clrw %a0@
}
0002284a 		unlk %fp
0002284c 		rts

//----------------------------------------------------
//          Rutinas de I/O de los puertos 0 y 1
//----------------------------------------------------
UBYTE lee_puerto1(void)
{
0002284e <lee_puerto1>	linkw %fp,#0
00022852 		movel %d2,%sp@-
  UWORD puerto,mascara;
  puerto=(UWORD)(mbar_readLong(MCFSIM_PADAT)>>16);
00022854 		moveal #268435590,%a0
0002285a 		movel %a0@,%d0
0002285c 		clrw %d0
0002285e 		swap %d0
  mascara=((puerto>>1)&0x80);	// Valor IOPRT 15
00022860 		movel %d0,%d1
00022862 		lsrl #1,%d1
00022864 		andil #128,%d1
  puerto&=0x7F; 		// IO_PORT14-IOPORT8
0002286a 		moveq #127,%d2
0002286c 		andl %d2,%d0
  puerto|=mascara;
0002286e 		orl %d1,%d0
  return ((UBYTE)(puerto&0xFF));
00022870 		andil #255,%d0
}
00022876 		movel %sp@+,%d2
00022878 		unlk %fp
0002287a 		rts

void set_puerto1 (UBYTE valor)
{
0002287c <set_puerto1>	linkw %fp,#0
00022880 		movel %d3,%sp@-
00022882 		movel %d2,%sp@-
00022884 		movel %fp@(8),%d2
  UWORD puerto,mascara;
  puerto=(UWORD)(mbar_readLong(MCFSIM_PADAT)>>16);
00022888 		moveal #268435590,%a0
0002288e 		movel %a0@,%d1
00022890 		clrw %d1
00022892 		swap %d1
  mascara=valor;
  mascara<<=1;
00022894 		movel %d2,%d0
00022896 		addl %d0,%d0
  mascara&=0x00100; // Valor IOPRT 15
00022898 		andil #256,%d0
  mascara|=((UWORD)valor&0x7F); 
0002289e 		moveq #127,%d3
000228a0 		andl %d3,%d2
000228a2 		orl %d2,%d0
  puerto&=0xFE80; // Ponemos a cero el valor leido
000228a4 		andil #65152,%d1
  puerto|=mascara;
000228aa 		orl %d0,%d1
  mbar_writeShort(MCFSIM_PADAT,puerto);
000228ac 		movew %d1,%a0@
}
000228ae 		movel %sp@+,%d2
000228b0 		movel %sp@+,%d3
000228b2 		unlk %fp
000228b4 		rts

void set_puerto0 (UBYTE valor)
{
000228b6 <set_puerto0>	linkw %fp,#0
  UBYTE* pchar;
  pchar=(UBYTE*)BASE_PUERTO0;
  (*pchar)=valor;
000228ba 		moveb %fp@(11),%d0
000228be 		moveb %d0,30000000 <_end+0x2ffcf5f0>
}
000228c4 		unlk %fp
000228c6 		rts

//--------------------------------------------------------
// void set_led(UWORD valor)
//
// Descripción:
//   Presenta un valor en los LEDs de información de la
//   placa Antares. 
//
// Por ejemplo: set_led(0x07)
//
//     |   SLD0   |   SLD1   |    SLD2    |    SLD3    |
//     |----------|----------|------------|------------|
//     |    ON    |    ON    |     ON     |     OFF    | 
// 
// Autor: Alberto Quintana Ocaña
//--------------------------------------------------------
void set_led(UWORD valor)
{
000228c8 <set_led>	linkw %fp,#0
000228cc 		lea %sp@(-12),%sp
000228d0 		moveml %d2-%d4,%sp@
  UWORD puerto1_valor;	// Valor del puerto IO 1
  UWORD mascara;	// Máscara con el valor de los LEDs
			// en las posiciones del puerto 1
  puerto1_valor=(UWORD) (mbar_readLong(MCFSIM_PADAT)>>16);
000228d4 		moveal #268435590,%a0
000228da 		movel %a0@,%d2
000228dc 		clrw %d2
000228de 		swap %d2
  mascara=0x0000;
  valor=valor&0x0F;
000228e0 		moveq #15,%d3
000228e2 		andl %fp@(8),%d3
  mascara=((valor<<10)&0x3000);
000228e6 		movel %d3,%d1
000228e8 		moveq #10,%d0
000228ea 		lsll %d0,%d1
000228ec 		andil #12288,%d1
  mascara=(((valor<<9)&0x0600)|mascara);
000228f2 		movel %d3,%d0
000228f4 		moveq #9,%d4
000228f6 		lsll %d4,%d0
000228f8 		andil #1536,%d0
000228fe 		orl %d0,%d1
  puerto1_valor&=0xC9FF;// Ponemos a cero los bits de los LEDS
00022900 		andil #51711,%d2
  puerto1_valor|=mascara;
00022906 		orl %d1,%d2
  mbar_writeShort(MCFSIM_PADAT,puerto1_valor);
00022908 		movew %d2,%a0@
  set_puerto0(valor|(valor<<4));
0002290a 		movel %d3,%d0
0002290c 		lsll #4,%d0
0002290e 		orl %d3,%d0
00022910 		moveb %d0,30000000 <_end+0x2ffcf5f0>
}
00022916 		moveml %sp@,%d2-%d4
0002291a 		lea %sp@(12),%sp
0002291e 		unlk %fp
00022920 		rts
00022922 <LCD_write>	linkw %fp,#0
00022926 		movel %d3,%sp@-
00022928 		movel %d2,%sp@-
0002292a 		movel %fp@(8),%d0
0002292e 		movel %fp@(12),%d2
00022932 		movew %d0,%d1
00022934 		moveq #64,%d3
00022936 		cmpl %d2,%d3
00022938 		bnes 0002293e <LCD_write+0x1c>
0002293a 		movel %d0,%d1
0002293c 		lsll #8,%d1
0002293e 		orl %d2,%d1
00022940 		movel %d1,%d0
00022942 		oril #128,%d0
00022948 		movew %d0,000309d8 <puertoS>
0002294e 		movew %d0,40000000 <_end+0x3ffcf5f0>
00022954 		movel #8248,%d0
0002295a 		subql #1,%d0
0002295c 		moveq #-1,%d2
0002295e 		cmpl %d0,%d2
00022960 		bnes 0002295a <LCD_write+0x38>
00022962 		movew %d1,000309d8 <puertoS>
00022968 		movew %d1,40000000 <_end+0x3ffcf5f0>
0002296e 		movel #8248,%d0
00022974 		subql #1,%d0
00022976 		moveq #-1,%d3
00022978 		cmpl %d0,%d3
0002297a 		bnes 00022974 <LCD_write+0x52>
0002297c 		movel %sp@+,%d2
0002297e 		movel %sp@+,%d3
00022980 		unlk %fp
00022982 		rts
00022984 <busquedaBinaria>	linkw %fp,#0
00022988 		movel %a2,%sp@-
0002298a 		movel %d2,%sp@-
0002298c 		movel %fp@(8),%d2
00022990 		subal %a1,%a1
00022992 		moveaw #31,%a0
00022996 		moveq #15,%d0
00022998 		lea 00030002 <umbrales.103>,%a2
0002299e 		cmpl %a2@,%d2
000229a0 		bges 000229aa <busquedaBinaria+0x26>
000229a2 		movel 00030082 <adapt_DAC.104>,%d0
000229a8 		bras 000229e2 <busquedaBinaria+0x5e>
000229aa 		cmpl 0003007a <umbrales.103+0x78>,%d2
000229b0 		bles 000229ba <busquedaBinaria+0x36>
000229b2 		movel 000300fe <adapt_DAC.104+0x7c>,%d0
000229b8 		bras 000229e2 <busquedaBinaria+0x5e>
000229ba 		moveq #4,%d1
000229bc 		cmpl %a2@(00000000,%d0:l:4),%d2
000229c0 		bges 000229c8 <busquedaBinaria+0x44>
000229c2 		moveal %d0,%a0
000229c4 		movel %a1,%d0
000229c6 		bras 000229ca <busquedaBinaria+0x46>
000229c8 		moveal %d0,%a1
000229ca 		addl %a0,%d0
000229cc 		movel %d0,%d0
000229ce 		bpls 000229d2 <busquedaBinaria+0x4e>
000229d0 		addql #1,%d0
000229d2 		asrl #1,%d0
000229d4 		subql #1,%d1
000229d6 		bpls 000229bc <busquedaBinaria+0x38>
000229d8 		lea 00030082 <adapt_DAC.104>,%a0
000229de 		movel %a0@(00000000,%d0:l:4),%d0
}000229e2 		movel %sp@+,%d2
000229e4 		moveal %sp@+,%a2
000229e6 		unlk %fp
000229e8 		rts
000229ea <numeroarray>	linkw %fp,#0
000229ee 		lea %sp@(-28),%sp
000229f2 		moveml %d2-%d4/%a2-%a5,%sp@
000229f6 		movel %fp@(8),%d3
000229fa 		cmpil #1000,%d3
00022a00 		bles 00022a0c <numeroarray+0x22>
00022a02 		moveq #4,%d0
00022a04 		movel %d0,00030a00 <tam>
00022a0a 		bras 00022a5e <numeroarray+0x74>
00022a0c 		moveq #100,%d1
00022a0e 		cmpl %d3,%d1
00022a10 		bges 00022a24 <numeroarray+0x3a>
00022a12 		moveq #3,%d4
00022a14 		movel %d4,00030a00 <tam>
00022a1a 		moveq #32,%d0
00022a1c 		moveb %d0,000309f7 <array+0x3>
00022a22 		bras 00022a5e <numeroarray+0x74>
00022a24 		moveq #10,%d1
00022a26 		cmpl %d3,%d1
00022a28 		bges 00022a42 <numeroarray+0x58>
00022a2a 		moveq #2,%d4
00022a2c 		movel %d4,00030a00 <tam>
00022a32 		moveq #32,%d0
00022a34 		moveb %d0,000309f6 <array+0x2>
00022a3a 		moveb %d0,000309f7 <array+0x3>
00022a40 		bras 00022a5e <numeroarray+0x74>
00022a42 		moveq #1,%d1
00022a44 		movel %d1,00030a00 <tam>
00022a4a 		moveq #32,%d4
00022a4c 		moveb %d4,000309f5 <array+0x1>
00022a52 		moveb %d4,000309f6 <array+0x2>
00022a58 		moveb %d4,000309f7 <array+0x3>
00022a5e 		movel 00030a00 <tam>,%d0
00022a64 		subql #1,%d0
00022a66 		movel %d0,00030948 <p>
00022a6c 		lea 000309f4 <array>,%a5
00022a72 		lea 00024028 <__floatsidf>,%a4
00022a78 		lea 000230c8 <__muldf3>,%a3
00022a7e 		lea 000241a2 <__fixdfsi>,%a2
00022a84 		movel 00030948 <p>,%d2
00022a8a 		movel %d3,%d1
00022a8c 		moveq #10,%d4
00022a8e 		divsll %d4,%d0,%d1
00022a92 		moveq #48,%d1
00022a94 		addl %d1,%d0
00022a96 		moveb %d0,%a5@(00000000,%d2:l)
00022a9a 		movel %d3,%sp@-
00022a9c 		jsr %a4@
00022a9e 		addql #4,%sp
00022aa0 		movel #-1717986918,%sp@-
00022aa6 		movel #1069128089,%sp@-
00022aac 		movel %d1,%sp@-
00022aae 		movel %d0,%sp@-
00022ab0 		jsr %a3@
00022ab2 		lea %sp@(16),%sp
00022ab6 		movel %d1,%sp@-
00022ab8 		movel %d0,%sp@-
00022aba 		jsr %a2@
00022abc 		addql #8,%sp
00022abe 		movel %d0,%d3
00022ac0 		subql #1,%d2
00022ac2 		movel %d2,00030948 <p>
00022ac8 		tstl %d3
00022aca 		bnes 00022a84 <numeroarray+0x9a>
	return array;
00022acc 		movel #199156,%d0
}00022ad2 		moveml %fp@(-28),%d2-%d4/%a2-%a5
00022ad8 		unlk %fp
00022ada 		rts
00022adc <__init>	linkw %fp,#0
00022ae0 		movel %d2,%sp@-
00022ae2 		moveal #268435519,%a0
00022ae8 		moveb #64,%a0@
00022aec 		movel #131098,%d0
00022af2 		movel %d0,00000114 <F_MAX_EXP+0x15>
00022af6 		movel #131210,%d0
00022afc 		movel %d0,00000104 <F_MAX_EXP+0x5>
00022b00 		moveal #268435968,%a0
00022b06 		movew #61,%a0@
00022b0a 		lea %a0@(12),%a0
00022b0e 		clrw %a0@
00022b10 		subql #8,%a0
00022b12 		movew #1031,%a0@
00022b16 		moveal #268435508,%a0
00022b1c 		movel %a0@,%d0
00022b1e 		oril #-2147483648,%d0
00022b24 		movel %d0,%a0@
00022b26 		lea %a0@(-20),%a0
00022b2a 		movel #-662124408,%a0@
00022b30 		lea %a0@(12),%a0
00022b34 		movew #-32768,%a0@
00022b38 		lea %a0@(84),%a0
00022b3c 		movel #8388608,%a0@
00022b42 		lea %a0@(36),%a0
00022b46 		clrw %a0@
00022b48 		addql #8,%a0
00022b4a 		movew #-12275,%a0@
00022b4e 		lea %a0@(-12),%a0
00022b52 		movew #-32768,%a0@
00022b56 		jsr %pc@(000205e0 <LCD_reset>)
00022b5a 		jsr %pc@(000204dc <LCD_init>)
00022b5e 		lea 000242b5 <_etext+0x73>,%a0
00022b64 		lea 000242fc <_etext+0xba>,%a1
00022b6a 		tstl %a0
00022b6c 		beqs 00022b7e <__init+0xa2>
00022b6e 		tstb %a0@
00022b70 		beqs 00022b7e <__init+0xa2>
00022b72 		moveb %a0@+,%d2
00022b74 		moveb %d2,%d1
00022b76 		moveq #19,%d0
00022b78 		trap #15
00022b7a 		tstb %a0@
00022b7c 		bnes 00022b72 <__init+0x96>
00022b7e 		tstl %a1
00022b80 		beqs 00022b94 <__init+0xb8>
00022b82 		tstb %a1@
00022b84 		beqs 00022b94 <__init+0xb8>
00022b86 		moveal %a1,%a0
00022b88 		moveb %a0@+,%d2
00022b8a 		moveb %d2,%d1
00022b8c 		moveq #19,%d0
00022b8e 		trap #15
00022b90 		tstb %a0@
00022b92 		bnes 00022b88 <__init+0xac>
00022b94 		movew %sr,%d0
00022b96 		andil #63743,%d0
00022b9c 		movew %d0,%sr
00022b9e 		movel %fp@(-4),%d2
00022ba2 		unlk %fp
00022ba4 		rts

//------------------------------------------------------
// Definición de rutinas de atención a la interrupción
// Es necesario definirlas aunque estén vacías
void rutina_int2(void) {}
00022ba6 <rutina_int2>	linkw %fp,#0
00022baa 		unlk %fp
00022bac 		rts
void rutina_int3(void) {}
00022bae <rutina_int3>	linkw %fp,#0
00022bb2 		unlk %fp
00022bb4 		rts
void rutina_int4(void) {}
00022bb6 <rutina_int4>	linkw %fp,#0
00022bba 		unlk %fp
00022bbc 		rts
void rutina_tout1(void) {}
00022bbe <rutina_tout1>	linkw %fp,#0
00022bc2 		unlk %fp
00022bc4 		rts
void rutina_tout2(void) {}
00022bc6 <rutina_tout2>	linkw %fp,#0
00022bca 		unlk %fp
00022bcc 		rts
void rutina_tout3(void) {}00022bce <rutina_tout3>	linkw %fp,#0
00022bd2 		unlk %fp
00022bd4 		rts
00022bd6 		rts
00022bd8 <Ld$den>	orl %d7,%d0
00022bda 		movew #3,%d7
00022bde 		moveq #2,%d6
00022be0 		jmp 00023f9c <$_exception_handler>
00022be6 <Ld$infty>	movel #2146435072,%d0
00022bec 		moveq #0,%d1
00022bee 		orl %d7,%d0
00022bf0 		movew #5,%d7
00022bf4 		moveq #2,%d6
00022bf6 		jmp 00023f9c <$_exception_handler>
00022bfc <Ld$underflow>	moveq #0,%d0
00022bfe 		movel %d0,%d1
00022c00 		movew #3,%d7
00022c04 		moveq #2,%d6
00022c06 		jmp 00023f9c <$_exception_handler>
00022c0c <Ld$inop>	moveq #-1,%d0
00022c0e 		movel %d0,%d1
00022c10 		movew #17,%d7
00022c14 		moveq #2,%d6
00022c16 		jmp 00023f9c <$_exception_handler>
00022c1c <Ld$div$0>	movel #2146435072,%d0
00022c22 		moveq #0,%d1
00022c24 		orl %d7,%d0
00022c26 		movew #9,%d7
00022c2a 		moveq #2,%d6
00022c2c 		jmp 00023f9c <$_exception_handler>
00022c32 <__subdf3>	bchg #31,%sp@(12)
00022c38 <__adddf3>	linkw %fp,#-24
00022c3c 		moveml %d2-%d7,%sp@
00022c40 		movel %fp@(8),%d0
00022c44 		movel %fp@(12),%d1
00022c48 		movel %fp@(16),%d2
00022c4c 		movel %fp@(20),%d3
00022c50 		movel %d0,%d7
00022c52 		addl %d1,%d1
00022c54 		addxl %d0,%d0
00022c56 		beqw 00022fdc <Ladddf$b>
00022c5a 		movel %d2,%d6
00022c5c 		addl %d3,%d3
00022c5e 		addxl %d2,%d2
00022c60 		beqw 00022fe4 <Ladddf$a>
00022c64 		andil #-2147483648,%d7
00022c6a 		swap %d6
00022c6c 		andil #32768,%d6
00022c72 		orl %d6,%d7
00022c74 		moveal %d7,%a0
00022c76 		movel #2097151,%d6
00022c7c 		movel #2097152,%d7
00022c82 		movel %d0,%d4
00022c84 		andl %d6,%d0
00022c86 		notl %d6
00022c88 		andl %d6,%d4
00022c8a 		beqw 00022fce <Ladddf$a$den>
00022c8e 		cmpl %d6,%d4
00022c90 		beqw 00023052 <Ladddf$nf>
00022c94 		orl %d7,%d0
00022c96 <Ladddf$1>	swap %d4
00022c98 		lsrl #5,%d4
00022c9a 		movel %d2,%d5
00022c9c 		andl %d6,%d5
00022c9e 		beqw 00022fd4 <Ladddf$b$den>
00022ca2 		cmpl %d6,%d5
00022ca4 		beqw 00023052 <Ladddf$nf>
00022ca8 		notl %d6
00022caa 		andl %d6,%d2
00022cac 		orl %d7,%d2
00022cae <Ladddf$2>	swap %d5
00022cb0 		lsrl #5,%d5
00022cb2 		movel %a2,%sp@-
00022cb4 		movel %a3,%sp@-
00022cb6 		movel %a4,%sp@-
00022cb8 		moveal %d4,%a2
00022cba 		moveal %d5,%a3
00022cbc 		moveq #0,%d7
00022cbe 		movel %d7,%d6
00022cc0 		movel %d3,%d5
00022cc2 		movel %d2,%d4
00022cc4 		movel %d7,%d3
00022cc6 		movel %d7,%d2
00022cc8 		moveal %d4,%a4
00022cca 		movel %a2,%d4
00022ccc 		moveal %a4,%a2
00022cce 		moveal %d5,%a4
00022cd0 		movel %a3,%d5
00022cd2 		moveal %a4,%a3
00022cd4 		cmpl %d4,%d5
00022cd6 		beqw 00022e16 <Ladddf$3>
00022cda 		bhiw 00022d78 <Ladddf$2+0xca>
00022cde 		movew %d4,%d2
00022ce0 		subl %d5,%d2
00022ce2 		moveal %d4,%a4
00022ce4 		movel %a2,%d4
00022ce6 		moveal %a4,%a2
00022ce8 		moveal %d5,%a4
00022cea 		movel %a3,%d5
00022cec 		moveal %a4,%a3
00022cee 		cmpil #55,%d2
00022cf4 		bgew 00022fae <Ladddf$b$small>
00022cf8 		cmpil #32,%d2
00022cfe 		bgew 00022d4a <Ladddf$2+0x9c>
00022d02 		cmpil #16,%d2
00022d08 		bgew 00022d5c <Ladddf$2+0xae>
00022d0c 		braw 00022d3c <Ladddf$2+0x8e>
00022d10 		lsrl #1,%d7
00022d12 		btst #0,%d6
00022d16 		beqw 00022d1e <Ladddf$2+0x70>
00022d1a 		bset #31,%d7
00022d1e 		lsrl #1,%d6
00022d20 		btst #0,%d5
00022d24 		beqw 00022d2c <Ladddf$2+0x7e>
00022d28 		bset #31,%d6
00022d2c 		lsrl #1,%d5
00022d2e 		btst #0,%d4
00022d32 		beqw 00022d3a <Ladddf$2+0x8c>
00022d36 		bset #31,%d5
00022d3a 		lsrl #1,%d4
00022d3c 		subql #1,%d2
00022d3e 		bplw 00022d10 <Ladddf$2+0x62>
00022d42 		moveq #0,%d2
00022d44 		movel %d2,%d3
00022d46 		braw 00022e22 <Ladddf$4>
00022d4a 		movel %d6,%d7
00022d4c 		movel %d5,%d6
00022d4e 		movel %d4,%d5
00022d50 		moveq #0,%d4
00022d52 		subil #32,%d2
00022d58 		braw 00022d02 <Ladddf$2+0x54>
00022d5c 		movew %d6,%d7
00022d5e 		swap %d7
00022d60 		movew %d5,%d6
00022d62 		swap %d6
00022d64 		movew %d4,%d5
00022d66 		swap %d5
00022d68 		movew #0,%d4
00022d6c 		swap %d4
00022d6e 		subil #16,%d2
00022d74 		braw 00022d3c <Ladddf$2+0x8e>
00022d78 		movel %d5,%d6
00022d7a 		movel %d4,%d5
00022d7c 		movel %d6,%d4
00022d7e 		subl %d5,%d6
00022d80 		moveal %d4,%a4
00022d82 		movel %a2,%d4
00022d84 		moveal %a4,%a2
00022d86 		moveal %d5,%a4
00022d88 		movel %a3,%d5
00022d8a 		moveal %a4,%a3
00022d8c 		cmpil #55,%d6
00022d92 		bgew 00022f8e <Ladddf$a$small>
00022d96 		cmpil #32,%d6
00022d9c 		bgew 00022de8 <Ladddf$2+0x13a>
00022da0 		cmpil #16,%d6
00022da6 		bgew 00022dfa <Ladddf$2+0x14c>
00022daa 		braw 00022dda <Ladddf$2+0x12c>
00022dae 		lsrl #1,%d3
00022db0 		btst #0,%d2
00022db4 		beqw 00022dbc <Ladddf$2+0x10e>
00022db8 		bset #31,%d3
00022dbc 		lsrl #1,%d2
00022dbe 		btst #0,%d1
00022dc2 		beqw 00022dca <Ladddf$2+0x11c>
00022dc6 		bset #31,%d2
00022dca 		lsrl #1,%d1
00022dcc 		btst #0,%d0
00022dd0 		beqw 00022dd8 <Ladddf$2+0x12a>
00022dd4 		bset #31,%d1
00022dd8 		lsrl #1,%d0
00022dda 		subql #1,%d6
00022ddc 		bplw 00022dae <Ladddf$2+0x100>
00022de0 		moveq #0,%d7
00022de2 		movel %d7,%d6
00022de4 		braw 00022e22 <Ladddf$4>
00022de8 		movel %d2,%d3
00022dea 		movel %d1,%d2
00022dec 		movel %d0,%d1
00022dee 		moveq #0,%d0
00022df0 		subil #32,%d6
00022df6 		braw 00022da0 <Ladddf$2+0xf2>
00022dfa 		movew %d2,%d3
00022dfc 		swap %d3
00022dfe 		movew %d1,%d2
00022e00 		swap %d2
00022e02 		movew %d0,%d1
00022e04 		swap %d1
00022e06 		movew #0,%d0
00022e0a 		swap %d0
00022e0c 		subil #16,%d6
00022e12 		braw 00022dda <Ladddf$2+0x12c>
00022e16 <Ladddf$3>	moveal %d4,%a4
00022e18 		movel %a2,%d4
00022e1a 		moveal %a4,%a2
00022e1c 		moveal %d5,%a4
00022e1e 		movel %a3,%d5
00022e20 		moveal %a4,%a3
00022e22 <Ladddf$4>	moveal %d7,%a4
00022e24 		movel %a0,%d7
00022e26 		moveal %a4,%a0
00022e28 		moveal %d6,%a4
00022e2a 		movel %a3,%d6
00022e2c 		moveal %a4,%a3
00022e2e 		movel %d7,%d6
00022e30 		movew #0,%d7
00022e34 		swap %d6
00022e36 		movew #0,%d6
00022e3a 		eorl %d7,%d6
00022e3c 		bmiw 00022ee4 <Lsubdf$0>
00022e40 		moveal %d7,%a4
00022e42 		movel %a0,%d7
00022e44 		moveal %a4,%a0
00022e46 		moveal %d6,%a4
00022e48 		movel %a3,%d6
00022e4a 		moveal %a4,%a3
00022e4c 		addl %d7,%d3
00022e4e 		addxl %d6,%d2
00022e50 		addxl %d5,%d1
00022e52 		addxl %d4,%d0
00022e54 		movel %a2,%d4
00022e56 		movel %a0,%d7
00022e58 		andil #-2147483648,%d7
00022e5e 		moveal %sp@+,%a4
00022e60 		moveal %sp@+,%a3
00022e62 		moveal %sp@+,%a2
00022e64 		btst #54,%d0
00022e68 		beqw 00022e9a <Ladddf$4+0x78>
00022e6c 		lsrl #1,%d3
00022e6e 		btst #0,%d2
00022e72 		beqw 00022e7a <Ladddf$4+0x58>
00022e76 		bset #31,%d3
00022e7a 		lsrl #1,%d2
00022e7c 		btst #0,%d1
00022e80 		beqw 00022e88 <Ladddf$4+0x66>
00022e84 		bset #31,%d2
00022e88 		lsrl #1,%d1
00022e8a 		btst #0,%d0
00022e8e 		beqw 00022e96 <Ladddf$4+0x74>
00022e92 		bset #31,%d1
00022e96 		lsrl #1,%d0
00022e98 		addql #1,%d4
00022e9a 		lea 00022ec2 <Ladddf$5>,%a0
00022ea0 		lea 0003083c <_fpCCR>,%a1
00022ea6 		clrl %d6
00022ea8 		movew %a1@(6),%d6
00022eac 		beqw 000236da <Lround$to$nearest>
00022eb0 		cmpil #2,%d6
00022eb6 		bhiw 0002375a <Lround$to$minus>
00022eba 		bltw 0002375a <Lround$to$minus>
00022ebe 		braw 0002375a <Lround$to$minus>
00022ec2 <Ladddf$5>	cmpil #2047,%d4
00022ec8 		bgew 00022edc <Ladddf$5+0x1a>
00022ecc 		bclr #52,%d0
00022ed0 		lsll #4,%d4
00022ed2 		swap %d0
00022ed4 		orl %d4,%d0
00022ed6 		swap %d0
00022ed8 		braw 0002302a <Ladddf$ret>
00022edc 		movew #1,%d5
00022ee0 		braw 00022be6 <Ld$infty>
00022ee4 <Lsubdf$0>	moveal %d7,%a4
00022ee6 		movel %a0,%d7
00022ee8 		moveal %a4,%a0
00022eea 		moveal %d6,%a4
00022eec 		movel %a3,%d6
00022eee 		moveal %a4,%a3
00022ef0 		subl %d7,%d3
00022ef2 		subxl %d6,%d2
00022ef4 		subxl %d5,%d1
00022ef6 		subxl %d4,%d0
00022ef8 		beqw 00023024 <Ladddf$ret$1>
00022efc 		bplw 00022f10 <Lsubdf$0+0x2c>
00022f00 		movel %a0,%d7
00022f02 		bchg #31,%d7
00022f06 		moveal %d7,%a0
00022f08 		negl %d3
00022f0a 		negxl %d2
00022f0c 		negxl %d1
00022f0e 		negxl %d0
00022f10 		movel %a2,%d4
00022f12 		movel %a0,%d7
00022f14 		andil #-2147483648,%d7
00022f1a 		moveal %sp@+,%a4
00022f1c 		moveal %sp@+,%a3
00022f1e 		moveal %sp@+,%a2
00022f20 		btst #54,%d0
00022f24 		beqw 00022f56 <Lsubdf$0+0x72>
00022f28 		lsrl #1,%d3
00022f2a 		btst #0,%d2
00022f2e 		beqw 00022f36 <Lsubdf$0+0x52>
00022f32 		bset #31,%d3
00022f36 		lsrl #1,%d2
00022f38 		btst #0,%d1
00022f3c 		beqw 00022f44 <Lsubdf$0+0x60>
00022f40 		bset #31,%d2
00022f44 		lsrl #1,%d1
00022f46 		btst #0,%d0
00022f4a 		beqw 00022f52 <Lsubdf$0+0x6e>
00022f4e 		bset #31,%d1
00022f52 		lsrl #1,%d0
00022f54 		addql #1,%d4
00022f56 		lea 00022f7e <Lsubdf$1>,%a0
00022f5c 		lea 0003083c <_fpCCR>,%a1
00022f62 		clrl %d6
00022f64 		movew %a1@(6),%d6
00022f68 		beqw 000236da <Lround$to$nearest>
00022f6c 		cmpil #2,%d6
00022f72 		bhiw 0002375a <Lround$to$minus>
00022f76 		bltw 0002375a <Lround$to$minus>
00022f7a 		braw 0002375a <Lround$to$minus>
00022f7e <Lsubdf$1>	bclr #52,%d0
00022f82 		lsll #4,%d4
00022f84 		swap %d0
00022f86 		orl %d4,%d0
00022f88 		swap %d0
00022f8a 		braw 0002302a <Ladddf$ret>
00022f8e <Ladddf$a$small>	moveal %sp@+,%a4
00022f90 		moveal %sp@+,%a3
00022f92 		moveal %sp@+,%a2
00022f94 		movel %fp@(16),%d0
00022f98 		movel %fp@(20),%d1
00022f9c 		lea 0003083c <_fpCCR>,%a0
00022fa2 		movew #0,%a0@
00022fa6 		moveml %sp@,%d2-%d7
00022faa 		unlk %fp
00022fac 		rts
00022fae <Ladddf$b$small>	moveal %sp@+,%a4
00022fb0 		moveal %sp@+,%a3
00022fb2 		moveal %sp@+,%a2
00022fb4 		movel %fp@(8),%d0
00022fb8 		movel %fp@(12),%d1
00022fbc 		lea 0003083c <_fpCCR>,%a0
00022fc2 		movew #0,%a0@
00022fc6 		moveml %sp@,%d2-%d7
00022fca 		unlk %fp
00022fcc 		rts
00022fce <Ladddf$a$den>	movel %d7,%d4
00022fd0 		braw 00022c96 <Ladddf$1>
00022fd4 <Ladddf$b$den>	movel %d7,%d5
00022fd6 		notl %d6
00022fd8 		braw 00022cae <Ladddf$2>
00022fdc <Ladddf$b>	movel %d2,%d0
00022fde 		movel %d3,%d1
00022fe0 		braw 00022fec <Ladddf$a+0x8>
00022fe4 <Ladddf$a>	movel %fp@(8),%d0
00022fe8 		movel %fp@(12),%d1
00022fec 		movew #1,%d5
00022ff0 		movel %d0,%d7
00022ff2 		andil #-2147483648,%d7
00022ff8 		bclr #31,%d0
00022ffc 		cmpil #2146435072,%d0
00023002 		bgew 00023014 <Ladddf$a+0x30>
00023006 		movel %d0,%d0
00023008 		bnew 0002302a <Ladddf$ret>
0002300c 		bclr #31,%d7
00023010 		braw 0002302a <Ladddf$ret>
00023014 		andil #1048575,%d0
0002301a 		orl %d1,%d0
0002301c 		bnew 00022c0c <Ld$inop>
00023020 		braw 00022be6 <Ld$infty>
00023024 <Ladddf$ret$1>	moveal %sp@+,%a4
00023026 		moveal %sp@+,%a3
00023028 		moveal %sp@+,%a2
0002302a <Ladddf$ret>	lea 0003083c <_fpCCR>,%a0
00023030 		movew #0,%a0@
00023034 		orl %d7,%d0
00023036 		moveml %sp@,%d2-%d7
0002303a 		unlk %fp
0002303c 		rts
0002303e <Ladddf$ret$den>	lsrl #1,%d1
00023040 		btst #0,%d0
00023044 		beqw 0002304c <Ladddf$ret$den+0xe>
00023048 		bset #31,%d1
0002304c 		lsrl #1,%d0
0002304e 		braw 0002302a <Ladddf$ret>
00023052 <Ladddf$nf>	movew #1,%d5
00023056 		movel %fp@(8),%d0
0002305a 		movel %fp@(12),%d1
0002305e 		movel %fp@(16),%d2
00023062 		movel %fp@(20),%d3
00023066 		movel #2146435072,%d4
0002306c 		movel %d0,%d7
0002306e 		movel %d2,%d6
00023070 		bclr #31,%d0
00023074 		bclr #31,%d2
00023078 		cmpl %d4,%d0
0002307a 		bhiw 00022c0c <Ld$inop>
0002307e 		bnew 00023088 <Ladddf$nf+0x36>
00023082 		tstl %d1
00023084 		bnew 00022c0c <Ld$inop>
00023088 		cmpl %d4,%d2
0002308a 		bhiw 00022c0c <Ld$inop>
0002308e 		bnew 00023098 <Ladddf$nf+0x46>
00023092 		tstl %d3
00023094 		bnew 00022c0c <Ld$inop>
00023098 		eorl %d7,%d6
0002309a 		bmiw 000230a8 <Ladddf$nf+0x56>
0002309e 		andil #-2147483648,%d7
000230a4 		braw 00022be6 <Ld$infty>
000230a8 		cmpl %d2,%d0
000230aa 		bnew 000230b4 <Ladddf$nf+0x62>
000230ae 		cmpl %d3,%d1
000230b0 		beqw 00022c0c <Ld$inop>
000230b4 		andil #-2147483648,%d7
000230ba 		cmpl %d4,%d0
000230bc 		beqw 00022be6 <Ld$infty>
000230c0 		bchg #31,%d7
000230c4 		braw 00022be6 <Ld$infty>
000230c8 <__muldf3>	linkw %fp,#-24
000230cc 		moveml %d2-%d7,%sp@
000230d0 		movel %fp@(8),%d0
000230d4 		movel %fp@(12),%d1
000230d8 		movel %fp@(16),%d2
000230dc 		movel %fp@(20),%d3
000230e0 		movel %d0,%d7
000230e2 		eorl %d2,%d7
000230e4 		andil #-2147483648,%d7
000230ea 		moveal %d7,%a0
000230ec 		movel #2146435072,%d7
000230f2 		movel %d7,%d6
000230f4 		notl %d6
000230f6 		bclr #31,%d0
000230fa 		movel %d0,%d4
000230fc 		orl %d1,%d4
000230fe 		beqw 0002325c <Lmuldf$a$0>
00023102 		movel %d0,%d4
00023104 		bclr #31,%d2
00023108 		movel %d2,%d5
0002310a 		orl %d3,%d5
0002310c 		beqw 00023248 <Lmuldf$b$0>
00023110 		movel %d2,%d5
00023112 		cmpl %d7,%d0
00023114 		bhiw 00023220 <Lmuldf$inop>
00023118 		beqw 00023238 <Lmuldf$a$nf>
0002311c 		cmpl %d7,%d2
0002311e 		bhiw 00023220 <Lmuldf$inop>
00023122 		beqw 00023228 <Lmuldf$b$nf>
00023126 		andl %d7,%d4
00023128 		beqw 00023284 <Lmuldf$a$den>
0002312c 		andl %d6,%d0
0002312e 		oril #1048576,%d0
00023134 		swap %d4
00023136 		lsrl #4,%d4
00023138 <Lmuldf$1>	andl %d7,%d5
0002313a 		beqw 0002329a <Lmuldf$b$den>
0002313e 		andl %d6,%d2
00023140 		oril #1048576,%d2
00023146 		swap %d5
00023148 		lsrl #4,%d5
0002314a <Lmuldf$2>	addl %d5,%d4
0002314c 		subil #1023,%d4
00023152 		movel %a2,%sp@-
00023154 		movel %a3,%sp@-
00023156 		movel %a4,%sp@-
00023158 		moveal #0,%a2
0002315e 		moveal %d4,%a3
00023160 		moveq #11,%d7
00023162 		lsll %d7,%d2
00023164 		movel %d3,%d6
00023166 		lsll %d7,%d3
00023168 		andil #-2097152,%d6
0002316e 		moveq #21,%d7
00023170 		lsrl %d7,%d6
00023172 		orl %d6,%d2
00023174 		movel %d2,%d6
00023176 		movel %d3,%d7
00023178 		movel %d0,%d4
0002317a 		movel %d1,%d5
0002317c 		moveq #0,%d3
0002317e 		movel %d3,%d2
00023180 		movel %d3,%d1
00023182 		movel %d3,%d0
00023184 		moveal #52,%a1
0002318a 		moveal %d7,%a4
0002318c 		movel %a1,%d7
0002318e 		moveal %a4,%a1
00023190 		moveal %d7,%a4
00023192 		movel %a1,%d7
00023194 		moveal %a4,%a1
00023196 		addl %d3,%d3
00023198 		addxl %d2,%d2
0002319a 		addxl %d1,%d1
0002319c 		addxl %d0,%d0
0002319e 		addl %d7,%d7
000231a0 		addxl %d6,%d6
000231a2 		bccw 000231ba <Lmuldf$2+0x70>
000231a6 		moveal %d7,%a4
000231a8 		movel %a2,%d7
000231aa 		moveal %a4,%a2
000231ac 		addl %d5,%d3
000231ae 		addxl %d4,%d2
000231b0 		addxl %d7,%d1
000231b2 		addxl %d7,%d0
000231b4 		moveal %d7,%a4
000231b6 		movel %a2,%d7
000231b8 		moveal %a4,%a2
000231ba 		moveal %d7,%a4
000231bc 		movel %a1,%d7
000231be 		moveal %a4,%a1
000231c0 		subql #1,%d7
000231c2 		bplw 00023190 <Lmuldf$2+0x46>
000231c6 		movel %a3,%d4
000231c8 		moveal %sp@+,%a4
000231ca 		moveal %sp@+,%a3
000231cc 		moveal %sp@+,%a2
000231ce 		swap %d0
000231d0 		swap %d1
000231d2 		movew %d1,%d0
000231d4 		swap %d2
000231d6 		movew %d2,%d1
000231d8 		swap %d3
000231da 		movew %d3,%d2
000231dc 		movew #0,%d3
000231e0 		moveq #29,%d6
000231e2 		lsrl #3,%d3
000231e4 		movel %d2,%d7
000231e6 		lsll %d6,%d7
000231e8 		orl %d7,%d3
000231ea 		lsrl #3,%d2
000231ec 		movel %d1,%d7
000231ee 		lsll %d6,%d7
000231f0 		orl %d7,%d2
000231f2 		lsrl #3,%d1
000231f4 		movel %d0,%d7
000231f6 		lsll %d6,%d7
000231f8 		orl %d7,%d1
000231fa 		lsrl #3,%d0
000231fc 		movel %a0,%d7
000231fe 		movew #2,%d5
00023202 		btst #22,%d0
00023206 		beqw 000234da <Lround$exit>
0002320a 		lsrl #1,%d1
0002320c 		btst #0,%d0
00023210 		beqw 00023218 <Lmuldf$2+0xce>
00023214 		bset #31,%d1
00023218 		lsrl #1,%d0
0002321a 		addql #1,%d4
0002321c 		braw 000234da <Lround$exit>
00023220 <Lmuldf$inop>	movew #2,%d5
00023224 		braw 00022c0c <Ld$inop>
00023228 <Lmuldf$b$nf>	movew #2,%d5
0002322c 		movel %a0,%d7
0002322e 		tstl %d3
00023230 		bnew 00022c0c <Ld$inop>
00023234 		braw 00022be6 <Ld$infty>
00023238 <Lmuldf$a$nf>	movew #2,%d5
0002323c 		movel %a0,%d7
0002323e 		tstl %d1
00023240 		bnew 00022c0c <Ld$inop>
00023244 		braw 00022be6 <Ld$infty>
00023248 <Lmuldf$b$0>	movew #2,%d5
0002324c 		movel %d2,%d7
0002324e 		movel %d0,%d2
00023250 		movel %d7,%d0
00023252 		movel %d3,%d7
00023254 		movel %d1,%d3
00023256 		movel %d7,%d1
00023258 		braw 00023268 <Lmuldf$a$0+0xc>
0002325c <Lmuldf$a$0>	movel %fp@(16),%d2
00023260 		movel %fp@(20),%d3
00023264 		bclr #31,%d2
00023268 		cmpil #2146435072,%d2
0002326e 		bgew 00022c0c <Ld$inop>
00023272 		lea 0003083c <_fpCCR>,%a0
00023278 		movew #0,%a0@
0002327c 		moveml %sp@,%d2-%d7
00023280 		unlk %fp
00023282 		rts
00023284 <Lmuldf$a$den>	moveq #1,%d4
00023286 		andl %d6,%d0
00023288 		addl %d1,%d1
0002328a 		addxl %d0,%d0
0002328c 		subql #1,%d4
0002328e 		btst #20,%d0
00023292 		bnew 00023138 <Lmuldf$1>
00023296 		braw 00023288 <Lmuldf$a$den+0x4>
0002329a <Lmuldf$b$den>	moveq #1,%d5
0002329c 		andl %d6,%d2
0002329e 		addl %d3,%d3
000232a0 		addxl %d2,%d2
000232a2 		subql #1,%d5
000232a4 		btst #20,%d2
000232a8 		bnew 0002314a <Lmuldf$2>
000232ac 		braw 0002329e <Lmuldf$b$den+0x4>
000232b0 <__divdf3>	linkw %fp,#-24
000232b4 		moveml %d2-%d7,%sp@
000232b8 		movel %fp@(8),%d0
000232bc 		movel %fp@(12),%d1
000232c0 		movel %fp@(16),%d2
000232c4 		movel %fp@(20),%d3
000232c8 		movel %d0,%d7
000232ca 		eorl %d2,%d7
000232cc 		andil #-2147483648,%d7
000232d2 		moveal %d7,%a0
000232d4 		movel #2146435072,%d7
000232da 		movel %d7,%d6
000232dc 		notl %d6
000232de 		bclr #31,%d0
000232e2 		movel %d0,%d4
000232e4 		orl %d1,%d4
000232e6 		beqw 00023432 <Ldivdf$a$0>
000232ea 		movel %d0,%d4
000232ec 		bclr #31,%d2
000232f0 		movel %d2,%d5
000232f2 		orl %d3,%d5
000232f4 		beqw 0002346c <Ldivdf$b$0>
000232f8 		movel %d2,%d5
000232fa 		cmpl %d7,%d0
000232fc 		bhiw 0002342a <Ldivdf$inop>
00023300 		beqw 00023494 <Ldivdf$a$nf>
00023304 		cmpl %d7,%d2
00023306 		bhiw 0002342a <Ldivdf$inop>
0002330a 		beqw 00023486 <Ldivdf$b$nf>
0002330e 		andl %d7,%d4
00023310 		beqw 000234ae <Ldivdf$a$den>
00023314 		andl %d6,%d0
00023316 		oril #1048576,%d0
0002331c 		swap %d4
0002331e 		lsrl #4,%d4
00023320 <Ldivdf$1>	andl %d7,%d5
00023322 		beqw 000234c4 <Ldivdf$b$den>
00023326 		andl %d6,%d2
00023328 		oril #1048576,%d2
0002332e 		swap %d5
00023330 		lsrl #4,%d5
00023332 <Ldivdf$2>	subl %d5,%d4
00023334 		addil #1022,%d4
0002333a 		moveq #0,%d6
0002333c 		movel %d6,%d7
0002333e 		moveal #0,%a1
00023344 		moveq #22,%d5
00023346 		cmpl %d0,%d2
00023348 		bhiw 00023356 <Ldivdf$2+0x24>
0002334c 		beqw 00023364 <Ldivdf$2+0x32>
00023350 		subl %d3,%d1
00023352 		subxl %d2,%d0
00023354 		bset %d5,%d6
00023356 		addl %d1,%d1
00023358 		addxl %d0,%d0
0002335a 		subql #1,%d5
0002335c 		bplw 00023346 <Ldivdf$2+0x14>
00023360 		braw 0002336e <Ldivdf$2+0x3c>
00023364 		cmpl %d1,%d3
00023366 		bhiw 00023356 <Ldivdf$2+0x24>
0002336a 		braw 00023350 <Ldivdf$2+0x1e>
0002336e 		moveq #31,%d5
00023370 		cmpl %d0,%d2
00023372 		bhiw 00023380 <Ldivdf$2+0x4e>
00023376 		beqw 0002338e <Ldivdf$2+0x5c>
0002337a 		subl %d3,%d1
0002337c 		subxl %d2,%d0
0002337e 		bset %d5,%d7
00023380 		addl %d1,%d1
00023382 		addxl %d0,%d0
00023384 		subql #1,%d5
00023386 		bplw 00023370 <Ldivdf$2+0x3e>
0002338a 		braw 00023398 <Ldivdf$2+0x66>
0002338e 		cmpl %d1,%d3
00023390 		bhiw 00023380 <Ldivdf$2+0x4e>
00023394 		braw 0002337a <Ldivdf$2+0x48>
00023398 		moveq #53,%d5
0002339a 		cmpl %d2,%d0
0002339c 		bhiw 000233bc <Ldivdf$2+0x8a>
000233a0 		beqw 000233b6 <Ldivdf$2+0x84>
000233a4 		addl %d1,%d1
000233a6 		addxl %d0,%d0
000233a8 		subql #1,%d5
000233aa 		bplw 0002339a <Ldivdf$2+0x68>
000233ae 		moveq #0,%d2
000233b0 		movel %d2,%d3
000233b2 		braw 000233e4 <Ldivdf$2+0xb2>
000233b6 		cmpl %d1,%d3
000233b8 		bhiw 000233a4 <Ldivdf$2+0x72>
000233bc 		moveq #0,%d2
000233be 		movel %d2,%d3
000233c0 		subil #53,%d5
000233c6 		addil #63,%d5
000233cc 		cmpil #31,%d5
000233d2 		bhiw 000233e2 <Ldivdf$2+0xb0>
000233d6 		bset %d5,%d3
000233d8 		braw 000233e4 <Ldivdf$2+0xb2>
000233dc 		subil #32,%d5
000233e2 		bset %d5,%d2
000233e4 		movel %d6,%d0
000233e6 		movel %d7,%d1
000233e8 		moveq #0,%d3
000233ea 		btst #22,%d0
000233ee 		beqw 00023420 <Ldivdf$2+0xee>
000233f2 		lsrl #1,%d3
000233f4 		btst #0,%d2
000233f8 		beqw 00023400 <Ldivdf$2+0xce>
000233fc 		bset #31,%d3
00023400 		lsrl #1,%d2
00023402 		btst #0,%d1
00023406 		beqw 0002340e <Ldivdf$2+0xdc>
0002340a 		bset #31,%d2
0002340e 		lsrl #1,%d1
00023410 		btst #0,%d0
00023414 		beqw 0002341c <Ldivdf$2+0xea>
00023418 		bset #31,%d1
0002341c 		lsrl #1,%d0
0002341e 		addql #1,%d4
00023420 		movel %a0,%d7
00023422 		movew #3,%d5
00023426 		braw 000234da <Lround$exit>
0002342a <Ldivdf$inop>	movew #3,%d5
0002342e 		braw 00022c0c <Ld$inop>
00023432 <Ldivdf$a$0>	movew #3,%d5
00023436 		bclr #31,%d2
0002343a 		movel %d2,%d4
0002343c 		orl %d3,%d4
0002343e 		beqw 00022c0c <Ld$inop>
00023442 		cmpil #2146435072,%d2
00023448 		bhiw 00022c0c <Ld$inop>
0002344c 		bltw 00023456 <Ldivdf$a$0+0x24>
00023450 		tstl %d3
00023452 		bnew 00022c0c <Ld$inop>
00023456 		moveq #0,%d0
00023458 		movel %d0,%d1
0002345a 		lea 0003083c <_fpCCR>,%a0
00023460 		movew #0,%a0@
00023464 		moveml %sp@,%d2-%d7
00023468 		unlk %fp
0002346a 		rts
0002346c <Ldivdf$b$0>	movew #3,%d5
00023470 		movel %a0,%d7
00023472 		cmpil #2146435072,%d0
00023478 		bhiw 00022c0c <Ld$inop>
0002347c 		tstl %d1
0002347e 		bnew 00022c0c <Ld$inop>
00023482 		braw 00022c1c <Ld$div$0>
00023486 <Ldivdf$b$nf>	movew #3,%d5
0002348a 		tstl %d3
0002348c 		bnew 00022c0c <Ld$inop>
00023490 		braw 00022bfc <Ld$underflow>
00023494 <Ldivdf$a$nf>	movew #3,%d5
00023498 		tstl %d1
0002349a 		bnew 00022c0c <Ld$inop>
0002349e 		cmpl %d7,%d2
000234a0 		bgew 00022c0c <Ld$inop>
000234a4 		tstl %d3
000234a6 		bnew 00022c0c <Ld$inop>
000234aa 		braw 00022be6 <Ld$infty>
000234ae <Ldivdf$a$den>	moveq #1,%d4
000234b0 		andl %d6,%d0
000234b2 		addl %d1,%d1
000234b4 		addxl %d0,%d0
000234b6 		subql #1,%d4
000234b8 		btst #20,%d0
000234bc 		bnew 00023320 <Ldivdf$1>
000234c0 		braw 000234b2 <Ldivdf$a$den+0x4>
000234c4 <Ldivdf$b$den>	moveq #1,%d5
000234c6 		andl %d6,%d2
000234c8 		addl %d3,%d3
000234ca 		addxl %d2,%d2
000234cc 		subql #1,%d5
000234ce 		btst #20,%d2
000234d2 		bnew 00023332 <Ldivdf$2>
000234d6 		braw 000234c8 <Ldivdf$b$den+0x4>
000234da <Lround$exit>	cmpil #-54,%d4
000234e0 		bltw 00022bfc <Ld$underflow>
000234e4 		moveal %d7,%a0
000234e6 		moveq #0,%d6
000234e8 		movel %d6,%d7
000234ea 		cmpil #1,%d4
000234f0 		bgew 00023550 <Lround$exit+0x76>
000234f4 		addql #1,%d4
000234f6 		lsrl #1,%d7
000234f8 		btst #0,%d6
000234fc 		beqw 00023504 <Lround$exit+0x2a>
00023500 		bset #31,%d7
00023504 		lsrl #1,%d6
00023506 		btst #0,%d3
0002350a 		beqw 00023512 <Lround$exit+0x38>
0002350e 		bset #31,%d6
00023512 		lsrl #1,%d3
00023514 		btst #0,%d2
00023518 		beqw 00023520 <Lround$exit+0x46>
0002351c 		bset #31,%d3
00023520 		lsrl #1,%d2
00023522 		btst #0,%d1
00023526 		beqw 0002352e <Lround$exit+0x54>
0002352a 		bset #31,%d2
0002352e 		lsrl #1,%d1
00023530 		btst #0,%d0
00023534 		beqw 0002353c <Lround$exit+0x62>
00023538 		bset #31,%d1
0002353c 		lsrl #1,%d0
0002353e 		cmpil #1,%d4
00023544 		beqw 00023550 <Lround$exit+0x76>
00023548 		braw 000234f4 <Lround$exit+0x1a>
0002354c 		braw 00022bfc <Ld$underflow>
00023550 		orl %d6,%d2
00023552 		orl %d7,%d3
00023554 		movel %a0,%d7
00023556 		lea 0002357e <Lround$0>,%a0
0002355c 		lea 0003083c <_fpCCR>,%a1
00023562 		clrl %d6
00023564 		movew %a1@(6),%d6
00023568 		beqw 000236da <Lround$to$nearest>
0002356c 		cmpil #2,%d6
00023572 		bhiw 0002375a <Lround$to$minus>
00023576 		bltw 0002375a <Lround$to$minus>
0002357a 		braw 0002375a <Lround$to$minus>
0002357e <Lround$0>	cmpil #2047,%d4
00023584 		bgew 00022be6 <Ld$infty>
00023588 		movew %d4,%d4
0002358a 		beqw 00022bd8 <Ld$den>
0002358e 		lsll #4,%d4
00023590 		bclr #20,%d0
00023594 		swap %d0
00023596 		orl %d4,%d0
00023598 		swap %d0
0002359a 		orl %d7,%d0
0002359c 		lea 0003083c <_fpCCR>,%a0
000235a2 		movew #0,%a0@
000235a6 		moveml %sp@,%d2-%d7
000235aa 		unlk %fp
000235ac 		rts
000235ae <__negdf2>	linkw %fp,#-24
000235b2 		moveml %d2-%d7,%sp@
000235b6 		movew #4,%d5
000235ba 		movel %fp@(8),%d0
000235be 		movel %fp@(12),%d1
000235c2 		bchg #31,%d0
000235c6 		movel %d0,%d2
000235c8 		bclr #31,%d2
000235cc 		movel %d2,%d4
000235ce 		orl %d1,%d4
000235d0 		beqw 00023606 <__negdf2+0x58>
000235d4 		cmpil #2146435072,%d2
000235da 		bltw 000235f4 <__negdf2+0x46>
000235de 		bhiw 00022c0c <Ld$inop>
000235e2 		tstl %d1
000235e4 		bnew 00022c0c <Ld$inop>
000235e8 		movel %d0,%d7
000235ea 		andil #-2147483648,%d7
000235f0 		braw 00022be6 <Ld$infty>
000235f4 		lea 0003083c <_fpCCR>,%a0
000235fa 		movew #0,%a0@
000235fe 		moveml %sp@,%d2-%d7
00023602 		unlk %fp
00023604 		rts
00023606 		bclr #31,%d0
0002360a 		braw 000235f4 <__negdf2+0x46>
0002360e <__cmpdf2>	linkw %fp,#-24
00023612 		moveml %d2-%d7,%sp@
00023616 		movew #5,%d5
0002361a 		movel %fp@(8),%d0
0002361e 		movel %fp@(12),%d1
00023622 		movel %fp@(16),%d2
00023626 		movel %fp@(20),%d3
0002362a 		movel %d0,%d6
0002362c 		bclr #31,%d0
00023630 		movel %d2,%d7
00023632 		bclr #31,%d2
00023636 		cmpil #2147418112,%d0
0002363c 		bhiw 00022c0c <Ld$inop>
00023640 		beqw 000236c6 <Lcmpdf$a$nf>
00023644 		movel %d0,%d4
00023646 		orl %d1,%d4
00023648 		beqw 000236b6 <Lcmpdf$a$0>
0002364c <Lcmpdf$0>	cmpil #2147418112,%d2
00023652 		bhiw 00022c0c <Ld$inop>
00023656 		beqw 000236d0 <Lcmpdf$b$nf>
0002365a 		movel %d2,%d4
0002365c 		orl %d3,%d4
0002365e 		beqw 000236be <Lcmpdf$b$0>
00023662 <Lcmpdf$1>	eorl %d6,%d7
00023664 		bplw 00023672 <Lcmpdf$1+0x10>
00023668 		tstl %d6
0002366a 		bplw 000236a2 <Lcmpdf$a$gt$b>
0002366e 		bmiw 000236ac <Lcmpdf$b$gt$a>
00023672 		tstl %d6
00023674 		bplw 00023684 <Lcmpdf$1+0x22>
00023678 		movel %d0,%d7
0002367a 		movel %d2,%d0
0002367c 		movel %d7,%d2
0002367e 		movel %d1,%d7
00023680 		movel %d3,%d1
00023682 		movel %d7,%d3
00023684 		cmpl %d0,%d2
00023686 		bhiw 000236ac <Lcmpdf$b$gt$a>
0002368a 		bnew 000236a2 <Lcmpdf$a$gt$b>
0002368e 		cmpl %d1,%d3
00023690 		bhiw 000236ac <Lcmpdf$b$gt$a>
00023694 		bnew 000236a2 <Lcmpdf$a$gt$b>
00023698 		moveq #0,%d0
0002369a 		moveml %sp@,%d2-%d7
0002369e 		unlk %fp
000236a0 		rts
000236a2 <Lcmpdf$a$gt$b>	moveq #1,%d0
000236a4 		moveml %sp@,%d2-%d7
000236a8 		unlk %fp
000236aa 		rts
000236ac <Lcmpdf$b$gt$a>	moveq #-1,%d0
000236ae 		moveml %sp@,%d2-%d7
000236b2 		unlk %fp
000236b4 		rts
000236b6 <Lcmpdf$a$0>	bclr #31,%d6
000236ba 		braw 0002364c <Lcmpdf$0>
000236be <Lcmpdf$b$0>	bclr #31,%d7
000236c2 		braw 00023662 <Lcmpdf$1>
000236c6 <Lcmpdf$a$nf>	tstl %d1
000236c8 		bnew 00022c0c <Ld$inop>
000236cc 		braw 0002364c <Lcmpdf$0>
000236d0 <Lcmpdf$b$nf>	tstl %d3
000236d2 		bnew 00022c0c <Ld$inop>
000236d6 		braw 00023662 <Lcmpdf$1>
000236da <Lround$to$nearest>	btst #21,%d0
000236de 		bnew 000236fa <Lround$to$nearest+0x20>
000236e2 		cmpil #1,%d4
000236e8 		beqw 000236fa <Lround$to$nearest+0x20>
000236ec 		addl %d3,%d3
000236ee 		addxl %d2,%d2
000236f0 		addxl %d1,%d1
000236f2 		addxl %d0,%d0
000236f4 		subql #1,%d4
000236f6 		bplw 000236da <Lround$to$nearest>
000236fa 		btst #0,%d1
000236fe 		beqw 00023722 <Lround$to$nearest+0x48>
00023702 		orl %d2,%d3
00023704 		bnew 0002371a <Lround$to$nearest+0x40>
00023708 		movel %d1,%d3
0002370a 		andil #2,%d3
00023710 		moveq #0,%d2
00023712 		addl %d3,%d1
00023714 		addxl %d2,%d0
00023716 		braw 00023722 <Lround$to$nearest+0x48>
0002371a 		moveq #1,%d3
0002371c 		moveq #0,%d2
0002371e 		addl %d3,%d1
00023720 		addxl %d2,%d0
00023722 		lsrl #1,%d1
00023724 		btst #0,%d0
00023728 		beqw 00023730 <Lround$to$nearest+0x56>
0002372c 		bset #31,%d1
00023730 		lsrl #1,%d0
00023732 		btst #21,%d0
00023736 		beqw 0002374c <Lround$to$nearest+0x72>
0002373a 		lsrl #1,%d1
0002373c 		btst #0,%d0
00023740 		beqw 00023748 <Lround$to$nearest+0x6e>
00023744 		bset #31,%d1
00023748 		lsrl #1,%d0
0002374a 		addql #1,%d4
0002374c 		btst #20,%d0
00023750 		beqw 00023756 <Lround$to$nearest+0x7c>
00023754 		jmp %a0@
00023756 		moveq #0,%d4
00023758 		jmp %a0@
0002375a <Lround$to$minus>	jmp %a0@
0002375c <__fixunsdfsi>	linkw %fp,#0
00023760 		movel %d3,%sp@-
00023762 		movel %d2,%sp@-
00023764 		movel %fp@(8),%d2
00023768 		movel %fp@(12),%d3
0002376c 		clrl %sp@-
0002376e 		movel #1105199104,%sp@-
00023774 		movel %d3,%sp@-
00023776 		movel %d2,%sp@-
00023778 		jsr 00024008 <__gedf2>
0002377e 		lea %sp@(16),%sp
00023782 		tstl %d0
00023784 		bges 00023792 <__fixunsdfsi+0x36>
00023786 		movel %d3,%sp@-
00023788 		movel %d2,%sp@-
0002378a 		jsr 000241a2 <__fixdfsi>
00023790 		bras 000237b8 <__fixunsdfsi+0x5c>
00023792 		clrl %sp@-
00023794 		movel #-1042284544,%sp@-
0002379a 		movel %d3,%sp@-
0002379c 		movel %d2,%sp@-
0002379e 		jsr 00022c38 <__adddf3>
000237a4 		lea %sp@(16),%sp
000237a8 		movel %d1,%sp@-
000237aa 		movel %d0,%sp@-
000237ac 		jsr 000241a2 <__fixdfsi>
000237b2 		addil #-2147483648,%d0
000237b8 		movel %fp@(-8),%d2
000237bc 		movel %fp@(-4),%d3
000237c0 		unlk %fp
000237c2 		rts
000237c4 <Lf$den>	orl %d7,%d0
000237c6 		movew #3,%d7
000237ca 		moveq #1,%d6
000237cc 		jmp 00023f9c <$_exception_handler>
000237d2 <Lf$infty>	movel #2139095040,%d0
000237d8 		orl %d7,%d0
000237da 		movew #5,%d7
000237de 		moveq #1,%d6
000237e0 		jmp 00023f9c <$_exception_handler>
000237e6 <Lf$underflow>	moveq #0,%d0
000237e8 		movew #3,%d7
000237ec 		moveq #1,%d6
000237ee 		jmp 00023f9c <$_exception_handler>
000237f4 <Lf$inop>	moveq #-1,%d0
000237f6 		movew #17,%d7
000237fa 		moveq #1,%d6
000237fc 		jmp 00023f9c <$_exception_handler>
00023802 <Lf$div$0>	movel #2139095040,%d0
00023808 		orl %d7,%d0
0002380a 		movew #9,%d7
0002380e 		moveq #1,%d6
00023810 		jmp 00023f9c <$_exception_handler>
00023816 <__subsf3>	bchg #31,%sp@(8)
0002381c <__addsf3>	linkw %fp,#-24
00023820 		moveml %d2-%d7,%sp@
00023824 		movel %fp@(8),%d0
00023828 		movel %fp@(12),%d1
0002382c 		movel %d0,%d6
0002382e 		addl %d0,%d0
00023830 		beqw 00023a44 <Laddsf$b>
00023834 		movel %d1,%d7
00023836 		addl %d1,%d1
00023838 		beqw 00023a4c <Laddsf$a>
0002383c 		moveal %d6,%a0
0002383e 		moveal %d7,%a1
00023840 		movel #16777215,%d4
00023846 		movel #16777216,%d5
0002384c 		movel %d0,%d6
0002384e 		andl %d4,%d0
00023850 		notl %d4
00023852 		andl %d4,%d6
00023854 		beqw 00023a32 <Laddsf$a$den>
00023858 		cmpl %d4,%d6
0002385a 		beqw 00023aa0 <Laddsf$nf>
0002385e 		swap %d6
00023860 		orl %d5,%d0
00023862 <Laddsf$1>	movel %d1,%d7
00023864 		andl %d4,%d7
00023866 		beqw 00023a3a <Laddsf$b$den>
0002386a 		cmpl %d4,%d7
0002386c 		beqw 00023aa0 <Laddsf$nf>
00023870 		swap %d7
00023872 		notl %d4
00023874 		andl %d4,%d1
00023876 		orl %d5,%d1
00023878 <Laddsf$2>	movel %d1,%d2
0002387a 		moveq #0,%d1
0002387c 		movel %d1,%d3
0002387e 		cmpl %d6,%d7
00023880 		beqw 00023922 <Laddsf$3>
00023884 		bhiw 000238d4 <Laddsf$2+0x5c>
00023888 		subl %d6,%d7
0002388a 		negl %d7
0002388c 		lsrl #8,%d7
0002388e 		cmpil #26,%d7
00023894 		bgew 00023a1c <Laddsf$b$small>
00023898 		cmpil #16,%d7
0002389e 		bgew 000238be <Laddsf$2+0x46>
000238a2 		subql #1,%d7
000238a4 		lsrl #1,%d3
000238a6 		btst #0,%d2
000238aa 		beqw 000238b2 <Laddsf$2+0x3a>
000238ae 		bset #31,%d3
000238b2 		lsrl #1,%d2
000238b4 		subql #1,%d7
000238b6 		bplw 000238a4 <Laddsf$2+0x2c>
000238ba 		braw 00023922 <Laddsf$3>
000238be 		movew %d2,%d3
000238c0 		swap %d3
000238c2 		movew %d3,%d2
000238c4 		swap %d2
000238c6 		subil #16,%d7
000238cc 		bnew 000238a2 <Laddsf$2+0x2a>
000238d0 		braw 00023922 <Laddsf$3>
000238d4 		eorl %d6,%d7
000238d6 		eorl %d7,%d6
000238d8 		eorl %d6,%d7
000238da 		subl %d6,%d7
000238dc 		negl %d7
000238de 		lsrl #8,%d7
000238e0 		cmpil #26,%d7
000238e6 		bgew 00023a06 <Laddsf$a$small>
000238ea 		cmpil #16,%d7
000238f0 		bgew 00023910 <Laddsf$2+0x98>
000238f4 		subql #1,%d7
000238f6 		lsrl #1,%d1
000238f8 		btst #0,%d0
000238fc 		beqw 00023904 <Laddsf$2+0x8c>
00023900 		bset #31,%d1
00023904 		lsrl #1,%d0
00023906 		subql #1,%d7
00023908 		bplw 000238f6 <Laddsf$2+0x7e>
0002390c 		braw 00023922 <Laddsf$3>
00023910 		movew %d0,%d1
00023912 		swap %d1
00023914 		movew %d1,%d0
00023916 		swap %d0
00023918 		subil #16,%d7
0002391e 		bnew 000238f4 <Laddsf$2+0x7c>
00023922 <Laddsf$3>	movel %d6,%d4
00023924 		movel %a0,%d6
00023926 		moveal %d4,%a0
00023928 		movel %d7,%d4
0002392a 		movel %a1,%d7
0002392c 		moveal %d4,%a1
0002392e 		eorl %d6,%d7
00023930 		bmiw 000239ac <Lsubsf$0>
00023934 		movel %d6,%d4
00023936 		movel %a0,%d6
00023938 		moveal %d4,%a0
0002393a 		movel %a0,%d7
0002393c 		andil #-2147483648,%d7
00023942 		addl %d3,%d1
00023944 		addxl %d2,%d0
00023946 		movel %d6,%d2
00023948 		lsrl #8,%d2
0002394a 		btst #25,%d0
0002394e 		beqw 00023964 <Laddsf$3+0x42>
00023952 		lsrl #1,%d1
00023954 		btst #0,%d0
00023958 		beqw 00023960 <Laddsf$3+0x3e>
0002395c 		bset #31,%d1
00023960 		lsrl #1,%d0
00023962 		addql #1,%d2
00023964 		lea 0002398c <Laddsf$4>,%a0
0002396a 		lea 0003083c <_fpCCR>,%a1
00023970 		clrl %d6
00023972 		movew %a1@(6),%d6
00023976 		beqw 00023f34 <Lround$to$nearest>
0002397a 		cmpil #2,%d6
00023980 		bhiw 00023f8c <Lround$to$minus>
00023984 		bltw 00023f8c <Lround$to$minus>
00023988 		braw 00023f8c <Lround$to$minus>
0002398c <Laddsf$4>	cmpil #255,%d2
00023992 		bhiw 000239a4 <Laddsf$4+0x18>
00023996 		bclr #23,%d0
0002399a 		lsll #7,%d2
0002399c 		swap %d2
0002399e 		orl %d2,%d0
000239a0 		braw 00023a86 <Laddsf$ret>
000239a4 		movew #1,%d5
000239a8 		braw 000237d2 <Lf$infty>
000239ac <Lsubsf$0>	movel %d6,%d7
000239ae 		andil #-2147483648,%d7
000239b4 		subl %d3,%d1
000239b6 		subxl %d2,%d0
000239b8 		beqw 00023a86 <Laddsf$ret>
000239bc 		bplw 000239c8 <Lsubsf$0+0x1c>
000239c0 		bchg #31,%d7
000239c4 		negl %d1
000239c6 		negxl %d0
000239c8 		movel %d2,%d4
000239ca 		movel %a0,%d2
000239cc 		moveal %d4,%a0
000239ce 		lsrl #8,%d2
000239d0 		lea 000239f8 <Lsubsf$1>,%a0
000239d6 		lea 0003083c <_fpCCR>,%a1
000239dc 		clrl %d6
000239de 		movew %a1@(6),%d6
000239e2 		beqw 00023f34 <Lround$to$nearest>
000239e6 		cmpil #2,%d6
000239ec 		bhiw 00023f8c <Lround$to$minus>
000239f0 		bltw 00023f8c <Lround$to$minus>
000239f4 		braw 00023f8c <Lround$to$minus>
000239f8 <Lsubsf$1>	bclr #23,%d0
000239fc 		lsll #7,%d2
000239fe 		swap %d2
00023a00 		orl %d2,%d0
00023a02 		braw 00023a86 <Laddsf$ret>
00023a06 <Laddsf$a$small>	movel %fp@(12),%d0
00023a0a 		lea 0003083c <_fpCCR>,%a0
00023a10 		movew #0,%a0@
00023a14 		moveml %sp@,%d2-%d7
00023a18 		unlk %fp
00023a1a 		rts
00023a1c <Laddsf$b$small>	movel %fp@(8),%d0
00023a20 		lea 0003083c <_fpCCR>,%a0
00023a26 		movew #0,%a0@
00023a2a 		moveml %sp@,%d2-%d7
00023a2e 		unlk %fp
00023a30 		rts
00023a32 <Laddsf$a$den>	movel %d5,%d6
00023a34 		swap %d6
00023a36 		braw 00023862 <Laddsf$1>
00023a3a <Laddsf$b$den>	movel %d5,%d7
00023a3c 		swap %d7
00023a3e 		notl %d4
00023a40 		braw 00023878 <Laddsf$2>
00023a44 <Laddsf$b>	movel %fp@(12),%d0
00023a48 		braw 00023a50 <Laddsf$a+0x4>
00023a4c <Laddsf$a>	movel %fp@(8),%d0
00023a50 		movew #1,%d5
00023a54 		movel %d0,%d7
00023a56 		andil #-2147483648,%d7
00023a5c 		bclr #31,%d0
00023a60 		cmpil #2139095040,%d0
00023a66 		bgew 00023a78 <Laddsf$a+0x2c>
00023a6a 		movel %d0,%d0
00023a6c 		bnew 00023a86 <Laddsf$ret>
00023a70 		bclr #31,%d7
00023a74 		braw 00023a86 <Laddsf$ret>
00023a78 		andil #8388607,%d0
00023a7e 		bnew 000237f4 <Lf$inop>
00023a82 		braw 000237d2 <Lf$infty>
00023a86 <Laddsf$ret>	lea 0003083c <_fpCCR>,%a0
00023a8c 		movew #0,%a0@
00023a90 		orl %d7,%d0
00023a92 		moveml %sp@,%d2-%d7
00023a96 		unlk %fp
00023a98 		rts
00023a9a <Laddsf$ret$den>	lsrl #1,%d0
00023a9c 		braw 00023a86 <Laddsf$ret>
00023aa0 <Laddsf$nf>	movew #1,%d5
00023aa4 		movel %fp@(8),%d0
00023aa8 		movel %fp@(12),%d1
00023aac 		movel #2139095040,%d4
00023ab2 		movel %d0,%d2
00023ab4 		movel %d1,%d3
00023ab6 		bclr #31,%d0
00023aba 		bclr #31,%d1
00023abe 		cmpl %d4,%d0
00023ac0 		bhiw 000237f4 <Lf$inop>
00023ac4 		cmpl %d4,%d1
00023ac6 		bhiw 000237f4 <Lf$inop>
00023aca 		eorl %d3,%d2
00023acc 		bmiw 00023adc <Laddsf$nf+0x3c>
00023ad0 		movel %d0,%d7
00023ad2 		andil #-2147483648,%d7
00023ad8 		braw 000237d2 <Lf$infty>
00023adc 		cmpl %d1,%d0
00023ade 		beqw 000237f4 <Lf$inop>
00023ae2 		movel %d0,%d7
00023ae4 		andil #-2147483648,%d7
00023aea 		cmpl %d4,%d0
00023aec 		beqw 000237d2 <Lf$infty>
00023af0 		bchg #31,%d7
00023af4 		braw 000237d2 <Lf$infty>
00023af8 <__mulsf3>	linkw %fp,#-24
00023afc 		moveml %d2-%d7,%sp@
00023b00 		movel %fp@(8),%d0
00023b04 		movel %fp@(12),%d1
00023b08 		movel %d0,%d7
00023b0a 		eorl %d1,%d7
00023b0c 		andil #-2147483648,%d7
00023b12 		movel #2139095040,%d6
00023b18 		movel %d6,%d5
00023b1a 		notl %d5
00023b1c 		movel #8388608,%d4
00023b22 		bclr #31,%d0
00023b26 		movel %d0,%d2
00023b28 		beqw 00023bf8 <Lmulsf$a$0>
00023b2c 		bclr #31,%d1
00023b30 		movel %d1,%d3
00023b32 		beqw 00023bee <Lmulsf$b$0>
00023b36 		cmpl %d6,%d0
00023b38 		bhiw 00023bd0 <Lmulsf$inop>
00023b3c 		beqw 00023be0 <Lmulsf$inf>
00023b40 		cmpl %d6,%d1
00023b42 		bhiw 00023bd0 <Lmulsf$inop>
00023b46 		beqw 00023bd8 <Lmulsf$overflow>
00023b4a 		andl %d6,%d2
00023b4c 		beqw 00023c1c <Lmulsf$a$den>
00023b50 		andl %d5,%d0
00023b52 		orl %d4,%d0
00023b54 		swap %d2
00023b56 		lsrl #7,%d2
00023b58 <Lmulsf$1>	andl %d6,%d3
00023b5a 		beqw 00023c30 <Lmulsf$b$den>
00023b5e 		andl %d5,%d1
00023b60 		orl %d4,%d1
00023b62 		swap %d3
00023b64 		lsrl #7,%d3
00023b66 <Lmulsf$2>	addl %d3,%d2
00023b68 		subil #127,%d2
00023b6e 		movel %d1,%d6
00023b70 		movel %d0,%d5
00023b72 		moveq #0,%d4
00023b74 		movel %d4,%d1
00023b76 		movel %d4,%d0
00023b78 		lsll #8,%d6
00023b7a 		movew #23,%d3
00023b7e 		addl %d1,%d1
00023b80 		addxl %d0,%d0
00023b82 		lsll #1,%d6
00023b84 		bccw 00023b8c <Lmulsf$2+0x26>
00023b88 		addl %d5,%d1
00023b8a 		addxl %d4,%d0
00023b8c 		subql #1,%d3
00023b8e 		bplw 00023b7e <Lmulsf$2+0x18>
00023b92 		movel %d1,%d3
00023b94 		lsll #8,%d1
00023b96 		addl %d1,%d1
00023b98 		addl %d1,%d1
00023b9a 		moveq #22,%d5
00023b9c 		lsrl %d5,%d3
00023b9e 		orl %d3,%d1
00023ba0 		andil #-768,%d1
00023ba6 		lsll #8,%d0
00023ba8 		addl %d0,%d0
00023baa 		addl %d0,%d0
00023bac 		orl %d3,%d0
00023bae 		movew #2,%d5
00023bb2 		btst #25,%d0
00023bb6 		beqw 00023daa <Lround$exit>
00023bba 		lsrl #1,%d1
00023bbc 		btst #0,%d0
00023bc0 		beqw 00023bc8 <Lmulsf$2+0x62>
00023bc4 		bset #31,%d1
00023bc8 		lsrl #1,%d0
00023bca 		addql #1,%d2
00023bcc 		braw 00023daa <Lround$exit>
00023bd0 <Lmulsf$inop>	movew #2,%d5
00023bd4 		braw 000237f4 <Lf$inop>
00023bd8 <Lmulsf$overflow>	movew #2,%d5
00023bdc 		braw 000237d2 <Lf$infty>
00023be0 <Lmulsf$inf>	movew #2,%d5
00023be4 		cmpl %d6,%d1
00023be6 		bhiw 000237f4 <Lf$inop>
00023bea 		braw 000237d2 <Lf$infty>
00023bee <Lmulsf$b$0>	movel %d1,%d0
00023bf0 		movel %fp@(8),%d1
00023bf4 		braw 00023bfc <Lmulsf$a$0+0x4>
00023bf8 <Lmulsf$a$0>	movel %fp@(12),%d1
00023bfc 		bclr #31,%d1
00023c00 		cmpil #2139095040,%d1
00023c06 		bgew 000237f4 <Lf$inop>
00023c0a 		lea 0003083c <_fpCCR>,%a0
00023c10 		movew #0,%a0@
00023c14 		moveml %sp@,%d2-%d7
00023c18 		unlk %fp
00023c1a 		rts
00023c1c <Lmulsf$a$den>	moveq #1,%d2
00023c1e 		andl %d5,%d0
00023c20 		addl %d0,%d0
00023c22 		subql #1,%d2
00023c24 		btst #23,%d0
00023c28 		bnew 00023b58 <Lmulsf$1>
00023c2c 		braw 00023c20 <Lmulsf$a$den+0x4>
00023c30 <Lmulsf$b$den>	moveq #1,%d3
00023c32 		andl %d5,%d1
00023c34 		addl %d1,%d1
00023c36 		subql #1,%d3
00023c38 		btst #23,%d1
00023c3c 		bnew 00023b66 <Lmulsf$2>
00023c40 		braw 00023c34 <Lmulsf$b$den+0x4>
00023c44 <__divsf3>	linkw %fp,#-24
00023c48 		moveml %d2-%d7,%sp@
00023c4c 		movel %fp@(8),%d0
00023c50 		movel %fp@(12),%d1
00023c54 		movel %d0,%d7
00023c56 		eorl %d1,%d7
00023c58 		andil #-2147483648,%d7
00023c5e 		movel #2139095040,%d6
00023c64 		movel %d6,%d5
00023c66 		notl %d5
00023c68 		movel #8388608,%d4
00023c6e 		bclr #31,%d0
00023c72 		movel %d0,%d2
00023c74 		beqw 00023d32 <Ldivsf$a$0>
00023c78 		bclr #31,%d1
00023c7c 		movel %d1,%d3
00023c7e 		beqw 00023d5e <Ldivsf$b$0>
00023c82 		cmpl %d6,%d0
00023c84 		bhiw 00023d1a <Ldivsf$inop>
00023c88 		beqw 00023d70 <Ldivsf$inf>
00023c8c 		cmpl %d6,%d1
00023c8e 		bhiw 00023d1a <Ldivsf$inop>
00023c92 		beqw 00023d2a <Ldivsf$underflow>
00023c96 		andl %d6,%d2
00023c98 		beqw 00023d82 <Ldivsf$a$den>
00023c9c 		andl %d5,%d0
00023c9e 		orl %d4,%d0
00023ca0 		swap %d2
00023ca2 		lsrl #7,%d2
00023ca4 <Ldivsf$1>	andl %d6,%d3
00023ca6 		beqw 00023d96 <Ldivsf$b$den>
00023caa 		andl %d5,%d1
00023cac 		orl %d4,%d1
00023cae 		swap %d3
00023cb0 		lsrl #7,%d3
00023cb2 <Ldivsf$2>	subl %d3,%d2
00023cb4 		addil #126,%d2
00023cba 		moveal %d7,%a0
00023cbc 		moveq #0,%d6
00023cbe 		movel %d6,%d7
00023cc0 		movew #25,%d3
00023cc4 		cmpl %d0,%d1
00023cc6 		bhiw 00023cd2 <Ldivsf$2+0x20>
00023cca 		bset %d3,%d6
00023ccc 		subl %d1,%d0
00023cce 		beqw 00023d02 <Ldivsf$2+0x50>
00023cd2 		addl %d0,%d0
00023cd4 		subql #1,%d3
00023cd6 		bplw 00023cc4 <Ldivsf$2+0x12>
00023cda 		movew #24,%d3
00023cde 		cmpl %d0,%d1
00023ce0 		blew 00023cf2 <Ldivsf$2+0x40>
00023ce4 		addl %d0,%d0
00023ce6 		subql #1,%d3
00023ce8 		bplw 00023cde <Ldivsf$2+0x2c>
00023cec 		moveq #0,%d1
00023cee 		braw 00023d02 <Ldivsf$2+0x50>
00023cf2 		moveq #0,%d1
00023cf4 		subil #24,%d3
00023cfa 		addil #31,%d3
00023d00 		bset %d3,%d1
00023d02 		movel %d6,%d0
00023d04 		movel %a0,%d7
00023d06 		btst #25,%d0
00023d0a 		beqw 00023d12 <Ldivsf$2+0x60>
00023d0e 		lsrl #1,%d0
00023d10 		addql #1,%d2
00023d12 		movew #3,%d5
00023d16 		braw 00023daa <Lround$exit>
00023d1a <Ldivsf$inop>	movew #3,%d5
00023d1e 		braw 000237f4 <Lf$inop>
00023d22 <Ldivsf$overflow>	movew #3,%d5
00023d26 		braw 000237d2 <Lf$infty>
00023d2a <Ldivsf$underflow>	movew #3,%d5
00023d2e 		braw 000237e6 <Lf$underflow>
00023d32 <Ldivsf$a$0>	movew #3,%d5
00023d36 		andil #2147483647,%d1
00023d3c 		beqw 000237f4 <Lf$inop>
00023d40 		cmpil #2139095040,%d1
00023d46 		bhiw 000237f4 <Lf$inop>
00023d4a 		moveq #0,%d0
00023d4c 		lea 0003083c <_fpCCR>,%a0
00023d52 		movew #0,%a0@
00023d56 		moveml %sp@,%d2-%d7
00023d5a 		unlk %fp
00023d5c 		rts
00023d5e <Ldivsf$b$0>	movew #3,%d5
00023d62 		cmpil #2139095040,%d0
00023d68 		bhiw 000237f4 <Lf$inop>
00023d6c 		braw 00023802 <Lf$div$0>
00023d70 <Ldivsf$inf>	movew #3,%d5
00023d74 		cmpil #2139095040,%d1
00023d7a 		bgew 000237f4 <Lf$inop>
00023d7e 		braw 000237d2 <Lf$infty>
00023d82 <Ldivsf$a$den>	moveq #1,%d2
00023d84 		andl %d5,%d0
00023d86 		addl %d0,%d0
00023d88 		subql #1,%d2
00023d8a 		btst #23,%d0
00023d8e 		bnew 00023ca4 <Ldivsf$1>
00023d92 		braw 00023d86 <Ldivsf$a$den+0x4>
00023d96 <Ldivsf$b$den>	moveq #1,%d3
00023d98 		andl %d5,%d1
00023d9a 		addl %d1,%d1
00023d9c 		subql #1,%d3
00023d9e 		btst #23,%d1
00023da2 		bnew 00023cb2 <Ldivsf$2>
00023da6 		braw 00023d9a <Ldivsf$b$den+0x4>
00023daa <Lround$exit>	cmpil #-25,%d2
00023db0 		bltw 000237e6 <Lf$underflow>
00023db4 		moveq #0,%d6
00023db6 		cmpil #1,%d2
00023dbc 		bgew 00023df2 <Lround$exit+0x48>
00023dc0 		addql #1,%d2
00023dc2 		lsrl #1,%d6
00023dc4 		btst #0,%d1
00023dc8 		beqw 00023dd0 <Lround$exit+0x26>
00023dcc 		bset #31,%d6
00023dd0 		lsrl #1,%d1
00023dd2 		btst #0,%d0
00023dd6 		beqw 00023dde <Lround$exit+0x34>
00023dda 		bset #31,%d1
00023dde 		lsrl #1,%d0
00023de0 		cmpil #1,%d2
00023de6 		beqw 00023df2 <Lround$exit+0x48>
00023dea 		braw 00023dc0 <Lround$exit+0x16>
00023dee 		braw 000237e6 <Lf$underflow>
00023df2 		orl %d6,%d1
00023df4 		lea 00023e1c <Lround$0>,%a0
00023dfa 		lea 0003083c <_fpCCR>,%a1
00023e00 		clrl %d6
00023e02 		movew %a1@(6),%d6
00023e06 		beqw 00023f34 <Lround$to$nearest>
00023e0a 		cmpil #2,%d6
00023e10 		bhiw 00023f8c <Lround$to$minus>
00023e14 		bltw 00023f8c <Lround$to$minus>
00023e18 		braw 00023f8c <Lround$to$minus>
00023e1c <Lround$0>	cmpil #255,%d2
00023e22 		bgew 000237d2 <Lf$infty>
00023e26 		movew %d2,%d2
00023e28 		beqw 000237c4 <Lf$den>
00023e2c 		lsll #7,%d2
00023e2e 		bclr #23,%d0
00023e32 		swap %d0
00023e34 		orl %d2,%d0
00023e36 		swap %d0
00023e38 		orl %d7,%d0
00023e3a 		lea 0003083c <_fpCCR>,%a0
00023e40 		movew #0,%a0@
00023e44 		moveml %sp@,%d2-%d7
00023e48 		unlk %fp
00023e4a 		rts
00023e4c <__negsf2>	linkw %fp,#-24
00023e50 		moveml %d2-%d7,%sp@
00023e54 		movew #4,%d5
00023e58 		movel %fp@(8),%d0
00023e5c 		bchg #31,%d0
00023e60 		movel %d0,%d1
00023e62 		bclr #31,%d1
00023e66 		tstl %d1
00023e68 		beqw 00023e98 <__negsf2+0x4c>
00023e6c 		cmpil #2139095040,%d1
00023e72 		bltw 00023e86 <__negsf2+0x3a>
00023e76 		bhiw 000237f4 <Lf$inop>
00023e7a 		movel %d0,%d7
00023e7c 		andil #-2147483648,%d7
00023e82 		braw 000237d2 <Lf$infty>
00023e86 		lea 0003083c <_fpCCR>,%a0
00023e8c 		movew #0,%a0@
00023e90 		moveml %sp@,%d2-%d7
00023e94 		unlk %fp
00023e96 		rts
00023e98 		bclr #31,%d0
00023e9c 		braw 00023e86 <__negsf2+0x3a>
00023ea0 <__cmpsf2>	linkw %fp,#-24
00023ea4 		moveml %d2-%d7,%sp@
00023ea8 		movew #5,%d5
00023eac 		movel %fp@(8),%d0
00023eb0 		movel %fp@(12),%d1
00023eb4 		movel %d0,%d6
00023eb6 		andil #2147483647,%d0
00023ebc 		beqw 00023f24 <Lcmpsf$a$0>
00023ec0 		cmpil #2139095040,%d0
00023ec6 		bhiw 000237f4 <Lf$inop>
00023eca <Lcmpsf$1>	movel %d1,%d7
00023ecc 		andil #2147483647,%d1
00023ed2 		beqw 00023f2c <Lcmpsf$b$0>
00023ed6 		cmpil #2139095040,%d1
00023edc 		bhiw 000237f4 <Lf$inop>
00023ee0 <Lcmpsf$2>	eorl %d6,%d7
00023ee2 		bplw 00023ef0 <Lcmpsf$2+0x10>
00023ee6 		tstl %d6
00023ee8 		bplw 00023f10 <Lcmpsf$a$gt$b>
00023eec 		bmiw 00023f1a <Lcmpsf$b$gt$a>
00023ef0 		tstl %d6
00023ef2 		bplw 00023efc <Lcmpsf$2+0x1c>
00023ef6 		movel %d0,%d7
00023ef8 		movel %d1,%d0
00023efa 		movel %d7,%d1
00023efc 		cmpl %d0,%d1
00023efe 		bhiw 00023f1a <Lcmpsf$b$gt$a>
00023f02 		bnew 00023f10 <Lcmpsf$a$gt$b>
00023f06 		moveq #0,%d0
00023f08 		moveml %sp@,%d2-%d7
00023f0c 		unlk %fp
00023f0e 		rts
00023f10 <Lcmpsf$a$gt$b>	moveq #1,%d0
00023f12 		moveml %sp@,%d2-%d7
00023f16 		unlk %fp
00023f18 		rts
00023f1a <Lcmpsf$b$gt$a>	moveq #-1,%d0
00023f1c 		moveml %sp@,%d2-%d7
00023f20 		unlk %fp
00023f22 		rts
00023f24 <Lcmpsf$a$0>	bclr #31,%d6
00023f28 		braw 00023eca <Lcmpsf$1>
00023f2c <Lcmpsf$b$0>	bclr #31,%d7
00023f30 		braw 00023ee0 <Lcmpsf$2>
00023f34 <Lround$to$nearest>	btst #24,%d0
00023f38 		bnew 00023f50 <Lround$to$nearest+0x1c>
00023f3c 		cmpil #1,%d2
00023f42 		beqw 00023f50 <Lround$to$nearest+0x1c>
00023f46 		addl %d1,%d1
00023f48 		addxl %d0,%d0
00023f4a 		subql #1,%d2
00023f4c 		bplw 00023f34 <Lround$to$nearest>
00023f50 		btst #0,%d0
00023f54 		beqw 00023f70 <Lround$to$nearest+0x3c>
00023f58 		tstl %d1
00023f5a 		bnew 00023f6c <Lround$to$nearest+0x38>
00023f5e 		movel %d0,%d1
00023f60 		andil #2,%d1
00023f66 		addl %d1,%d0
00023f68 		braw 00023f70 <Lround$to$nearest+0x3c>
00023f6c 		moveq #1,%d1
00023f6e 		addl %d1,%d0
00023f70 		lsrl #1,%d0
00023f72 		btst #24,%d0
00023f76 		beqw 00023f7e <Lround$to$nearest+0x4a>
00023f7a 		lsrl #1,%d0
00023f7c 		addql #1,%d2
00023f7e 		btst #23,%d0
00023f82 		beqw 00023f88 <Lround$to$nearest+0x54>
00023f86 		jmp %a0@
00023f88 		moveq #0,%d2
00023f8a 		jmp %a0@
00023f8c <Lround$to$minus>	jmp %a0@
00023f8e 		rts
00023f90 <__clear_sticky_bit>	lea 0003083c <_fpCCR>,%a0
00023f96 		clrw %a0@(4)
00023f9a 		rts
00023f9c <$_exception_handler>	lea 0003083c <_fpCCR>,%a0
00023fa2 		movew %d7,%a0@(0)
00023fa6 		movew %a0@(4),%d4
00023faa 		orl %d7,%d4
00023fac 		movew %d4,%a0@(4)
00023fb0 		movew %d6,%a0@(8)
00023fb4 		movew %d5,%a0@(10)
00023fb8 		cmpil #1,%d6
00023fbe 		beqw 00023fde <$_exception_handler+0x42>
00023fc2 		movel %fp@(8),%a0@(12)
00023fc8 		movel %fp@(12),%a0@(16)
00023fce 		movel %fp@(16),%a0@(20)
00023fd4 		movel %fp@(20),%a0@(24)
00023fda 		braw 00023fea <$_exception_handler+0x4e>
00023fde 		movel %fp@(8),%a0@(12)
00023fe4 		movel %fp@(12),%a0@(20)
00023fea 		clrl %d6
00023fec 		movew %a0@(2),%d6
00023ff0 		andl %d6,%d7
00023ff2 		beqw 00023ffe <$_exception_handler+0x62>
00023ff6 		pea 0003083c <_fpCCR>
00023ffc 		trap #15
00023ffe 		moveml %sp@,%d2-%d7
00024002 		unlk %fp
00024004 		rts
00024006 		rts
00024008 <__gedf2>	linkw %fp,#0
0002400c 		movel %fp@(20),%sp@-
00024010 		movel %fp@(16),%sp@-
00024014 		movel %fp@(12),%sp@-
00024018 		movel %fp@(8),%sp@-
0002401c 		jsr 0002360e <__cmpdf2>
00024022 		unlk %fp
00024024 		rts
00024026 		rts
00024028 <__floatsidf>	linkw %fp,#0
0002402c 		lea %sp@(-12),%sp
00024030 		moveml %d2-%d4,%sp@
00024034 		movel %fp@(8),%d3
00024038 		subal %a0,%a0
0002403a 		movel #1053,%d0
00024040 		tstl %d3
00024042 		bnes 0002404a <__floatsidf+0x22>
00024044 		clrl %d2
00024046 		clrl %d1
00024048 		bras 0002409e <__floatsidf+0x76>
0002404a 		tstl %d3
0002404c 		bges 00024066 <__floatsidf+0x3e>
0002404e 		moveal #-2147483648,%a0
00024054 		negl %d3
00024056 		bpls 00024066 <__floatsidf+0x3e>
00024058 		movel #-1042284544,%d1
0002405e 		clrl %d2
00024060 		bras 0002409e <__floatsidf+0x76>
00024062 		lsll #4,%d3
00024064 		subql #4,%d0
00024066 		cmpil #16777215,%d3
0002406c 		bles 00024062 <__floatsidf+0x3a>
0002406e 		cmpil #1073741823,%d3
00024074 		bgts 00024082 <__floatsidf+0x5a>
00024076 		addl %d3,%d3
00024078 		subql #1,%d0
0002407a 		cmpil #1073741823,%d3
00024080 		bles 00024076 <__floatsidf+0x4e>
00024082 		movel %a0,%d1
00024084 		moveq #20,%d4
00024086 		lsll %d4,%d0
00024088 		orl %d0,%d1
0002408a 		movel %d3,%d0
0002408c 		moveq #10,%d4
0002408e 		asrl %d4,%d0
00024090 		andil #-1048577,%d0
00024096 		orl %d0,%d1
00024098 		movel %d3,%d2
0002409a 		moveq #22,%d0
0002409c 		lsll %d0,%d2
0002409e 		movel %d1,%d0
000240a0 		movel %d2,%d1
000240a2 		moveml %sp@,%d2-%d4
000240a6 		lea %sp@(12),%sp
000240aa 		unlk %fp
000240ac 		rts
000240ae <__floatsisf>	linkw %fp,#0
000240b2 		movel %fp@(8),%sp@-
000240b6 		jsr %pc@(00024028 <__floatsidf>)
000240ba 		movel %d1,%sp@-
000240bc 		movel %d0,%sp@-
000240be 		jsr 00024122 <__truncdfsf2>
000240c4 		unlk %fp
000240c6 		rts
000240c8 <__extendsfdf2>	linkw %fp,#0
000240cc 		lea %sp@(-12),%sp
000240d0 		moveml %d2-%d4,%sp@
000240d4 		movel %fp@(8),%d1
000240d8 		beqs 0002410e <__extendsfdf2+0x46>
000240da 		movel %d1,%d2
000240dc 		andil #-2147483648,%d2
000240e2 		movel %d1,%d0
000240e4 		moveq #23,%d4
000240e6 		asrl %d4,%d0
000240e8 		andil #255,%d0
000240ee 		addil #896,%d0
000240f4 		moveq #20,%d4
000240f6 		lsll %d4,%d0
000240f8 		orl %d0,%d2
000240fa 		andil #8388607,%d1
00024100 		movel %d1,%d0
00024102 		lsrl #3,%d0
00024104 		orl %d0,%d2
00024106 		movel %d1,%d3
00024108 		moveq #29,%d0
0002410a 		lsll %d0,%d3
0002410c 		bras 00024112 <__extendsfdf2+0x4a>
0002410e 		clrl %d3
00024110 		clrl %d2
00024112 		movel %d2,%d0
00024114 		movel %d3,%d1
00024116 		moveml %sp@,%d2-%d4
0002411a 		lea %sp@(12),%sp
0002411e 		unlk %fp
00024120 		rts
00024122 <__truncdfsf2>	linkw %fp,#0
00024126 		lea %sp@(-16),%sp
0002412a 		moveml %d2-%d5,%sp@
0002412e 		movel %fp@(8),%d2
00024132 		movel %fp@(12),%d3
00024136 		tstl %d2
00024138 		bnes 00024142 <__truncdfsf2+0x20>
0002413a 		tstl %d3
0002413c 		bnes 00024142 <__truncdfsf2+0x20>
0002413e 		moveq #0,%d0
00024140 		bras 00024196 <__truncdfsf2+0x74>
00024142 		movel %d2,%d0
00024144 		moveq #20,%d1
00024146 		asrl %d1,%d0
00024148 		andil #2047,%d0
0002414e 		movel %d0,%d4
00024150 		addil #-896,%d4
00024156 		movel %d2,%d1
00024158 		andil #1048575,%d1
0002415e 		oril #1048576,%d1
00024164 		moveq #10,%d5
00024166 		lsll %d5,%d1
00024168 		movel %d3,%d0
0002416a 		moveq #22,%d5
0002416c 		lsrl %d5,%d0
0002416e 		orl %d0,%d1
00024170 		lsrl #6,%d1
00024172 		addql #1,%d1
00024174 		asrl #1,%d1
00024176 		btst #24,%d1
0002417a 		beqs 00024180 <__truncdfsf2+0x5e>
0002417c 		asrl #1,%d1
0002417e 		addql #1,%d4
00024180 		andil #-8388609,%d1
00024186 		movel %d2,%d0
00024188 		andil #-2147483648,%d0
0002418e 		moveq #23,%d2
00024190 		lsll %d2,%d4
00024192 		orl %d4,%d0
00024194 		orl %d1,%d0
00024196 		moveml %sp@,%d2-%d5
0002419a 		lea %sp@(16),%sp
0002419e 		unlk %fp
000241a0 		rts
000241a2 <__fixdfsi>	linkw %fp,#0
000241a6 		lea %sp@(-16),%sp
000241aa 		moveml %d2-%d5,%sp@
000241ae 		movel %fp@(8),%d1
000241b2 		movel %fp@(12),%d2
000241b6 		tstl %d1
000241b8 		bnes 000241c0 <__fixdfsi+0x1e>
000241ba 		clrl %d0
000241bc 		tstl %d2
000241be 		beqs 0002421a <__fixdfsi+0x78>
000241c0 		movel %d1,%d0
000241c2 		moveq #20,%d3
000241c4 		asrl %d3,%d0
000241c6 		andil #2047,%d0
000241cc 		movel %d0,%d4
000241ce 		addil #-1053,%d4
000241d4 		movel %d1,%d3
000241d6 		andil #1048575,%d3
000241dc 		oril #1048576,%d3
000241e2 		moveq #10,%d5
000241e4 		lsll %d5,%d3
000241e6 		movel %d2,%d0
000241e8 		moveq #22,%d5
000241ea 		lsrl %d5,%d0
000241ec 		orl %d0,%d3
000241ee 		tstl %d4
000241f0 		bles 00024200 <__fixdfsi+0x5e>
000241f2 		movel #2147483647,%d0
000241f8 		tstl %d1
000241fa 		bges 0002421a <__fixdfsi+0x78>
000241fc 		addql #1,%d0
000241fe 		bras 0002421a <__fixdfsi+0x78>
00024200 		moveq #-32,%d0
00024202 		cmpl %d4,%d0
00024204 		blts 0002420a <__fixdfsi+0x68>
00024206 		clrl %d0
00024208 		bras 0002421a <__fixdfsi+0x78>
0002420a 		tstl %d4
0002420c 		bges 00024212 <__fixdfsi+0x70>
0002420e 		negl %d4
00024210 		asrl %d4,%d3
00024212 		movel %d3,%d0
00024214 		tstl %d1
00024216 		bges 0002421a <__fixdfsi+0x78>
00024218 		negl %d0
0002421a 		moveml %sp@,%d2-%d5
0002421e 		lea %sp@(16),%sp
00024222 		unlk %fp
00024224 		rts
00024226 <__fixsfsi>	linkw %fp,#0
0002422a 		movel %fp@(8),%d0
0002422e 		movel %d0,%sp@-
00024230 		jsr %pc@(000240c8 <__extendsfdf2>)
00024234 		addql #4,%sp
00024236 		movel %d1,%sp@-
00024238 		movel %d0,%sp@-
0002423a 		jsr %pc@(000241a2 <__fixdfsi>)
0002423e 		unlk %fp
00024240 		rts
 
//------------------------------------------// 
//            TABLA DE SIMBOLOS             // 
//------------------------------------------// 
00030000 00000001 d primeraVez.45
00030002 00000080 d umbrales.103
00030082 00000080 d adapt_DAC.104
00030102 00000010 d teclas.108
00030112 00000002 D salida
00030114 00000004 D f
00030118 00000004 D contadorDFT
0003011c 00000004 D contadorS_out
00030120 00000004 D contadorReset
00030124 00000004 D n_dft
00030128 00000004 D n_frecs
0003012c 00000004 D t_barrido
00030130 00000004 D f_min
00030134 00000004 D f_max
00030138 00000004 D t_comp
0003013c 00000004 D salto
00030140 00000004 D escala
00030144 00000004 D err
00030148 00000004 D scroll
0003014c 00000078 D pasos
000301c4 00000640 d sinusoide10Hz
00030804 00000038 D logs
0003083c d __exception_bits
0003083c D _fpCCR
0003083e d __trap_enable_bits
00030840 d __sticky_bits
00030842 d __rounding_mode
00030844 d __format
00030846 d __last_operation
00030848 d __operand1
00030850 d __operand2
00030858 00000078 b sumaSeno.118
000308d0 00000078 b sumaCoseno.119
00030948 00000004 B p
0003094c 00000004 B frecuencia
00030950 00000004 B j
00030954 00000004 B dft_a
00030958 00000004 B dft
0003095c 00000078 B S_out
000309d4 00000004 B k
000309d8 00000002 B puertoS
000309da 00000004 B k_log
000309de 00000004 B dft_lcd
000309e2 00000004 B frecuencia_
000309e6 00000004 B i
000309ea 00000004 B k_lin
000309ee 00000004 B frec_lcd
000309f4 00000004 B array
000309f8 00000004 B dft_
000309fc 00000004 B frecuencia_a
00030a00 00000004 B tam
00030a04 00000007 B cadena
00030a0c 00000004 B pasoLogs
